/*  Generated by CHR bootstrap compiler
    From: chr_translate.chr
    Date: 13-12-2010 18:6:53

    DO NOT EDIT.  EDIT THE CHR FILE INSTEAD
*/

(:-module(chr_translate,[chr_translate/2])).
(:-use_module(chr_runtime)).
(:-use_module(chr_hashtable_store)).
(:-style_check('-'(discontiguous))).
(:-use_module(chr_runtime)).
(:-use_module(chr_hashtable_store)).
(:-style_check('-'(discontiguous))).
(:-use_module(library(lists),[member/2,append/3,reverse/2,permutation/2,last/2])).
(:-use_module(hprolog)).
(:-use_module(pairlist)).
(:-use_module(library(ordsets))).
(:-use_module(a_star)).
(:-use_module(listmap)).
(:-use_module(clean_code)).
(:-use_module(builtins)).
(:-use_module(find)).
(:-use_module(guard_entailment)).
(:-use_module(chr_compiler_options)).
(:-use_module(chr_compiler_utility)).
(:-use_module(chr_compiler_errors)).
(:-include(chr_op)).
(:-op(1150,fx,chr_type)).
(:-op(1130,xfx,'--->')).
(:-op(980,fx,'+')).
(:-op(980,fx,'-')).
(:-op(980,fx,'?')).
(:-op(1150,fx,constraints)).
(:-op(1150,fx,chr_constraint)).
not_all_ground(['?'|_]).
not_all_ground(['-'|_]).
not_all_ground(['+'|A]) :-
        not_all_ground(A).
set_constraint_indices(A) :-
        set_constraint_indices(A, 1).
set_constraint_indices([], A) :-
        B is A-1,
        max_constraint_index(B).
set_constraint_indices([B|C], A) :-
        (   (   chr_pp_flag(debugable, on)
            ;   \+only_ground_indexed_arguments(B),
                is_stored(B)
            ;   is_stored(B),
                get_store_type(B, default)
            ) ->
            constraint_index(B, A),
            D is A+1,
            set_constraint_indices(C, D)
        ;   set_constraint_indices(C, A)
        ).
chr_translate(A, B) :-
        chr_info(banner, '\tThe K.U.Leuven CHR System\t\n\t\tContributors:\tTom Schrijvers, Jon Sneyers, Bart Demoen,\n\t\t\t\tJan Wielemaker\n\t\tCopyright:\tK.U.Leuven, Belgium\n\t\tURL:\t\thttp://www.cs.kuleuven.be/~~toms/CHR/\n', []),
        init_chr_pp_flags,
        partition_clauses(A, C, D, E),
        check_declared_constraints(C),
        generate_show_constraint(C, F, D, G),
        add_constraints(F),
        add_rules(G),
        check_rules(G, F),
        add_occurrences(G),
        time(fd_analysis, chr_translate:functional_dependency_analysis(G)),
        time(set_semantics_rules, chr_translate:set_semantics_rules(G)),
        time(symmetry_analysis, chr_translate:symmetry_analysis(G)),
        time(guard_simplification, chr_translate:guard_simplification),
        time(storage_analysis, chr_translate:storage_analysis(F)),
        time(observation_analysis, chr_translate:observation_analysis(F)),
        time(ai_observation_analysis, chr_translate:ai_observation_analysis(F)),
        time(late_allocation_analysis, chr_translate:late_allocation_analysis(F)),
        time(assume_constraint_stores, chr_translate:assume_constraint_stores(F)),
        time(set_constraint_indices, chr_translate:set_constraint_indices(F)),
        time(constraints_code, chr_translate:constraints_code(F,H)),
        time(validate_store_type_assumptions, chr_translate:validate_store_type_assumptions(F)),
        phase_end(validate_store_type_assumptions),
        time(store_management_preds, chr_translate:store_management_preds(F,J)),
        insert_declarations(E, I),
        chr_module_declaration(K),
        append([I,J,H,K,[end_of_file]], B).
store_management_preds(A, B) :-
        generate_attach_detach_a_constraint_all(A, C),
        generate_attach_increment(D),
        generate_attr_unify_hook(E),
        generate_extra_clauses(A, F),
        generate_insert_delete_constraints(A, G),
        generate_attach_code(A, H),
        generate_counter_code(I),
        append([C,_,D,E,F,G,H,I], B).
extra_declaration([(:-use_module(chr(chr_runtime))),(:-use_module(chr(chr_hashtable_store)))]).
insert_declarations(A, B) :-
        extra_declaration(C),
        append(A, C, B).
generate_counter_code(A) :-
        (   chr_pp_flag(store_counter, on) ->
            A=[('$counter_init'(B):-nb_setval(B,0)),('$counter'(C,D):-nb_getval(C,D)),('$counter_inc'(E):-nb_getval(E,F),G is F+1,nb_setval(E,G)),(:-'$counter_init'('$insert_counter')),(:-'$counter_init'('$delete_counter')),('$insert_counter_inc':-'$counter_inc'('$insert_counter')),('$delete_counter_inc':-'$counter_inc'('$delete_counter')),(counter_stats(H,I):-'$counter'('$insert_counter',H),'$counter'('$delete_counter',I))]
        ;   A=[]
        ).
chr_module_declaration([]).
partition_clauses([], [], [], []).
partition_clauses([D|E], A, B, C) :-
        (   parse_rule(D, I) ->
            A=F,
            B=[I|G],
            C=H
        ;   is_declaration(D, J) ->
            append(J, F, A),
            B=G,
            C=H
        ;   is_module_declaration(D, K) ->
            target_module(K),
            A=F,
            B=G,
            C=[D|H]
        ;   is_type_definition(D) ->
            A=F,
            B=G,
            C=H
        ;   D=(handler _) ->
            chr_warning(deprecated(D), 'Backward compatibility: ignoring handler/1 declaration.\n', []),
            A=F,
            B=G,
            C=H
        ;   D=(rules _) ->
            chr_warning(deprecated(D), 'Backward compatibility: ignoring rules/1 declaration.\n', []),
            A=F,
            B=G,
            C=H
        ;   D=option(L,M) ->
            chr_warning(deprecated(D), 'Instead use :- chr_option(~w,~w).\n', [L,M]),
            handle_option(L, M),
            A=F,
            B=G,
            C=H
        ;   D=(:-chr_option(L,M)) ->
            handle_option(L, M),
            A=F,
            B=G,
            C=H
        ;   A=F,
            B=G,
            C=[D|H]
        ),
        partition_clauses(E, F, G, H).
is_declaration(A, B) :-
        (   A=(:-E),
            E=..[F,D],
            F==chr_constraint ->
            conj2list(D, C)
        ;   (   A=(:-E) ->
                E=..[constraints,D]
            ;   A=..[constraints,D]
            ),
            conj2list(D, C),
            chr_warning(deprecated(A), 'Instead use :- chr_constraint ~w.\n', [D])
        ),
        extract_type_mode(C, B).
extract_type_mode([], []).
extract_type_mode([C/D|A], [C/D|B]) :- !,
        extract_type_mode(A, B).
extract_type_mode([A|B], [C|D]) :-
        functor(A, E, F),
        C=E/F,
        A=..[_|G],
        extract_types_and_modes(G, H, I),
        constraint_type(E/F, H),
        constraint_mode(E/F, I),
        extract_type_mode(B, D).
extract_types_and_modes([], [], []).
extract_types_and_modes([+B|A], [B|C], ['+'|D]) :- !,
        extract_types_and_modes(A, C, D).
extract_types_and_modes([?B|A], [B|C], ['?'|D]) :- !,
        extract_types_and_modes(A, C, D).
extract_types_and_modes(['-'(B)|A], [B|C], ['?'|D]) :- !,
        extract_types_and_modes(A, C, D).
extract_types_and_modes(['+'|A], [any|B], ['+'|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes(['?'|A], [any|B], ['?'|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes(['-'|A], [any|B], ['?'|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes([A|_], _, _) :-
        chr_error(syntax(A), 'Illegal mode/type declaration.\n\tCorrect syntax is +type, -type or ?type\n\tor +, - or ?.\n', []).
is_type_definition(A) :-
        (   A=(:-B) ->
            true
        ;   A=B
        ),
        B=..[chr_type,C],
        (   C=(D--->E) ->
            tdisj2list(E, F),
            type_definition(D, F)
        ;   C=(G==D) ->
            type_alias(G, D)
        ;   chr_warning(syntax, 'Illegal type definition "~w".\n\tIgnoring this malformed type definition.\n', [C])
        ).
tdisj2list(A, B) :-
        tdisj2list(A, B, []).
tdisj2list(A, B, C) :-
        A=(D ; E), !,
        tdisj2list(D, B, F),
        tdisj2list(E, F, C).
tdisj2list(A, [A|B], B).
parse_rule(A, B) :-
        A=(C@D), !,
        rule(D, yes(C), B).
parse_rule(A, B) :-
        rule(A, no, B).
rule(A, B, C) :-
        A=(D pragma E), !,
        (   var(E) ->
            F=[_]
        ;   conj2list(E, F)
        ),
        inc_rule_count(G),
        C=pragma(H,I,F,B,G),
        is_rule(D, H, I, C).
rule(A, B, C) :-
        inc_rule_count(D),
        C=pragma(E,F,[],B,D),
        is_rule(A, E, F, C).
is_rule(A, B, C, D) :-
        A=(E==>F), !,
        conj2list(E, G),
        get_ids(G, H, I, D),
        C=ids([],H),
        (   F=(J|K) ->
            B=rule([],I,J,K)
        ;   B=rule([],I,true,F)
        ).
is_rule(A, B, C, D) :-
        A=(E<=>F), !,
        (   F=(K|L) ->
            G=K,
            H=L
        ;   G=true,
            H=F
        ),
        (   E=(N\O) ->
            conj2list(N, P),
            conj2list(O, M),
            get_ids(P, R, J, 0, S, D),
            get_ids(M, Q, I, S, _, D),
            C=ids(Q,R)
        ;   conj2list(E, M),
            J=[],
            get_ids(M, Q, I, D),
            C=ids(Q,[])
        ),
        B=rule(I,J,G,H).
get_ids(A, B, C, D) :-
        get_ids(A, B, C, 0, _, D).
get_ids([], [], [], A, A, _).
get_ids([D|E], [A|F], [G|H], A, B, C) :-
        (   D=I#J ->
            (   var(J) ->
                J=A
            ;   J=susp(L) ->
                C=pragma(_,_,_,_,M),
                head_name(M, A, G, L)
            ;   check_direct_pragma(J, A, C)
            ),
            get_ids([I|E], [A|F], [G|H], A, B, C)
        ;   (   G=D ->
                true
            ;   writeln(major_problem(G,D)),
                halt
            ),
            K is A+1,
            get_ids(E, F, H, K, B, C)
        ).
replace_explicit_removes(A, B, (E,F), C, D) :- !,
        replace_explicit_removes(A, B, E, C, G),
        replace_explicit_removes(A, B, F, C, H),
        D=(G,H).
replace_explicit_removes(A, B, (E ; F), C, D) :- !,
        replace_explicit_removes(A, B, E, C, G),
        replace_explicit_removes(A, B, F, C, H),
        D=(G ; H).
replace_explicit_removes(A, B, (E->F), C, D) :- !,
        replace_explicit_removes(A, B, E, C, G),
        replace_explicit_removes(A, B, F, C, H),
        D=(G->H).
replace_explicit_removes(A, B, remove_chr_constraint(E), C, D) :-
        find_head_name(C, E, F, G), !,
        nth(H, B, F),
        nth(H, A, I),
        gen_uncond_susp_detachment(I, G, J),
        D=J.
replace_explicit_removes(_, _, A, _, A).
direct_pragma(passive).
check_direct_pragma(passive, A, B) :-
        B=pragma(_,ids(_,_),_,_,C),
        passive(C, A).
check_direct_pragma(A, _, B) :-
        (   direct_pragma(C),
            atom_concat(A, _, C) ->
            chr_warning(problem_pragma(A,B), 'completed "~w" to "~w"\n', [A,C])
        ;   chr_warning(unsupported_pragma(A,B), '', [])
        ).
is_module_declaration((:-module(A)), A).
is_module_declaration((:-module(A,_)), A).
add_constraints([]).
add_constraints([A|B]) :-
        max_occurrence(A, 0),
        A=_/C,
        length(D, C),
        (   chr_pp_flag(all_ground, on) ->
            set_elems(D, '+')
        ;   set_elems(D, '?')
        ),
        constraint_mode(A, D),
        add_constraints(B).
add_rules([]).
add_rules([A|B]) :-
        A=pragma(_,_,_,_,C),
        rule(C, A),
        add_rules(B).
check_declared_constraints(A) :-
        check_declared_constraints(A, []).
check_declared_constraints([], _).
check_declared_constraints([B|C], A) :-
        (   memberchk_eq(B, A) ->
            chr_error(syntax(B), 'Constraint ~w multiply defined.\n\tRemove redundant declaration!\n', [B])
        ;   true
        ),
        check_declared_constraints(C, [B|A]).
check_rules([], _).
check_rules([B|C], A) :-
        check_rule(B, A),
        check_rules(C, A).
check_rule(A, B) :-
        check_rule_indexing(A),
        A=pragma(C,_,D,_,_),
        C=rule(E,F,_,_),
        append(E, F, G),
        check_head_constraints(G, B, A),
        check_pragmas(D, A).
check_head_constraints([], _, _).
check_head_constraints([C|D], A, B) :-
        functor(C, E, F),
        (   member(E/F, A) ->
            check_head_constraints(D, A, B)
        ;   chr_error(syntax(C), 'Undeclared constraint ~w in head of ~@.\n\tConstraint should be one of ~w.\n', [E/F,format_rule(B),A])
        ).
check_pragmas([], _).
check_pragmas([B|C], A) :-
        check_pragma(B, A),
        check_pragmas(C, A).
check_pragma(A, B) :-
        var(A), !,
        chr_error(syntax(A), 'Invalid pragma ~w in ~@.\n\tPragma should not be a variable!\n', [A,format_rule(B)]).
check_pragma(passive(B), A) :- !,
        A=pragma(_,ids(D,E),_,_,C),
        (   memberchk_eq(B, D) ->
            true
        ;   memberchk_eq(B, E) ->
            true
        ;   chr_error(syntax(B), 'Invalid identifier ~w in pragma passive in ~@.\n', [B,format_rule(A)])
        ),
        passive(C, B).
check_pragma(A, B) :-
        A=already_in_heads, !,
        chr_warning(unsupported_pragma(A,B), 'Termination and correctness may be affected.\n', []).
check_pragma(A, B) :-
        A=already_in_head(_), !,
        chr_warning(unsupported_pragma(A,B), 'Termination and correctness may be affected.\n', []).
check_pragma(A, B) :-
        A=no_history, !,
        chr_warning(experimental, 'Experimental pragma no_history. Use with care!\n', []),
        B=pragma(_,_,_,_,C),
        no_history(C).
check_pragma(A, B) :-
        chr_error(syntax(A), 'Invalid pragma ~w in ~@.\n', [A,format_rule(B)]).
format_rule(A) :-
        A=pragma(_,_,_,B,C),
        (   B=yes(D) ->
            write('rule '),
            write(D)
        ;   write('rule number '),
            write(C)
        ).
check_rule_indexing(A) :-
        A=pragma(B,_,_,_,_),
        B=rule(C,D,E,_),
        term_variables(C-D, F),
        remove_anti_monotonic_guards(E, F, G),
        check_indexing(C, G-D),
        check_indexing(D, G-C),
        (   chr_pp_flag(term_indexing, on) ->
            term_variables(G, H),
            append(C, D, I),
            check_specs_indexing(I, H, _)
        ;   true
        ).
remove_anti_monotonic_guards(A, B, C) :-
        conj2list(A, D),
        remove_anti_monotonic_guard_list(D, B, E),
        list2conj(E, C).
remove_anti_monotonic_guard_list([], _, []).
remove_anti_monotonic_guard_list([C|D], A, B) :-
        (   C=var(F),
            memberchk_eq(F, A) ->
            B=E
        ;   C=functor(_,G,H),
            \+memberchk_eq(G,A),
            \+memberchk_eq(H,A) ->
            B=E
        ;   B=[C|E]
        ),
        remove_anti_monotonic_guard_list(D, A, E).
check_indexing([], _).
check_indexing([B|C], A) :-
        functor(B, D, E),
        B=..[_|F],
        term_variables(C-A, G),
        check_indexing(F, 1, D/E, G),
        check_indexing(C, [B|A]).
check_indexing([], _, _, _).
check_indexing([D|E], A, B, C) :-
        (   is_indexed_argument(B, A) ->
            true
        ;   nonvar(D) ->
            indexed_argument(B, A)
        ;   term_variables(E, H),
            append(H, C, J),
            (   memberchk_eq(D, J) ->
                indexed_argument(B, A)
            ;   true
            )
        ),
        F is A+1,
        term_variables(D, G),
        append(G, C, I),
        check_indexing(E, F, B, I).
check_specs_indexing([], _, []).
check_specs_indexing([C|D], A, B) :-
        B=[E|F],
        term_variables(D, G, A),
        check_spec_indexing(C, G, E),
        term_variables(C, H, A),
        check_specs_indexing(D, H, F).
check_spec_indexing(A, B, C) :-
        functor(A, D, E),
        C=spec(D,E,F),
        A=..[_|G],
        check_args_spec_indexing(G, 1, B, F),
        indexing_spec(D/E, [F]).
check_args_spec_indexing([], _, _, []).
check_args_spec_indexing([D|E], A, B, C) :-
        term_variables(E, F, B),
        (   check_arg_spec_indexing(D, A, F, I) ->
            C=[I|G]
        ;   C=G
        ),
        H is A+1,
        term_variables(D, J, B),
        check_args_spec_indexing(E, H, J, G).
check_arg_spec_indexing(A, B, C, D) :-
        (   var(A) ->
            memberchk_eq(A, C),
            D=specinfo(B,any,[])
        ;   functor(A, E, F),
            D=specinfo(B,E/F,[H]),
            A=..[_|G],
            check_args_spec_indexing(G, 1, C, H)
        ).
add_occurrences([]).
add_occurrences([A|B]) :-
        A=pragma(rule(D,F,_,_),ids(E,G),_,_,C),
        add_occurrences(D, E, C),
        add_occurrences(F, G, C),
        add_occurrences(B).
add_occurrences([], [], _).
add_occurrences([B|C], [D|E], A) :-
        functor(B, F, G),
        H=F/G,
        new_occurrence(H, A, D),
        add_occurrences(C, E, A).
is_observed(A, B) :-
        is_self_observer(A),
        ai_is_observed(A, B).
observation_analysis(A) :-
        (   chr_pp_flag(observation_analysis, on) ->
            observation_analysis(A, A)
        ;   true
        ).
observation_analysis([], _).
observation_analysis([B|C], A) :-
        get_max_occurrence(B, D),
        observation_analysis_occurrences(B, 1, D, A),
        observation_analysis(C, A).
observation_analysis_occurrences(A, B, C, D) :-
        (   B>C ->
            true
        ;   observation_analysis_occurrence(A, B, D),
            E is B+1,
            observation_analysis_occurrences(A, E, C, D)
        ).
observation_analysis_occurrence(A, B, C) :-
        get_occurrence(A, B, D, E),
        (   is_passive(D, E) ->
            true
        ;   get_rule(D, F),
            F=pragma(rule(G,H,_,I),ids(J,K),_,_,_),
            (   select2(E, M, J, G, _, N) ->
                append(N, H, L)
            ;   select2(E, M, K, H, _, O) ->
                append(O, G, L)
            ),
            observe_heads(A, L),
            observe_body(A, I, C)
        ).
observe_heads(A, B) :-
        findall(D/E, (member(F,B),functor(F,D,E)), C),
        observe_all(A, C).
observe_all(A, B) :-
        (   B=[C|D] ->
            observes(A, C),
            observe_all(A, D)
        ;   true
        ).
spawn_all(A, B) :-
        (   B=[C|D] ->
            spawns_observer(A, C),
            spawn_all(A, D)
        ;   true
        ).
spawn_all_triggers(A, B) :-
        (   B=[C|D] ->
            (   may_trigger(C) ->
                spawns_observer(A, C)
            ;   true
            ),
            spawn_all_triggers(A, D)
        ;   true
        ).
observe_body(A, B, C) :-
        (   var(B) ->
            spawn_all(A, C)
        ;   B=true ->
            true
        ;   B=fail ->
            true
        ;   B=(D,E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   B=(D ; E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   B=(D->E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   functor(B, F, G),
            member(F/G, C) ->
            spawns_observer(A, F/G)
        ;   B=(_=_) ->
            spawn_all_triggers(A, C)
        ;   B=(_ is _) ->
            spawn_all_triggers(A, C)
        ;   binds_b(B, H) ->
            (   H==[] ->
                true
            ;   spawn_all_triggers(A, C)
            )
        ;   spawn_all(A, C)
        ).
late_allocation_analysis(A) :-
        (   chr_pp_flag(late_allocation, on) ->
            late_allocation(A)
        ;   true
        ).
late_allocation([]).
late_allocation([A|B]) :-
        allocation_occurrence(A, 1),
        late_allocation(B).
generate_attach_detach_a_constraint_all([], []).
generate_attach_detach_a_constraint_all([B|C], A) :-
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(B),
                \+only_ground_indexed_arguments(B)
            ) ->
            generate_attach_a_constraint(B, E),
            generate_detach_a_constraint(B, F)
        ;   E=[],
            F=[]
        ),
        generate_attach_detach_a_constraint_all(C, D),
        append([E,F,D], A).
generate_attach_a_constraint(A, [B,C]) :-
        generate_attach_a_constraint_empty_list(A, B),
        get_max_constraint_index(D),
        (   D==1 ->
            generate_attach_a_constraint_1_1(A, C)
        ;   generate_attach_a_constraint_t_p(A, C)
        ).
generate_attach_a_constraint_skeleton(A, B, C, D) :-
        make_name(attach_, A, E),
        F=..[E|B],
        D=(F:-C).
generate_attach_a_constraint_empty_list(A, B) :-
        generate_attach_a_constraint_skeleton(A, [[],_], true, B).
generate_attach_a_constraint_1_1(A, B) :-
        C=[[E|F],G],
        generate_attach_a_constraint_skeleton(A, C, D, B),
        generate_attach_body_1(A, E, G, H),
        make_name(attach_, A, I),
        J=..[I,F,G],
        chr_pp_flag(solver_events, K),
        (   K\==none ->
            C=[[E|_],G],
            get_target_module(M),
            use_auxiliary_predicate(run_suspensions),
            L=clp_events:subscribe(E,K,M,M:'$run_suspensions'([G]))
        ;   L=true
        ),
        D=(H,L,J).
generate_attach_body_1(_, A, B, C) :-
        get_target_module(D),
        C=(get_attr(A,D,E)->F=[B|E],put_attr(A,D,F); put_attr(A,D,[B])).
generate_attach_a_constraint_t_p(A, B) :-
        C=[[E|F],G],
        generate_attach_a_constraint_skeleton(A, C, D, B),
        make_name(attach_, A, H),
        I=..[H,F,G],
        generate_attach_body_n(A, E, G, J),
        chr_pp_flag(solver_events, K),
        (   K\==none ->
            C=[[E|_],G],
            get_target_module(M),
            use_auxiliary_predicate(run_suspensions),
            L=clp_events:subscribe(E,K,M,M:'$run_suspensions'([G]))
        ;   L=true
        ),
        D=(J,L,I).
generate_attach_body_n(D/E, A, B, C) :-
        get_constraint_index(D/E, F),
        or_pattern(F, G),
        get_max_constraint_index(H),
        make_attr(H, I, J, K),
        nth1(F, J, L),
        substitute(L, J, [B|L], M),
        make_attr(H, I, M, N),
        substitute(L, J, [B], O),
        make_attr(H, P, O, Q),
        copy_term(J, R),
        nth1(F, R, [B]),
        chr_delete(R, [B], S),
        set_elems(S, []),
        make_attr(H, G, R, T),
        get_target_module(U),
        C=(get_attr(A,U,V)->V=K,(I/\G=:=G->put_attr(A,U,N); P is I\/G,put_attr(A,U,Q)); put_attr(A,U,T)).
generate_detach_a_constraint(A, [B,C]) :-
        generate_detach_a_constraint_empty_list(A, B),
        get_max_constraint_index(D),
        (   D==1 ->
            generate_detach_a_constraint_1_1(A, C)
        ;   generate_detach_a_constraint_t_p(A, C)
        ).
generate_detach_a_constraint_empty_list(A, B) :-
        make_name(detach_, A, C),
        D=[[],_],
        E=..[C|D],
        B=(E:-true).
generate_detach_a_constraint_1_1(A, B) :-
        make_name(detach_, A, C),
        D=[[F|G],H],
        E=..[C|D],
        I=..[C,G,H],
        generate_detach_body_1(A, F, H, J),
        K=(J,I),
        B=(E:-K).
generate_detach_body_1(_, A, B, C) :-
        get_target_module(D),
        C=(get_attr(A,D,E)->'chr sbag_del_element'(E,B,F),(F==[]->del_attr(A,D); put_attr(A,D,F)); true).
generate_detach_a_constraint_t_p(A, B) :-
        make_name(detach_, A, C),
        D=[[F|G],H],
        E=..[C|D],
        I=..[C,G,H],
        generate_detach_body_n(A, F, H, J),
        K=(J,I),
        B=(E:-K).
generate_detach_body_n(D/E, A, B, C) :-
        get_constraint_index(D/E, F),
        or_pattern(F, G),
        and_pattern(F, H),
        get_max_constraint_index(I),
        make_attr(I, J, K, L),
        nth1(F, K, M),
        substitute(M, K, [], N),
        make_attr(I, O, N, P),
        substitute(M, K, Q, R),
        make_attr(I, J, R, S),
        get_target_module(T),
        C=(get_attr(A,T,U)->U=L,(J/\G=:=G->'chr sbag_del_element'(M,B,Q),(Q==[]->O is J/\H,(O==0->del_attr(A,T); put_attr(A,T,P)); put_attr(A,T,S)); true); true).
create_indexed_variables_body([], [], _, _, _, empty, 0).
create_indexed_variables_body([F|G], [H|I], A, B, C, D, E) :-
        J is B+1,
        create_indexed_variables_body(G, I, K, J, C, L, M),
        (   H\==('+'),
            is_indexed_argument(C, B) ->
            (   L==empty ->
                D=term_variables(F,A)
            ;   D=(term_variables(F,A,K),L)
            ),
            E=M
        ;   A=K,
            D=L,
            E is M+1
        ).
spectermvars(A, B, C, D, E, F) :-
        spectermvars(B, 1, A, C, D, F, [], E).
spectermvars([], A, _, _, B, C, C, true) :-
        A>B, !.
spectermvars([H|I], A, B, C, D, E, F, G) :-
        G=(J,K),
        argspecs(B, A, L, M),
        merge_argspecs(L, N),
        arggoal(N, H, J, E, O),
        P is A+1,
        spectermvars(I, P, M, C, D, O, F, K).
argspecs([], _, [], []).
argspecs([[]|D], A, B, C) :-
        argspecs(D, A, B, C).
argspecs([[specinfo(H,I,J)|G]|D], A, B, C) :-
        (   A==H ->
            B=[specinfo(H,I,J)|E],
            (   G=[] ->
                F=C
            ;   C=[G|F]
            )
        ;   B=E,
            C=[[specinfo(H,I,J)|G]|F]
        ),
        argspecs(D, A, E, F).
merge_argspecs(A, B) :-
        sort(A, C),
        merge_argspecs_(C, B).
merge_argspecs_([], []).
merge_argspecs_([B], A) :- !,
        A=[B].
merge_argspecs_([specinfo(B,C,D),specinfo(B,F,G)|E], A) :-
        (   (   C==any
            ;   F==any
            ) ->
            merge_argspecs_([specinfo(B,any,[])|E], A)
        ;   C==F ->
            append(D, G, I),
            merge_argspecs_([specinfo(B,C,I)|E], A)
        ;   A=[specinfo(B,C,D)|H],
            merge_argspecs_([specinfo(B,F,G)|E], H)
        ).
arggoal(A, B, C, D, E) :-
        (   A==[] ->
            D=E,
            C=true
        ;   A=[specinfo(_,any,_)] ->
            C=term_variables(B,D,E)
        ;   C=(var(B)->D=[B|E]; F),
            arggoal_cases(A, B, D, E, F)
        ).
arggoal_cases([], _, A, B, A=B).
arggoal_cases([specinfo(_,G,H)|E], A, B, C, D) :-
        (   H==[] ->
            D=F
        ;   H==[[]] ->
            D=F
        ;   G=I/J ->
            D=(K ; F),
            functor(L, I, J),
            L=..[_|M],
            K=(A=L->N),
            spectermvars(M, 1, H, I, J, B, C, N)
        ),
        arggoal_cases(E, A, B, C, F).
generate_extra_clauses(A, B) :-
        generate_activate_clauses(A, B, C),
        generate_remove_clauses(A, C, D),
        generate_allocate_clauses(A, D, E),
        generate_insert_constraint_internal_clauses(A, E, F),
        generate_novel_production(F, G),
        generate_extend_history(G, H),
        generate_run_suspensions(H, I),
        generate_semimetacalls2(A, I, J),
        generate_semimetacalls1(A, J, K),
        generate_semimetacalls(A, K, L),
        generate_wrapper_preds(A, L, []).
generate_semimetacalls1([], A, A).
generate_semimetacalls1([C|D], A, B) :-
        generate_semimetacall1(C, A, E),
        generate_semimetacalls1(D, E, B).
generate_semimetacall1(A, B, C) :-
        B=[chr_constraint_predicate(A)|C].
generate_semimetacalls2([], A, A).
generate_semimetacalls2([C|D], A, B) :-
        generate_semimetacall2(C, A, E),
        generate_semimetacalls2(D, E, B).
generate_semimetacall2(_, A, B) :-
        A=B.
generate_semimetacalls([], A, A).
generate_semimetacalls([C|D], A, B) :-
        generate_semimetacall(C, A, E),
        generate_semimetacalls(D, E, B).
generate_semimetacall(A, B, C) :-
        A=D/E,
        functor(F, D, E),
        wrapper_pred(F, G),
        H=(chr_semimetacall(F):-G),
        B=[H|C].
generate_wrapper_preds([], A, A).
generate_wrapper_preds([C|D], A, B) :-
        generate_wrapper_pred(C, A, E),
        generate_wrapper_preds(D, E, B).
generate_wrapper_pred(A, B, C) :-
        A=D/E,
        functor(F, D, E),
        wrapper_pred(F, G),
        H=(G:-F),
        B=[H|C].
wrapper_pred(A, B) :-
        A=..[C|D],
        atom_concat(chr_wrapped_, C, E),
        B=..[E|D].
generate_remove_clauses([], A, A).
generate_remove_clauses([C|D], A, B) :-
        generate_remove_clause(C, A, E),
        generate_remove_clauses(D, E, B).
remove_constraint_goal(A, B, C, D, E) :-
        remove_constraint_name(A, F),
        (   chr_pp_flag(debugable, off),
            only_ground_indexed_arguments(A) ->
            E=..[F,B,D]
        ;   E=..[F,B,C,D]
        ).
remove_constraint_name(A, B) :-
        make_name('$remove_constraint_internal_', A, B).
generate_remove_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(remove_constraint_internal, A) ->
            B=[D|C],
            remove_constraint_goal(A, E, F, G, H),
            static_suspension_term(A, E),
            get_static_suspension_term_field(state, A, E, I),
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                D=(H:-var(I)->G=no ; 'chr get_mutable'(L,I),'chr update_mutable'(removed,I),(L=not_stored_yet->G=no ; G=yes))
            ;   get_static_suspension_term_field(arguments, A, E, J),
                generate_indexed_variables_body(A, J, K, F),
                (   chr_pp_flag(debugable, on) ->
                    A=M/_,
                    get_static_suspension_term_field(functor, A, E, M)
                ;   true
                ),
                D=(H:-var(I)->G=no ; 'chr get_mutable'(L,I),'chr update_mutable'(removed,I),(L=not_stored_yet->F=[],G=no ; G=yes,K))
            )
        ;   B=C
        ).
generate_activate_clauses([], A, A).
generate_activate_clauses([C|D], A, B) :-
        generate_activate_clause(C, A, E),
        generate_activate_clauses(D, E, B).
activate_constraint_goal(A, B, C, D, E, F) :-
        activate_constraint_name(A, G),
        (   chr_pp_flag(debugable, off),
            only_ground_indexed_arguments(A) ->
            F=..[G,B,D]
        ;   chr_pp_flag(debugable, off),
            may_trigger(A) ->
            F=..[G,B,C,D,E]
        ;   F=..[G,B,C,D]
        ).
activate_constraint_name(A, B) :-
        make_name('$activate_constraint_', A, B).
generate_activate_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(activate_constraint, A) ->
            B=[D|C],
            get_dynamic_suspension_term_field(state, A, E, F, G),
            activate_constraint_goal(A, H, I, E, J, K),
            (   chr_pp_flag(debugable, off),
                may_trigger(A) ->
                get_dynamic_suspension_term_field(generation, A, E, M, N),
                L=(N,'chr get_mutable'(T,M),J is T+1,'chr update_mutable'(J,M))
            ;   L=true
            ),
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                O=(S==not_stored_yet->H=yes ; H=no)
            ;   get_dynamic_suspension_term_field(arguments, A, E, P, Q),
                generate_indexed_variables_body(A, P, R, I),
                O=(S==not_stored_yet->H=yes,Q,R,'chr none_locked'(I); I=[],H=no)
            ),
            D=(K:-G,'chr get_mutable'(S,F),'chr update_mutable'(active,F),L,O)
        ;   B=C
        ).
generate_allocate_clauses([], A, A).
generate_allocate_clauses([C|D], A, B) :-
        generate_allocate_clause(C, A, E),
        generate_allocate_clauses(D, E, B).
allocate_constraint_goal(A, B, C, _, D, E) :-
        allocate_constraint_name(A, F),
        (   chr_pp_flag(debugable, off),
            may_trigger(A) ->
            E=..[F,B,C|D]
        ;   E=..[F,C|D]
        ).
allocate_constraint_name(A, B) :-
        make_name('$allocate_constraint_', A, B).
generate_allocate_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(allocate_constraint, A) ->
            B=[D|C],
            A=E/F,
            length(G, F),
            allocate_constraint_goal(A, H, I, E, G, J),
            static_suspension_term(A, K),
            get_static_suspension_term_field(id, A, K, L),
            get_static_suspension_term_field(state, A, K, M),
            (   chr_pp_flag(debugable, on)
            ;   may_trigger(A) ->
                get_static_suspension_term_field(continuation, A, K, H),
                get_static_suspension_term_field(generation, A, K, R),
                N='chr create_mutable'(0,R)
            ;   N=true
            ),
            (   chr_pp_flag(debugable, on) ->
                A=Q/_,
                get_static_suspension_term_field(functor, A, K, Q)
            ;   true
            ),
            O=t,
            get_static_suspension_term_field(history, A, K, P),
            get_static_suspension_term_field(arguments, A, K, G),
            I=K,
            D=(J:-N,'chr create_mutable'(O,P),'chr create_mutable'(not_stored_yet,M),'chr gen_id'(L))
        ;   B=C
        ).
generate_insert_constraint_internal_clauses([], A, A).
generate_insert_constraint_internal_clauses([C|D], A, B) :-
        generate_insert_constraint_internal_clause(C, A, E),
        generate_insert_constraint_internal_clauses(D, E, B).
insert_constraint_internal_constraint_goal(A, B, C, D, E, _, F, G) :-
        insert_constraint_internal_constraint_name(A, H),
        (   (   chr_pp_flag(debugable, on)
            ;   may_trigger(A)
            ) ->
            G=..[H,B,C,D,E|F]
        ;   only_ground_indexed_arguments(A) ->
            G=..[H,D|F]
        ;   G=..[H,B,C,D|F]
        ).
insert_constraint_internal_constraint_name(A, B) :-
        make_name('$insert_constraint_internal_', A, B).
generate_insert_constraint_internal_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(insert_constraint_internal, A) ->
            A=D/E,
            length(F, E),
            G=t,
            insert_constraint_internal_constraint_goal(A, yes, H, I, J, D, F, K),
            static_suspension_term(A, L),
            get_static_suspension_term_field(id, A, L, M),
            get_static_suspension_term_field(state, A, L, N),
            (   (   chr_pp_flag(debugable, on)
                ;   may_trigger(A)
                ) ->
                get_static_suspension_term_field(continuation, A, L, J),
                get_static_suspension_term_field(generation, A, L, Q),
                O='chr create_mutable'(0,Q)
            ;   O=true
            ),
            (   chr_pp_flag(debugable, on) ->
                A=R/_,
                get_static_suspension_term_field(functor, A, L, R)
            ;   true
            ),
            G=t,
            get_static_suspension_term_field(history, A, L, P),
            get_static_suspension_term_field(arguments, A, L, F),
            I=L,
            B=[S|C],
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                J=true,
                S=(K:-'chr create_mutable'(active,N),O,'chr create_mutable'(G,P),'chr gen_id'(M))
            ;   generate_indexed_variables_body(A, F, T, H),
                S=(K:-T,'chr none_locked'(H),'chr create_mutable'(active,N),'chr create_mutable'(0,Q),'chr create_mutable'(G,P),'chr gen_id'(M))
            )
        ;   B=C
        ).
generate_novel_production(A, B) :-
        (   is_used_auxiliary_predicate(novel_production) ->
            A=[C|B],
            C=('$novel_production'(D,E):-arg(3,D,F),'chr get_mutable'(G,F),(get_ds(E,G,_)->fail ; true))
        ;   A=B
        ).
generate_extend_history(A, B) :-
        (   is_used_auxiliary_predicate(extend_history) ->
            A=[C|B],
            C=('$extend_history'(D,E):-arg(3,D,F),'chr get_mutable'(G,F),put_ds(E,G,x,H),'chr update_mutable'(H,F))
        ;   A=B
        ).
generate_run_suspensions(A, B) :-
        (   is_used_auxiliary_predicate(run_suspensions) ->
            A=[C,D|B],
            C='$run_suspensions'([]),
            (   chr_pp_flag(debugable, on) ->
                D=('$run_suspensions'([E|F]):-arg(2,E,G),'chr get_mutable'(H,G),(H==active->'chr update_mutable'(triggered,G),arg(4,E,I),'chr get_mutable'(J,I),K is J+1,'chr update_mutable'(K,I),arg(5,E,L),('chr debug_event'(wake(E)),call(L); 'chr debug_event'(fail(E)),'!',fail),('chr debug_event'(exit(E)); 'chr debug_event'(redo(E)),fail),'chr get_mutable'(M,G),(M==triggered->'chr update_mutable'(active,G); true); true),'$run_suspensions'(F))
            ;   D=('$run_suspensions'([E|F]):-arg(2,E,G),'chr get_mutable'(H,G),(H==active->'chr update_mutable'(triggered,G),arg(4,E,I),'chr get_mutable'(J,I),K is J+1,'chr update_mutable'(K,I),arg(5,E,L),call(L),'chr get_mutable'(M,G),(M==triggered->'chr update_mutable'(active,G); true); true),'$run_suspensions'(F))
            )
        ;   A=B
        ), !.
generate_run_suspensions(_, _) :-
        chr_error(internal, 'generate_run_suspensions fails', []).
generate_attach_increment(A) :-
        get_max_constraint_index(B),
        (   B>0 ->
            A=[C,D],
            generate_attach_increment_empty(C),
            (   B==1 ->
                generate_attach_increment_one(D)
            ;   generate_attach_increment_many(B, D)
            )
        ;   A=[]
        ).
generate_attach_increment_empty((attach_increment([],_):-true)).
generate_attach_increment_one(A) :-
        B=attach_increment([E|F],C),
        get_target_module(D),
        G=('chr not_locked'(E),(get_attr(E,D,H)->sort(H,I),'chr merge_attributes'(C,I,J),put_attr(E,D,J); put_attr(E,D,C)),attach_increment(F,C)),
        A=(B:-G).
generate_attach_increment_many(A, B) :-
        make_attr(A, C, D, E),
        make_attr(A, F, G, H),
        I=attach_increment([L|M],E),
        bagof(J, N^P^S^W^(member2(D,G,N-P),J=(sort(P,S),'chr merge_attributes'(N,S,W))), K),
        list2conj(K, O),
        bagof(Q, T^X^Z^member((T,'chr merge_attributes'(X,Z,Q)),K), R),
        make_attr(A, U, R, V),
        get_target_module(Y),
        A1=('chr not_locked'(L),(get_attr(L,Y,B1)->B1=H,O,U is C\/F,put_attr(L,Y,V); put_attr(L,Y,E)),attach_increment(M,E)),
        B=(I:-A1).
generate_attr_unify_hook(A) :-
        get_max_constraint_index(B),
        (   B==0 ->
            A=[]
        ;   A=[C],
            (   B==1 ->
                generate_attr_unify_hook_one(C)
            ;   generate_attr_unify_hook_many(B, C)
            )
        ).
generate_attr_unify_hook_one(A) :-
        B=attr_unify_hook(C,D),
        get_target_module(E),
        make_run_suspensions(F, G),
        make_run_suspensions(C, H),
        I=(sort(C,J),(var(D)->(get_attr(D,E,K)->true ; K=[]),sort(K,L),'chr merge_attributes'(J,L,F),put_attr(D,E,F),G ;(compound(D)->term_variables(D,M),attach_increment(M,J); true),H)),
        A=(B:-I).
generate_attr_unify_hook_many(A, B) :-
        make_attr(A, C, D, E),
        make_attr(A, F, G, H),
        bagof(I, K^M^(member(K,D),I=sort(K,M)), J),
        list2conj(J, L),
        bagof(M, K^member(sort(K,M),J), N),
        bagof(O, Q^T^V^R^(member2(N,G,Q-T),O=(sort(T,V),'chr merge_attributes'(Q,V,R))), P),
        bagof(R, Q^V^Y^member((Y,'chr merge_attributes'(Q,V,R)),P), S),
        list2conj(P, U),
        make_attr(A, W, S, X),
        make_attr(A, C, N, Z),
        A1=attr_unify_hook(E,B1),
        get_target_module(C1),
        make_run_suspensions_loop(S, D1),
        make_run_suspensions_loop(N, E1),
        F1=(L,(var(B1)->(get_attr(B1,C1,G1)->G1=H,U,W is C\/F,put_attr(B1,C1,X),D1 ; put_attr(B1,C1,Z),E1);(compound(B1)->term_variables(B1,H1),attach_increment(H1,Z); true),E1)),
        B=(A1:-F1).
make_run_suspensions(A, B) :-
        make_run_suspensions(1, A, B).
make_run_suspensions(A, B, C) :-
        (   get_indexed_constraint(A, D),
            may_trigger(D) ->
            use_auxiliary_predicate(run_suspensions),
            C='$run_suspensions'(B)
        ;   C=true
        ).
make_run_suspensions_loop(A, B) :-
        make_run_suspensions_loop(A, 1, B).
make_run_suspensions_loop([], _, true).
make_run_suspensions_loop([B|C], A, (D,E)) :-
        make_run_suspensions(A, B, D),
        F is A+1,
        make_run_suspensions_loop(C, F, E).
generate_insert_delete_constraints([], []).
generate_insert_delete_constraints([B|C], A) :-
        (   is_stored(B) ->
            A=[E,F|D],
            generate_insert_delete_constraint(B, E, F)
        ;   A=D
        ),
        generate_insert_delete_constraints(C, D).
generate_insert_delete_constraint(A, B, C) :-
        get_store_type(A, D),
        generate_insert_constraint(D, A, B),
        generate_delete_constraint(D, A, C).
generate_insert_constraint(A, B, C) :-
        make_name('$insert_in_store_', B, D),
        E=..[D,F],
        generate_insert_constraint_body(A, B, F, G),
        (   chr_pp_flag(store_counter, on) ->
            H='$insert_counter_inc'
        ;   H=true
        ),
        C=(E:-H,G).
generate_insert_constraint_body(default, A, B, C) :-
        global_list_store_name(A, D),
        make_get_store_goal(D, E, F),
        make_update_store_goal(D, G, H),
        (   chr_pp_flag(debugable, on) ->
            G=[B|E],
            C=(F,H)
        ;   set_dynamic_suspension_term_field(global_list_prev, A, I, G, J),
            C=(F,G=[B|E],H,(E=[I|_]->J ; true))
        ).
generate_insert_constraint_body(multi_inthash(D), A, B, C) :-
        generate_multi_inthash_insert_constraint_bodies(D, A, B, C).
generate_insert_constraint_body(multi_hash(D), A, B, C) :-
        generate_multi_hash_insert_constraint_bodies(D, A, B, C).
generate_insert_constraint_body(global_ground, A, B, C) :-
        global_ground_store_name(A, D),
        make_get_store_goal(D, E, F),
        make_update_store_goal(D, G, H),
        (   chr_pp_flag(debugable, on) ->
            G=[B|E],
            C=(F,H)
        ;   set_dynamic_suspension_term_field(global_list_prev, A, I, G, J),
            C=(F,G=[B|E],H,(E=[I|_]->J ; true))
        ).
generate_insert_constraint_body(global_singleton, A, B, C) :-
        global_singleton_store_name(A, D),
        make_update_store_goal(D, B, E),
        C=E.
generate_insert_constraint_body(multi_store(D), A, B, C) :-
        find_with_var_identity(E, [B], (member(G,D),chr_translate:generate_insert_constraint_body(G,A,B,E)), F),
        list2conj(F, C).
generate_multi_inthash_insert_constraint_bodies([], _, _, true).
generate_multi_inthash_insert_constraint_bodies([C|D], A, B, (E,F)) :-
        multi_hash_store_name(A, C, G),
        multi_hash_key(A, C, B, H, I),
        E=(H,nb_getval(G,J),insert_iht(J,I,B)),
        generate_multi_inthash_insert_constraint_bodies(D, A, B, F).
generate_multi_hash_insert_constraint_bodies([], _, _, true).
generate_multi_hash_insert_constraint_bodies([C|D], A, B, (E,F)) :-
        multi_hash_store_name(A, C, G),
        multi_hash_key(A, C, B, H, I),
        make_get_store_goal(G, J, K),
        E=(H,K,insert_ht(J,I,B)),
        generate_multi_hash_insert_constraint_bodies(D, A, B, F).
generate_delete_constraint(A, B, C) :-
        make_name('$delete_from_store_', B, D),
        E=..[D,F],
        generate_delete_constraint_body(A, B, F, G),
        (   chr_pp_flag(store_counter, on) ->
            H='$delete_counter_inc'
        ;   H=true
        ),
        C=(E:-H,G).
generate_delete_constraint_body(default, A, B, C) :-
        (   chr_pp_flag(debugable, on) ->
            global_list_store_name(A, F),
            make_get_store_goal(F, G, H),
            make_update_store_goal(F, I, J),
            C=(H,'chr sbag_del_element'(G,B,I),J)
        ;   get_dynamic_suspension_term_field(global_list_prev, A, B, D, E),
            global_list_store_name(A, F),
            make_get_store_goal(F, G, H),
            make_update_store_goal(F, K, J),
            set_dynamic_suspension_term_field(global_list_prev, A, L, _, M),
            set_dynamic_suspension_term_field(global_list_prev, A, L, D, N),
            C=(E,(var(D)->H,G=[_|K],J,(K=[L|_]->M ; true); D=[_,_|K],setarg(2,D,K),(K=[L|_]->N ; true)))
        ).
generate_delete_constraint_body(multi_inthash(D), A, B, C) :-
        generate_multi_inthash_delete_constraint_bodies(D, A, B, C).
generate_delete_constraint_body(multi_hash(D), A, B, C) :-
        generate_multi_hash_delete_constraint_bodies(D, A, B, C).
generate_delete_constraint_body(global_ground, A, B, C) :-
        (   chr_pp_flag(debugable, on) ->
            global_ground_store_name(A, F),
            make_get_store_goal(F, G, H),
            make_update_store_goal(F, I, J),
            C=(H,'chr sbag_del_element'(G,B,I),J)
        ;   get_dynamic_suspension_term_field(global_list_prev, A, B, D, E),
            global_ground_store_name(A, F),
            make_get_store_goal(F, G, H),
            make_update_store_goal(F, K, J),
            set_dynamic_suspension_term_field(global_list_prev, A, L, _, M),
            set_dynamic_suspension_term_field(global_list_prev, A, L, D, N),
            C=(E,(var(D)->H,G=[_|K],J,(K=[L|_]->M ; true); D=[_,_|K],setarg(2,D,K),(K=[L|_]->N ; true)))
        ).
generate_delete_constraint_body(global_singleton, A, _, B) :-
        global_singleton_store_name(A, C),
        make_update_store_goal(C, [], D),
        B=D.
generate_delete_constraint_body(multi_store(D), A, B, C) :-
        find_with_var_identity(E, [B], (member(G,D),chr_translate:generate_delete_constraint_body(G,A,B,E)), F),
        list2conj(F, C).
generate_multi_inthash_delete_constraint_bodies([], _, _, true).
generate_multi_inthash_delete_constraint_bodies([C|D], A, B, (E,F)) :-
        multi_hash_store_name(A, C, G),
        multi_hash_key(A, C, B, H, I),
        E=(H,nb_getval(G,J),delete_iht(J,I,B)),
        generate_multi_inthash_delete_constraint_bodies(D, A, B, F).
generate_multi_hash_delete_constraint_bodies([], _, _, true).
generate_multi_hash_delete_constraint_bodies([C|D], A, B, (E,F)) :-
        multi_hash_store_name(A, C, G),
        multi_hash_key(A, C, B, H, I),
        make_get_store_goal(G, J, K),
        E=(H,K,delete_ht(J,I,B)),
        generate_multi_hash_delete_constraint_bodies(D, A, B, F).
generate_delete_constraint_call(A, B, C) :-
        make_name('$delete_from_store_', A, D),
        C=..[D,B].
generate_insert_constraint_call(A, B, C) :-
        make_name('$insert_in_store_', A, D),
        C=..[D,B].
generate_attach_code(A, [B|C]) :-
        enumerate_stores_code(A, B),
        generate_attach_code(A, C, D),
        module_initializers(E),
        prolog_global_variables_code(F),
        get_target_module(G),
        atom_concat_list(['$',G,'__',chr_initialization], H),
        D=[(H:-E),(:-H)|F].
generate_attach_code([], A, A).
generate_attach_code([C|D], A, B) :-
        get_store_type(C, E),
        generate_attach_code(E, C, A, F),
        generate_attach_code(D, F, B).
generate_attach_code(default, A, B, C) :-
        global_list_store_initialisation(A, B, C).
generate_attach_code(multi_inthash(D), A, B, C) :-
        multi_inthash_store_initialisations(D, A, B, E),
        multi_inthash_via_lookups(D, A, E, C).
generate_attach_code(multi_hash(D), A, B, C) :-
        multi_hash_store_initialisations(D, A, B, E),
        multi_hash_via_lookups(D, A, E, C).
generate_attach_code(global_ground, A, B, C) :-
        global_ground_store_initialisation(A, B, C).
generate_attach_code(global_singleton, A, B, C) :-
        global_singleton_store_initialisation(A, B, C).
generate_attach_code(multi_store(D), A, B, C) :-
        multi_store_generate_attach_code(D, A, B, C).
multi_store_generate_attach_code([], _, A, A).
multi_store_generate_attach_code([D|E], A, B, C) :-
        generate_attach_code(D, A, B, F),
        multi_store_generate_attach_code(E, A, F, C).
multi_inthash_store_initialisations([], _, A, A).
multi_inthash_store_initialisations([D|E], A, B, C) :-
        multi_hash_store_name(A, D, F),
        module_initializer((new_iht(H),nb_setval(F,H))),
        G=B,
        multi_inthash_store_initialisations(E, A, G, C).
multi_hash_store_initialisations([], _, A, A).
multi_hash_store_initialisations([D|E], A, B, C) :-
        multi_hash_store_name(A, D, F),
        prolog_global_variable(F),
        make_init_store_goal(F, G, H),
        module_initializer((new_ht(G),H)),
        I=B,
        multi_hash_store_initialisations(E, A, I, C).
global_list_store_initialisation(A, B, C) :-
        global_list_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
global_ground_store_initialisation(A, B, C) :-
        global_ground_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
global_singleton_store_initialisation(A, B, C) :-
        global_singleton_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
multi_inthash_via_lookups([], _, A, A).
multi_inthash_via_lookups([D|E], A, B, C) :-
        multi_hash_via_lookup_name(A, D, F),
        G=..[F,I,K],
        multi_hash_store_name(A, D, H),
        J=(nb_getval(H,M),lookup_iht(M,I,K)),
        B=[(G:-J)|L],
        multi_inthash_via_lookups(E, A, L, C).
multi_hash_via_lookups([], _, A, A).
multi_hash_via_lookups([D|E], A, B, C) :-
        multi_hash_via_lookup_name(A, D, F),
        G=..[F,I,L],
        multi_hash_store_name(A, D, H),
        make_get_store_goal(H, J, K),
        M=(K,lookup_ht(J,I,L)),
        B=[(G:-M)|N],
        multi_hash_via_lookups(E, A, N, C).
multi_hash_via_lookup_name(C/D, A, B) :-
        (   integer(A) ->
            E=A
        ;   is_list(A) ->
            atom_concat_list(A, E)
        ),
        atom_concat_list(['$via1_multi_hash_',C,'/',D,'-',E], B).
multi_hash_store_name(C/D, A, B) :-
        get_target_module(E),
        (   integer(A) ->
            F=A
        ;   is_list(A) ->
            atom_concat_list(A, F)
        ),
        atom_concat_list(['$chr_store_multi_hash_',E,':',C,'/',D,'-',F], B).
multi_hash_key(E/F, A, B, C, D) :-
        (   (   integer(A) ->
                G=A
            ;   A=[G]
            ) ->
            get_dynamic_suspension_term_field(argument(G), E/F, B, D, C)
        ;   is_list(A) ->
            sort(A, H),
            find_with_var_identity(J-K, [B], (member(G,H),get_dynamic_suspension_term_field(argument(G),E/F,B,K,J)), I),
            once(pairup(L,M,I)),
            D=..[k|M],
            list2conj(L, C)
        ).
multi_hash_key_args(A, B, C) :-
        (   integer(A) ->
            arg(A, B, D),
            C=[D]
        ;   is_list(A) ->
            sort(A, E),
            term_variables(B, F),
            find_with_var_identity(D, F, (member(G,E),arg(G,B,D)), C)
        ).
global_list_store_name(B/C, A) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_list_',D,':',B,'/',C], A).
global_ground_store_name(B/C, A) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_ground_',D,':',B,'/',C], A).
global_singleton_store_name(B/C, A) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_singleton_',D,':',B,'/',C], A).
prolog_global_variables_code([]).
sbag_member_call(A, B, 'chr sbag_member'(A,B)).
enumerate_stores_code(A, B) :-
        C='$enumerate_constraints'(D),
        enumerate_store_bodies(A, D, E),
        list2disj(E, F),
        B=(C:-F).
enumerate_store_bodies([], _, []).
enumerate_store_bodies([C|D], A, B) :-
        (   is_stored(C) ->
            get_store_type(C, F),
            enumerate_store_body(F, C, G, H),
            get_dynamic_suspension_term_field(arguments, C, G, I, J),
            C=K/_,
            L=(H,J,A=..[K|I]),
            B=[L|E]
        ;   B=E
        ),
        enumerate_store_bodies(D, A, E).
enumerate_store_body(default, A, B, C) :-
        global_list_store_name(A, D),
        sbag_member_call(B, E, F),
        make_get_store_goal(D, E, G),
        C=(G,F).
enumerate_store_body(multi_inthash([D|_]), A, B, C) :-
        multi_inthash_enumerate_store_body(D, A, B, C).
enumerate_store_body(multi_hash([D|_]), A, B, C) :-
        multi_hash_enumerate_store_body(D, A, B, C).
enumerate_store_body(global_ground, A, B, C) :-
        global_ground_store_name(A, D),
        sbag_member_call(B, E, F),
        make_get_store_goal(D, E, G),
        C=(G,F).
enumerate_store_body(global_singleton, A, B, C) :-
        global_singleton_store_name(A, D),
        make_get_store_goal(D, B, E),
        C=(E,B\==[]).
enumerate_store_body(multi_store(D), A, B, C) :-
        once((member(E,D),enumerate_store_body(E,A,B,C))).
multi_inthash_enumerate_store_body(A, B, C, D) :-
        multi_hash_store_name(B, A, E),
        D=(nb_getval(E,F),value_iht(F,C)).
multi_hash_enumerate_store_body(A, B, C, D) :-
        multi_hash_store_name(B, A, E),
        make_get_store_goal(E, F, G),
        D=(G,value_ht(F,C)).
guard_simplification :-
        (   chr_pp_flag(guard_simplification, on) ->
            multiple_occ_constraints_checked([]),
            simplify_guards(1)
        ;   true
        ).
add_type_information_(_, [], true) :- !.
add_type_information_(A, [C|D], B) :- !,
        add_type_information(A, C, E),
        B=(E,F),
        add_type_information_(A, D, F).
compute_derived_info(_, [], _, _, _, _, _, _, [], []) :- !.
compute_derived_info(A, [J|K], B, C, D, E, F, G, H, I) :- !,
        copy_term(A-D, L),
        variable_replacement(A-D, L, M),
        append(J, M, N),
        list2conj(A, O),
        negate_b(O, P),
        make_head_matchings_explicit_not_negated2(C, B, Q),
        list2conj(Q, R),
        term_variables(N, S),
        term_variables(A-D-Q, T),
        new_vars(T, S, U),
        append(N, U, V),
        negate_b(D, W),
        (   D==true ->
            X=P
        ;   X=(P ; R,W)
        ),
        copy_with_variable_replacement(X, Y, V),
        copy_with_variable_replacement(D, Z, V),
        copy_with_variable_replacement(A, A1, V),
        list2conj(A1, B1),
        add_guard_to_head(F, Z, C1),
        add_guard_to_head(C1, B1, D1),
        append([Y], E1, H),
        append([D1], F1, I),
        compute_derived_info(A, K, B, C, D, E, F, G, E1, F1).
simplify_guard(A, B, C, D, E) :-
        conj2list(A, F),
        guard_entailment:simplify_guards(C,B,F,G,E),
        list2conj(G, D).
new_vars([], _, []).
new_vars([C|D], A, B) :-
        (   memberchk_eq(C, A) ->
            new_vars(D, A, B)
        ;   B=[C-F,F-C|E],
            new_vars(D, A, E)
        ).
head_subset(A, B, C) :-
        head_subset(A, B, C, [], _).
head_subset([], A, B, C, D) :- !,
        B=C,
        D=A.
head_subset([E|F], A, B, C, D) :- !,
        head_subset(E, A, G, C, H),
        head_subset(F, H, I, G, J),
        B=I,
        D=J.
head_subset(A, [E|F], B, C, D) :- !,
        (   head_subset(A, E, G, C, _),
            B=G,
            D=F
        ;   head_subset(A, F, H, C, I),
            B=H,
            D=[E|I]
        ).
head_subset(A, B, C, D, E) :-
        variable_replacement(A, B, D, C),
        E=[].
make_head_matchings_explicit(A, B, C) :-
        extract_variables(A, D),
        make_matchings_explicit(D, E, [], [], _, C),
        insert_variables(E, A, B).
make_head_matchings_explicit_not_negated(A, B, C) :-
        extract_variables(A, D),
        make_matchings_explicit_not_negated(D, E, [], C),
        insert_variables(E, A, B).
make_head_matchings_explicit_not_negated2(A, B, C) :-
        extract_variables(A, D),
        extract_variables(B, E),
        make_matchings_explicit_not_negated(D, E, [], C).
extract_variables([], []).
extract_variables([B|C], A) :-
        B=..[_|D],
        extract_variables(C, E),
        append(D, E, A).
insert_variables([], [], []) :- !.
insert_variables(A, [B|C], [D|E]) :-
        B=..[F|G],
        length(G, H),
        take_first_N(A, H, I, J),
        D=..[F|I],
        insert_variables(J, C, E).
take_first_N(A, 0, [], A) :- !.
take_first_N([C|D], A, [C|E], B) :-
        F is A-1,
        take_first_N(D, F, E, B).
make_matchings_explicit([], [], _, A, A, []).
make_matchings_explicit([E|F], [G|H], A, B, C, D) :-
        (   var(E) ->
            (   memberchk_eq(E, A) ->
                list2disj(B, S),
                D=[(S ; G==E)|K],
                I=A
            ;   D=K,
                G=E,
                I=[E|A]
            ),
            J=B
        ;   functor(E, L, M),
            E=..[L|N],
            make_matchings_explicit(N, O, A, B, P, Q),
            R=..[L|O],
            (   Q==[] ->
                D=[functor(G,L,M)|K]
            ;   list2conj(Q, T),
                list2disj(B, S),
                V=(G\=R ; S ; T),
                D=[functor(G,L,M),V|K]
            ),
            J=[G\=R|P],
            term_variables(N, U),
            append(A, U, I)
        ),
        make_matchings_explicit(F, H, I, J, C, K).
make_matchings_explicit_not_negated([], [], _, []).
make_matchings_explicit_not_negated([C|D], [E|F], A, B) :-
        B=[E=C|G],
        H=A,
        make_matchings_explicit_not_negated(D, F, H, G).
add_guard_to_head([], _, []).
add_guard_to_head([B|C], A, [D|E]) :-
        (   var(B) ->
            find_guard_info_for_var(B, A, D)
        ;   functor(B, F, _),
            B=..[F|G],
            add_guard_to_head(G, A, H),
            D=..[F|H]
        ),
        add_guard_to_head(C, A, E).
find_guard_info_for_var(A, (C,D), B) :- !,
        find_guard_info_for_var(A, C, E),
        find_guard_info_for_var(E, D, B).
find_guard_info_for_var(A, B, C) :-
        (   B=(E=D),
            A==E ->
            C=D
        ;   B=functor(H,I,G),
            A==H,
            ground(I),
            ground(G) ->
            length(F, G),
            C=..[I|F]
        ;   C=A
        ).
replace_some_heads(A, B, _, [], A, B, _, _, []) :- !.
replace_some_heads([], [D|E], [F|G], [H|I], [], [J|K], A, B, C) :- !,
        (   F==H ->
            J=H,
            replace_some_heads([], E, G, I, [], K, A, B, C)
        ;   H=functor(L,O,N),
            F==L ->
            length(M, N),
            (   var(D) ->
                Q=[],
                J=..[O|M]
            ;   D=..[O|R],
                use_same_args(R, M, S, A, B, Q),
                J=..[O|S]
            ),
            replace_some_heads([], E, G, I, [], K, A, B, P),
            append(Q, P, C)
        ;   J=D,
            replace_some_heads([], E, G, [H|I], [], K, A, B, C)
        ).
replace_some_heads([F|G], A, [H|I], [J|K], [L|M], B, C, D, E) :- !,
        (   H==J ->
            L=J,
            replace_some_heads(G, A, I, K, M, B, C, D, E)
        ;   J=functor(N,Q,P),
            H==N ->
            length(O, P),
            (   var(F) ->
                S=[],
                L=..[Q|O]
            ;   F=..[Q|T],
                use_same_args(T, O, U, C, D, S),
                L=..[Q|U]
            ),
            replace_some_heads(G, A, I, K, M, B, C, D, R),
            append(S, R, E)
        ;   L=F,
            replace_some_heads(G, A, I, [J|K], M, B, C, D, E)
        ).
use_same_args([], [], [], _, _, []).
use_same_args([D|E], [_|F], [G|H], A, B, C) :-
        var(D), !,
        G=D,
        use_same_args(E, F, H, A, B, C).
use_same_args([D|E], [F|G], [H|I], A, B, C) :-
        nonvar(D), !,
        (   vars_occur_in(D, B) ->
            C=[F=D|J]
        ;   C=J
        ),
        H=F,
        use_same_args(E, G, I, A, B, J).
simplify_heads([], _, _, _, [], []).
simplify_heads([F|G], A, B, C, D, E) :-
        F=(H=I),
        (   (   nonvar(I)
            ;   vars_occur_in(I, G-A)
            ),
            guard_entailment:entails_guard(A,H=I) ->
            (   vars_occur_in(I, B-G-A) ->
                E=K,
                D=J
            ;   (   vars_occur_in(I, C) ->
                    E=[H=I|K]
                ;   E=K
                ),
                D=[H|J]
            )
        ;   nonvar(I),
            functor(I, L, M),
            guard_entailment:entails_guard([functor(H,L,M)|A],H=I) ->
            E=K,
            (   vars_occur_in(I, B-G-A) ->
                D=J
            ;   D=[functor(H,L,M)|J]
            )
        ;   D=J,
            E=K
        ),
        simplify_heads(G, [F|A], B, C, J, K).
vars_occur_in(A, B) :-
        term_variables(A, C),
        term_variables(B, D),
        intersect_eq(C, D, E),
        E\==[].
flatten_stuff([B|C], A) :- !,
        flatten_stuff(B, D),
        flatten_stuff(C, E),
        append(D, E, A).
flatten_stuff((B ; C), A) :- !,
        flatten_stuff(B, D),
        flatten_stuff(C, E),
        append(D, E, A).
flatten_stuff((B,C), A) :- !,
        flatten_stuff(B, D),
        flatten_stuff(C, E),
        append(D, E, A).
flatten_stuff(chr_pp_not_in_store(A), [A]) :- !.
flatten_stuff(_, []).
unify_stuff(_, [], []).
unify_stuff(A, [B|C], [D|E]) :-
        B\==D,
        term_variables(B, F),
        term_variables(D, G),
        intersect_eq(F, G, H),
        check_safe_unif(B, D, H),
        variable_replacement(B, D, I),
        check_replacement(I),
        term_variables(I, J),
        list_difference_eq(J, F, K),
        intersect_eq(A, K, L),
        L==[],
        B=D,
        unify_stuff(A, C, E), !.
unify_stuff(A, B, [_|C]) :-
        unify_stuff(A, B, C).
unify_stuff(A, [_|C], B) :-
        unify_stuff(A, C, B).
check_safe_unif(A, B, C) :-
        var(A), !,
        var(B),
        (   (   memberchk_eq(A, C)
            ;   memberchk_eq(B, C)
            ) ->
            A==B
        ;   true
        ).
check_safe_unif([], [], _) :- !.
check_safe_unif([B|C], [D|E], A) :- !,
        check_safe_unif(B, D, A), !,
        check_safe_unif(C, E, A).
check_safe_unif(A, B, C) :-
        nonvar(A), !,
        nonvar(B),
        A=..[D|E],
        B=..[D|F],
        check_safe_unif(E, F, C).
check_safe_unif2(A, _) :-
        var(A), !.
check_safe_unif2([], []) :- !.
check_safe_unif2([A|B], [C|D]) :- !,
        check_safe_unif2(A, C), !,
        check_safe_unif2(B, D).
check_safe_unif2(A, B) :-
        nonvar(A), !,
        nonvar(B),
        A=..[C|D],
        B=..[C|E],
        check_safe_unif2(D, E).
check_replacement(A) :-
        check_replacement(A, B),
        sort(B, C),
        length(C, D), !,
        length(B, D).
check_replacement([], []).
check_replacement([C-_|A], [C|B]) :-
        check_replacement(A, B).
add_failing_occ(A, B, C, D, E, F, _, G, H) :-
        A=pragma(rule(_,_,L,_),ids(J,I),_,_,_),
        append(I, J, K),
        missing_partner_cond(B, C, K, D, M, N, G),
        copy_term((N,B,C), (O,P,Q)),
        variable_replacement((N,B,C), (O,P,Q), H),
        copy_with_variable_replacement(L, R, H),
        extract_explicit_matchings(R, S),
        negate_b(S, T),
        copy_with_variable_replacement(M, U, H),
        (   check_safe_unif2(F, O),
            F=O ->
            E=[(T ; U)]
        ;   E=[chr_pp_void_info]
        ).
missing_partner_cond([], [], [], _, fail, _, _).
missing_partner_cond([C|E], [_|F], [A|G], A, B, C, D) :- !,
        missing_partner_cond(E, F, G, A, B, C, D).
missing_partner_cond([D|E], [_|F], [_|G], A, B, C, H/I) :-
        B=(chr_pp_not_in_store(D); J),
        missing_partner_cond(E, F, G, A, J, C, H/I).
extract_explicit_matchings(A=B) :-
        var(A),
        var(B), !,
        A=B.
extract_explicit_matchings(A==B) :-
        var(A),
        var(B), !,
        A=B.
extract_explicit_matchings((B,C), A) :- !,
        (   extract_explicit_matchings(B) ->
            extract_explicit_matchings(C, A)
        ;   A=(B,D),
            extract_explicit_matchings(C, D)
        ).
extract_explicit_matchings(A, B) :- !,
        (   extract_explicit_matchings(A) ->
            B=true
        ;   B=A
        ).
oneway_unification(A, B) :-
        term_variables(A, C),
        chr_runtime:lockv(C),
        A=B,
        chr_runtime:unlockv(C).
add_mode_info([], [], true).
add_mode_info(['+'|B], [C|D], A) :- !,
        A=(ground(C),E),
        add_mode_info(B, D, E).
add_mode_info([_|B], [_|C], A) :-
        add_mode_info(B, C, A).
types2condition([], [], [], [], []).
types2condition([B|C], [D|E], [F|G], [H|I], A) :-
        (   get_type_definition(B, J) ->
            type2condition(J, D, F, K),
            (   H\==('+') ->
                N=[\+ground(D)|K]
            ;   N=K
            ),
            list2disj(N, O),
            A=[O|M],
            types2condition(C, E, G, I, M)
        ;   builtin_type(B, D, L) ->
            A=[L|M],
            types2condition(C, E, G, I, M)
        ;   chr_error(internal, 'Undefined type ~w.\n', [B])
        ).
type2condition([], _, _, []).
type2condition([D|E], A, B, C) :-
        (   builtin_type(D, A, F) ->
            true
        ;   real_type(D, A, B, F)
        ),
        item2list(F, G),
        type2condition(E, A, B, H),
        append(G, H, C).
item2list([], []) :- !.
item2list([A|B], [A|B]) :- !.
item2list(A, B) :-
        B=[A].
builtin_type(A, _, true) :-
        var(A), !.
builtin_type(any, _, true).
builtin_type(dense_int, A, (integer(A),A>=0)).
builtin_type(int, A, integer(A)).
builtin_type(number, A, number(A)).
builtin_type(float, A, float(A)).
builtin_type(natural, A, (integer(A),A>=0)).
real_type(A, B, C, D) :-
        (   nonvar(A) ->
            functor(A, E, F),
            (   F==0 ->
                D=(B=E)
            ;   A=..[_|G],
                length(H, F),
                I=..[E|H],
                (   var(C) ->
                    D=functor(B,E,F)
                ;   functor(C, E, F) ->
                    C=..[_|J],
                    nested_types(G, H, J, K),
                    D=(functor(B,E,F),B=I,K)
                ;   D=functor(B,E,F)
                )
            )
        ;   chr_error(internal, 'Illegal type definition (must be nonvar).\n', [])
        ).
nested_types([], [], [], true).
nested_types([B|C], [D|E], [F|G], A) :-
        (   get_type_definition(B, H) ->
            type2condition(H, D, F, I),
            list2disj(I, K),
            A=(K,L),
            nested_types(C, E, G, L)
        ;   builtin_type(B, D, J) ->
            A=(J,L),
            nested_types(C, E, G, L)
        ;   chr_error(internal, 'Undefined type ~w inside type definition.\n', [B])
        ).
storage_analysis(A) :-
        (   chr_pp_flag(storage_analysis, on) ->
            check_constraint_storages(A)
        ;   true
        ).
check_constraint_storages([]).
check_constraint_storages([A|B]) :-
        check_constraint_storage(A),
        check_constraint_storages(B).
check_constraint_storage(A) :-
        get_max_occurrence(A, B),
        check_occurrences_storage(A, 1, B).
check_occurrences_storage(A, B, C) :-
        (   B>C ->
            stored_completing(A, 1, 0)
        ;   check_occurrence_storage(A, B),
            D is B+1,
            check_occurrences_storage(A, D, C)
        ).
check_occurrence_storage(A, B) :-
        get_occurrence(A, B, C, D),
        (   is_passive(C, D) ->
            stored(A, B, maybe)
        ;   get_rule(C, E),
            E=pragma(rule(F,G,H,I),ids(J,K),_,_,_),
            (   select2(D, L, J, F, _, _) ->
                check_storage_head1(L, B, F, G, H)
            ;   select2(D, M, K, G, _, _) ->
                check_storage_head2(M, B, F, I)
            )
        ).
check_storage_head1(A, B, C, D, E) :-
        functor(A, F, G),
        H=F/G,
        (   C==[A],
            D==[],
            guard_entailment:entails_guard([chr_pp_headvariables(A)],E),
            A=..[_|I],
            no_matching(I, []) ->
            stored(H, B, no)
        ;   stored(H, B, maybe)
        ).
no_matching([], _).
no_matching([B|C], A) :-
        var(B),
        \+memberchk_eq(B,A),
        no_matching(C, [B|A]).
check_storage_head2(A, B, C, D) :-
        functor(A, E, F),
        G=E/F,
        (   (   C\==[],
                D==true
            ;   \+is_observed(E/F,B)
            ) ->
            stored(G, B, maybe)
        ;   stored(G, B, yes)
        ).
constraints_code(A, B) :-
        (   chr_pp_flag(reduced_indexing, on),
            \+forsome(D,A,\+chr_translate:only_ground_indexed_arguments(D)) ->
            none_suspended_on_variables
        ;   true
        ),
        constraints_code1(A, C, []),
        clean_clauses(C, B).
constraint_prelude(B/C, A) :-
        vars_susp(C, D, E, F),
        G=..[B|D],
        make_suspension_continuation_goal(B/C, F, H),
        build_head(B, C, [0], F, I),
        _=..[B|D],
        (   chr_pp_flag(debugable, on) ->
            use_auxiliary_predicate(insert_constraint_internal, B/C),
            generate_insert_constraint_call(B/C, E, J),
            make_name(attach_, B/C, L),
            N=..[L,P,E],
            M=(arg(2,E,O),'chr update_mutable'(inactive,O)),
            insert_constraint_internal_constraint_goal(B/C, _, P, E, H, B, D, Q),
            A=(G:-Q,J,N,M,('chr debug_event'(call(E)),I ; 'chr debug_event'(fail(E)),'!',fail),('chr debug_event'(exit(E)); 'chr debug_event'(redo(E)),fail))
        ;   get_allocation_occurrence(B/C, 0) ->
            gen_insert_constraint_internal_goal(B/C, K, F, D, E),
            M=(arg(2,E,O),'chr update_mutable'(inactive,O)),
            A=(G:-K,M,I)
        ;   A=(G:-I)
        ).
make_suspension_continuation_goal(C/D, A, B) :-
        (   may_trigger(C/D) ->
            get_target_module(E),
            build_head(C, D, [0], A, F),
            B=E:F
        ;   B=true
        ).
gen_cond_attach_clause(D/E, A, B, C) :-
        (   is_finally_stored(D/E) ->
            get_allocation_occurrence(D/E, F),
            get_max_occurrence(D/E, G),
            (   chr_pp_flag(debugable, off),
                G<F ->
                (   only_ground_indexed_arguments(D/E) ->
                    gen_insert_constraint_internal_goal(D/E, K, J, H, I)
                ;   gen_cond_attach_goal(D/E, K, J, H, I)
                )
            ;   vars_susp(E, H, I, J),
                gen_uncond_attach_goal(D/E, I, K, _)
            ),
            (   chr_pp_flag(debugable, on) ->
                O=..[D|H],
                L='chr debug_event'(insert(O#I))
            ;   L=true
            ),
            build_head(D, E, A, J, M),
            N=(M:-L,K),
            B=[N|C]
        ;   B=C
        ).
gen_cond_attach_goal(E/F, A, B, C, D) :-
        vars_susp(F, C, D, B),
        make_suspension_continuation_goal(E/F, B, G),
        make_name(attach_, E/F, H),
        I=..[H,J,D],
        _=..[E|C],
        generate_insert_constraint_call(E/F, D, K),
        use_auxiliary_predicate(insert_constraint_internal, E/F),
        insert_constraint_internal_constraint_goal(E/F, L, J, D, G, E, C, M),
        use_auxiliary_predicate(activate_constraint, E/F),
        (   may_trigger(E/F) ->
            activate_constraint_goal(E/F, L, J, D, _, N),
            A=((var(D)->M ; N),(L==yes->K,I ; true))
        ;   A=(M,K,I)
        ).
gen_insert_constraint_internal_goal(E/F, A, B, C, D) :-
        vars_susp(F, C, D, B),
        make_suspension_continuation_goal(E/F, B, G),
        (   \+only_ground_indexed_arguments(E/F) ->
            make_name(attach_, E/F, J),
            H=..[J,K,D]
        ;   H=true
        ),
        _=..[E|C],
        generate_insert_constraint_call(E/F, D, I),
        use_auxiliary_predicate(insert_constraint_internal, E/F),
        insert_constraint_internal_constraint_goal(E/F, _, K, D, G, E, C, L),
        (   only_ground_indexed_arguments(E/F),
            chr_pp_flag(debugable, off) ->
            A=(L,I)
        ;   A=(L,I,H)
        ).
gen_uncond_attach_goal(A, B, C, D) :-
        (   \+only_ground_indexed_arguments(A) ->
            make_name(attach_, A, G),
            E=..[G,I,B]
        ;   E=true
        ),
        generate_insert_constraint_call(A, B, F),
        (   chr_pp_flag(late_allocation, on) ->
            use_auxiliary_predicate(activate_constraint, A),
            activate_constraint_goal(A, H, I, B, D, J),
            C=(J,(H==yes->F,E ; true))
        ;   use_auxiliary_predicate(activate_constraint, A),
            activate_constraint_goal(A, H, I, B, D, C)
        ).
head1_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,_,_,_,K),
        J=rule(_,L,_,_),
        (   L==[] ->
            reorder_heads(K, A, B, C, M, N),
            simplification_code(A, M, N, D, E, F, G, H, I)
        ;   simpagation_head1_code(A, B, C, D, E, G, H, I)
        ).
head2_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,_,_,_,K),
        J=rule(L,_,_,_),
        (   L==[] ->
            reorder_heads(K, A, B, C, M, N),
            propagation_code(A, M, N, J, K, E, F, G, H, I)
        ;   simpagation_head2_code(A, B, C, D, E, F, G, H, I)
        ).
gen_alloc_inc_clause(E/F, A, B, C, D) :-
        vars_susp(F, G, H, I),
        build_head(E, F, B, I, J),
        inc_id(B, K),
        build_head(E, F, K, I, L),
        gen_occ_allocation(E/F, A, G, H, I, M),
        N=(J:-M,L),
        C=[N|D].
gen_cond_allocation(A, B, C, D, E) :-
        gen_allocation(A, B, C, D, F),
        E=(var(B)->F ; true).
gen_allocation(A, B, E/F, C, D) :-
        (   may_trigger(E/F) ->
            build_head(E, F, [0], C, H),
            get_target_module(I),
            G=I:H
        ;   G=true
        ),
        _=..[E|A],
        use_auxiliary_predicate(allocate_constraint, E/F),
        allocate_constraint_goal(E/F, G, B, E, A, D).
gen_occ_allocation(A, B, C, D, E, F) :-
        get_allocation_occurrence(A, G),
        (   chr_pp_flag(debugable, off),
            B==G ->
            (   may_trigger(A) ->
                gen_cond_allocation(C, D, A, E, F)
            ;   gen_allocation(C, D, A, E, F)
            )
        ;   F=true
        ).
guard_via_reschedule_new(A, B, C, D, E, F) :-
        (   chr_pp_flag(guard_via_reschedule, on) ->
            guard_via_reschedule_main_new(A, B, C, D, E, H),
            list2conj(H, F)
        ;   length(A, G),
            length(E, G),
            length(B, I),
            length(D, I),
            append(E, D, J),
            list2conj(J, F)
        ).
guard_via_reschedule_main_new(A, B, C, D, E, F) :-
        initialize_unit_dictionary(C, G),
        maplist(wrap_in_functor(lookup), A, H),
        maplist(wrap_in_functor(guard), B, I),
        build_units(H, I, G, J),
        dependency_reorder(J, K),
        wrappedunits2lists(K, L, E, F),
        sort(L, M),
        snd_of_pairs(M, D).
wrap_in_functor(A, B, C) :-
        C=..[A,B].
wrappedunits2lists([], [], [], []).
wrappedunits2lists([unit(E,F,_,_)|D], A, B, C) :-
        C=[G|H],
        (   F=lookup(K) ->
            B=[G|J],
            A=I
        ;   F=guard(K) ->
            A=[E-G|I],
            B=J
        ),
        wrappedunits2lists(D, I, J, H).
guard_splitting(A, B) :-
        A=rule(C,D,E,_),
        append(C, D, F),
        conj2list(E, G),
        term_variables(F, H),
        split_off_simple_guard_new(G, H, I, J),
        append(I, [K], B),
        term_variables(J, L),
        ground_vars(F, M),
        list_difference_eq(H, M, N),
        intersect_eq(N, L, O),
        (   chr_pp_flag(guard_locks, on),
            bagof('chr lock'(V)-'chr unlock'(V), lists:member(V,O), T) ->
            once(pairup(P,R,T))
        ;   P=[],
            R=[]
        ),
        list2conj(P, Q),
        list2conj(R, S),
        list2conj(J, U),
        K=(Q,U,S).
guard_body_copies3(A, B, C, D, E) :-
        A=rule(_,_,_,F),
        my_term_copy(B, C, G, D),
        my_term_copy(F, G, E).
split_off_simple_guard_new([], _, [], []).
split_off_simple_guard_new([D|E], A, B, C) :-
        (   simple_guard_new(D, A) ->
            B=[D|F],
            split_off_simple_guard_new(E, A, F, C)
        ;   B=[],
            C=[D|E]
        ).
simple_guard_new(A, B) :-
        binds_b(A, C),
        \+ (member(D,C),memberchk_eq(D,B)).
dependency_reorder(A, B) :-
        dependency_reorder(A, [], B).
dependency_reorder([], A, B) :-
        reverse(A, B).
dependency_reorder([C|D], A, B) :-
        C=unit(_,_,E,F),
        (   E==fixed ->
            G=[C|A]
        ;   dependency_insert(A, C, F, G)
        ),
        dependency_reorder(D, G, B).
dependency_insert([], A, _, [A]).
dependency_insert([D|E], A, B, C) :-
        D=unit(F,_,_,_),
        (   memberchk(F, B) ->
            C=[A,D|E]
        ;   C=[D|G],
            dependency_insert(E, A, B, G)
        ).
build_units(A, B, C, D) :-
        build_retrieval_units(A, 1, E, C, F, D, G),
        build_guard_units(B, E, F, G).
build_retrieval_units([], A, A, B, B, C, C).
build_retrieval_units([G|H], A, B, C, D, E, F) :-
        term_variables(G, I),
        update_unit_dictionary(I, A, C, J, [], K),
        E=[unit(A,G,fixed,K)|L],
        M is A+1,
        build_retrieval_units(H, M, B, J, D, L, F).
initialize_unit_dictionary(A, B) :-
        term_variables(A, C),
        pair_all_with(C, 0, B).
update_unit_dictionary([], _, A, A, B, B).
update_unit_dictionary([F|G], A, B, C, D, E) :-
        (   lookup_eq(B, F, J) ->
            (   (   J==A
                ;   memberchk(J, D)
                ) ->
                I=D
            ;   I=[J|D]
            ),
            H=B
        ;   H=[F-A|B],
            I=D
        ),
        update_unit_dictionary(G, A, H, C, I, E).
build_guard_units(A, B, C, D) :-
        (   A=[E] ->
            D=[unit(B,E,fixed,[])]
        ;   A=[E|F] ->
            term_variables(E, G),
            update_unit_dictionary2(G, B, C, H, [], I),
            D=[unit(B,E,movable,I)|J],
            K is B+1,
            build_guard_units(F, K, H, J)
        ).
update_unit_dictionary2([], _, A, A, B, B).
update_unit_dictionary2([F|G], A, B, C, D, E) :-
        (   lookup_eq(B, F, J) ->
            (   (   J==A
                ;   memberchk(J, D)
                ) ->
                I=D
            ;   I=[J|D]
            ),
            H=[F-A|B]
        ;   H=[F-A|B],
            I=D
        ),
        update_unit_dictionary2(G, A, H, C, I, E).
functional_dependency_analysis(A) :-
        (   chr_pp_flag(functional_dependency_analysis, on) ->
            functional_dependency_analysis_main(A)
        ;   true
        ).
functional_dependency_analysis_main([]).
functional_dependency_analysis_main([A|B]) :-
        (   discover_unique_pattern(A, C, D, E, F) ->
            functional_dependency(C, D, E, F)
        ;   true
        ),
        functional_dependency_analysis_main(B).
discover_unique_pattern(A, E/F, B, C, D) :-
        A=pragma(G,_,_,_,B),
        G=rule(H,I,J,_),
        (   H=[K],
            I=[L] ->
            true
        ;   H=[K,L],
            I==[] ->
            true
        ),
        check_unique_constraints(K, L, J, B, M),
        term_variables(K, N),
        \+ (member(P,N),lookup_eq(M,P,Q),memberchk_eq(Q,N)),
        select_pragma_unique_variables(N, M, O),
        copy_term_nat(K-O, C-D),
        functor(K, E, F).
select_pragma_unique_variables([], _, []).
select_pragma_unique_variables([C|D], A, B) :-
        (   lookup_eq(A, C, _) ->
            B=E
        ;   B=[C|E]
        ),
        select_pragma_unique_variables(D, A, E).
set_semantics_rules(A) :-
        (   chr_pp_flag(set_semantics_rule, on) ->
            set_semantics_rules_main(A)
        ;   true
        ).
set_semantics_rules_main([]).
set_semantics_rules_main([A|B]) :-
        set_semantics_rule_main(A),
        set_semantics_rules_main(B).
set_semantics_rule_main(A) :-
        A=pragma(B,C,_,_,D),
        (   B=rule([F],[G],true,_),
            C=ids([H],[E]),
            \+is_passive(D,H),
            functor(F, I, J),
            get_functional_dependency(I/J, D, K, L),
            copy_term_nat(K-L, F-M),
            copy_term_nat(K-L, G-N),
            M==N ->
            passive(D, E)
        ;   true
        ).
check_unique_constraints(A, B, C, D, E) :-
        \+any_passive_head(D),
        variable_replacement(A-B, B-A, E),
        copy_with_variable_replacement(C, F, E),
        negate_b(C, G),
        once(entails_b(G,F)).
symmetry_analysis(A) :-
        (   chr_pp_flag(check_unnecessary_active, off) ->
            true
        ;   symmetry_analysis_main(A)
        ).
symmetry_analysis_main([]).
symmetry_analysis_main([A|B]) :-
        A=pragma(C,ids(E,F),_,_,D),
        C=rule(G,H,_,_),
        (   (   \+chr_pp_flag(check_unnecessary_active,simplification)
            ;   H==[]
            ),
            G\==[] ->
            symmetry_analysis_heads(G, E, [], [], C, D),
            symmetry_analysis_heads(H, F, [], [], C, D)
        ;   true
        ),
        symmetry_analysis_main(B).
symmetry_analysis_heads([], [], _, _, _, _).
symmetry_analysis_heads([E|F], [G|H], A, B, C, D) :-
        (   \+is_passive(D,G),
            member2(A, B, I-J),
            \+is_passive(D,J),
            variable_replacement(I, E, K),
            copy_with_variable_replacement(C, L, K),
            identical_rules(C, L) ->
            passive(D, G)
        ;   true
        ),
        symmetry_analysis_heads(F, H, [E|A], [G|B], C, D).
simplification_code(A, B, C, D, I/J, E, F, G, H) :-
        D=pragma(K,_,_,_,_),
        head_info(A, J, _, L, M, N),
        build_head(I, J, F, M, O),
        get_constraint_mode(I/J, P),
        head_arg_matches(N, P, [], Q, R, [], S),
        guard_splitting(K, T),
        guard_via_reschedule_new(B, T, A, U, V, W),
        rest_heads_retrieval_and_matching(B, C, A, V, X, R, Y, [], [], [], S, _),
        guard_body_copies3(K, T, Y, U, Z),
        gen_uncond_susps_detachments(X, B, A1),
        gen_cond_susp_detachment(F, L, I/J, B1),
        (   chr_pp_flag(debugable, on) ->
            K=rule(_,_,F1,G1),
            my_term_copy(F1-G1, Y, H1-I1),
            J1='chr debug_event'(try([L|L1],[],H1,I1)),
            K1='chr debug_event'(apply([L|L1],[],H1,I1)),
            instrument_goal(D1, J1, K1, C1)
        ;   C1=D1
        ),
        (   unconditional_occurrence(I/J, E),
            chr_pp_flag(late_allocation, on) ->
            D1=true
        ;   D1='!'
        ),
        E1=(O:-Q,W,C1,A1,B1,Z),
        G=[E1|H].
head_arg_matches(A, B, C, D, E) :-
        head_arg_matches(A, B, C, D, E, [], _).
head_arg_matches(A, B, C, D, E, F, G) :-
        head_arg_matches_(A, B, C, F, H, E, G),
        list2conj(H, D).
head_arg_matches_([], [], A, B, [], A, B).
head_arg_matches_([N-O|F], [G|H], A, B, C, D, E) :-
        (   var(N) ->
            (   lookup_eq(A, N, P) ->
                (   G=('+') ->
                    (   memberchk_eq(N, B) ->
                        C=[O=P|M],
                        L=B
                    ;   C=[O==P|M],
                        L=[N|B]
                    )
                ;   C=[O==P|M],
                    L=B
                ),
                K=A
            ;   K=[N-O|A],
                C=M,
                (   G=('+') ->
                    L=[N|B]
                ;   L=B
                )
            ),
            I=F,
            J=H
        ;   atomic(N) ->
            (   G=('+') ->
                C=[O=N|M]
            ;   C=[O==N|M]
            ),
            A=K,
            L=B,
            I=F,
            J=H
        ;   G==('+'),
            is_ground(B, N) ->
            copy_with_variable_replacement(N, Q, A),
            C=[O=Q|M],
            A=K,
            L=B,
            I=F,
            J=H
        ;   N=..[_|R],
            functor(N, S, T),
            functor(U, S, T),
            U=..[_|V],
            (   G=('+') ->
                C=[O=U|M]
            ;   C=[nonvar(O),O=U|M]
            ),
            pairup(R, V, W),
            append(W, F, I),
            replicate(T, G, X),
            append(X, H, J),
            K=A,
            L=B
        ),
        head_arg_matches_(I, J, K, L, M, D, E).
is_ground(A, B) :-
        (   ground(B) ->
            true
        ;   compound(B) ->
            B=..[_|C],
            maplist(is_ground(A), C)
        ;   memberchk_eq(B, A)
        ).
rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J) :-
        rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J, [], _).
rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J, K, L) :-
        (   A=[_|_] ->
            rest_heads_retrieval_and_matching_n(A, B, H, I, C, D, E, F, G, J, K, L)
        ;   D=[],
            E=[],
            F=G,
            K=L
        ).
rest_heads_retrieval_and_matching_n([], _, _, _, _, [], [], A, A, _, B, B).
rest_heads_retrieval_and_matching_n([H|I], [_|J], A, B, C, [K|L], [M|N], D, E, _, F, G) :-
        functor(H, O, P),
        head_info(H, P, Q, _, _, R),
        get_store_type(O/P, S),
        (   S==default ->
            passive_head_via(H, [C|A], D, Y, Z),
            create_get_mutable_ref(active, U, D1),
            get_constraint_mode(O/P, A1),
            head_arg_matches(R, A1, D, F1, B1, F, G1),
            W=R,
            sbag_member_call(M, Z, K1),
            V=(Y,K1,M=T,D1)
        ;   existential_lookup(S, H, [C|A], D, T, U, V, M, R, W),
            get_constraint_mode(O/P, A1),
            filter_mode(W, R, A1, E1),
            head_arg_matches(W, E1, D, F1, B1, F, G1)
        ),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(O/P,T),get_static_suspension_term_field(state,O/P,T,U),get_static_suspension_term_field(arguments,O/P,T,Q))),
        different_from_other_susps(H, M, A, B, X),
        append(W, B1, C1),
        translate(G1, C1, H1),
        translate(G1, B1, I1),
        inline_matching_goal(F1, J1, H1, I1),
        K=(V,X,J1),
        rest_heads_retrieval_and_matching_n(I, J, [H|A], [M|B], C, L, N, B1, E, _, G1, G).
inline_matching_goal(C==D, true, A, B) :-
        memberchk_eq(C, A),
        memberchk_eq(D, B),
        C=D, !.
inline_matching_goal(A=B, true, _, _) :-
        A=B, !.
inline_matching_goal((C,D), (E,F), A, B) :- !,
        inline_matching_goal(C, E, A, B),
        inline_matching_goal(D, F, A, B).
inline_matching_goal(A, A, _, _).
filter_mode([], _, _, []).
filter_mode([F-G|B], [_-H|C], [D|E], A) :-
        (   G==H ->
            A=[D|I],
            filter_mode(B, C, E, I)
        ;   filter_mode([F-G|B], C, E, A)
        ).
check_unique_keys([], _).
check_unique_keys([B|C], A) :-
        lookup_eq(A, B, _),
        check_unique_keys(C, A).
different_from_other_susps(A, B, C, D, E) :-
        different_from_other_susps_(C, D, A, B, F),
        list2conj(F, E).
different_from_other_susps_(_, [], _, _, []) :- !.
different_from_other_susps_([D|E], [F|G], A, B, C) :-
        (   functor(A, I, J),
            functor(D, I, J),
            copy_term_nat(D-A, K-L),
            \+ \+K=L ->
            C=[B\==F|H]
        ;   C=H
        ),
        different_from_other_susps_(E, G, A, B, H).
passive_head_via(A, B, C, D, E) :-
        functor(A, F, G),
        get_constraint_index(F/G, _),
        common_variables(A, B, H),
        translate(H, C, I),
        global_list_store_name(F/G, J),
        K=nb_getval(J,E),
        (   I==[] ->
            D=K
        ;   gen_get_mod_constraints(F/G, I, L, M, E),
            D=(L->M ; K)
        ).
common_variables(A, B, C) :-
        term_variables(A, D),
        term_variables(B, E),
        intersect_eq(D, E, C).
gen_get_mod_constraints(A, B, C, D, E) :-
        get_target_module(F),
        (   B=[I] ->
            C='chr newvia_1'(I,J)
        ;   B=[I,L] ->
            C='chr newvia_2'(I,L,J)
        ;   C='chr newvia'(B,J)
        ),
        D=(get_attr(J,F,K),G),
        get_max_constraint_index(H),
        (   H==1 ->
            G=true,
            E=K
        ;   G=(K=M),
            get_constraint_index(A, N),
            make_attr(H, _, O, M),
            nth1(N, O, E)
        ).
guard_body_copies(A, B, C, D, E, F, G) :-
        guard_body_copies2(A, B, C, D, E, H, G),
        list2conj(H, F).
guard_body_copies2(A, B, C, D, E, F, G) :-
        C=rule(H,_,I,J),
        conj2list(I, K),
        split_off_simple_guard(K, E, L, M),
        my_term_copy(L-M, E, N, O-P),
        append(O, [Q], F),
        term_variables(M, R),
        term_variables(P, S),
        ground_vars(H, T),
        list_difference_eq(R, T, _),
        (   chr_pp_flag(guard_locks, on),
            bagof('chr lock'(B1)-'chr unlock'(B1), A1^(lists:member(A1,R),pairlist:lookup_eq(E,A1,B1),memberchk_eq(B1,S)), Y) ->
            once(pairup(U,W,Y))
        ;   U=[],
            W=[]
        ),
        list2conj(U, V),
        list2conj(W, X),
        list2conj(P, Z),
        Q=(V,Z,X),
        my_term_copy(J, N, C1),
        replace_explicit_removes(A, B, C1, D, G).
split_off_simple_guard([], _, [], []).
split_off_simple_guard([D|E], A, B, C) :-
        (   simple_guard(D, A) ->
            B=[D|F],
            split_off_simple_guard(E, A, F, C)
        ;   B=[],
            C=[D|E]
        ).
simple_guard(A, B) :-
        binds_b(A, C),
        \+ (member(D,C),lookup_eq(B,D,_)).
gen_cond_susp_detachment(A, B, C, D) :-
        (   is_stored(C) ->
            (   (   A==[0]
                ;   get_allocation_occurrence(C, F),
                    get_max_occurrence(C, G),
                    G<F
                ),
                only_ground_indexed_arguments(C),
                chr_pp_flag(late_allocation, on) ->
                D=true
            ;   gen_uncond_susp_detachment(B, C, E),
                (   chr_pp_flag(late_allocation, on) ->
                    D=(var(B)->true ; E)
                ;   D=E
                )
            )
        ;   D=true
        ).
gen_uncond_susp_detachment(A, B, C) :-
        (   is_stored(B) ->
            (   \+only_ground_indexed_arguments(B) ->
                make_name(detach_, B, G),
                D=..[G,H,A]
            ;   D=true
            ),
            (   chr_pp_flag(debugable, on) ->
                E='chr debug_event'(remove(A))
            ;   E=true
            ),
            generate_delete_constraint_call(B, A, F),
            use_auxiliary_predicate(remove_constraint_internal, B),
            remove_constraint_goal(B, A, H, I, J),
            (   only_ground_indexed_arguments(B) ->
                C=(E,J,(I=yes->F,D ; true))
            ;   C=(E,J,(I==yes->F,D ; true))
            )
        ;   C=true
        ).
gen_uncond_susps_detachments([], [], true).
gen_uncond_susps_detachments([A|B], [C|D], (E,F)) :-
        functor(C, G, H),
        gen_uncond_susp_detachment(A, G/H, E),
        gen_uncond_susps_detachments(B, D, F).
simpagation_head1_code(A, B, C, D, H/I, E, F, G) :-
        D=pragma(J,ids(_,K),_,_,_),
        J=rule(_,L,M,N),
        head_info(A, I, _, O, P, Q),
        get_constraint_mode(H/I, R),
        head_arg_matches(Q, R, [], S, T, [], U),
        build_head(H, I, E, P, V),
        append(B, L, W),
        append(C, K, X),
        reorder_heads(_, A, W, X, Y, Z),
        guard_splitting(J, A1),
        guard_via_reschedule_new(Y, A1, A, B1, C1, D1),
        rest_heads_retrieval_and_matching(Y, Z, A, C1, E1, T, F1, [], [], [], U, _),
        split_by_ids(Z, E1, C, G1, H1),
        guard_body_copies3(J, A1, F1, B1, I1),
        gen_uncond_susps_detachments(G1, B, J1),
        gen_cond_susp_detachment(E, O, H/I, K1),
        (   chr_pp_flag(debugable, on) ->
            my_term_copy(M-N, F1, O1-P1),
            Q1='chr debug_event'(try([O|G1],H1,O1,P1)),
            R1='chr debug_event'(apply([O|G1],H1,O1,P1)),
            instrument_goal('!', Q1, R1, L1)
        ;   L1='!'
        ),
        M1=(J1,K1),
        (   I1=chrism_condition(S1,T1) ->
            writeln('oops-need to implement this'),
            S1=chrism_exp_check(U1,V1),
            _=(U1,(V1->M1,T1 ; fail))
        ;   true
        ),
        N1=(V:-S,D1,L1,J1,K1,I1),
        F=[N1|G].
split_by_ids([], [], _, [], []).
split_by_ids([D|E], [F|G], A, B, C) :-
        (   memberchk_eq(D, A) ->
            B=[F|H],
            C=I
        ;   B=H,
            C=[F|I]
        ),
        split_by_ids(E, G, A, H, I).
simpagation_head2_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,ids(L,M),_,_,K),
        J=rule(N,_,O,P),
        append(N, B, Q),
        append(L, C, R),
        reorder_heads(K, A, Q, R, [S|T], [U|V]),
        simpagation_head2_prelude(A, S, [T,O,P], E, F, G, H, W),
        extend_id(G, X),
        (   memberchk_eq(U, M) ->
            simpagation_universal_searches(T, V, M, [S,A], J, E, Z, Y, D1, X, A1, W, B1)
        ;   W=B1,
            X=A1,
            Z=T,
            Y=[S,A],
            D1=V
        ),
        universal_search_iterator_end(Y, Z, J, E, A1, B1, C1),
        simpagation_head2_new_worker(Y, Z, D1, D, E, F, A1, C1, I).
simpagation_universal_searches([], [], _, A, _, _, [], A, [], B, B, C, C).
simpagation_universal_searches(A, [M|N], B, C, D, E, F, G, H, I, J, K, L) :-
        A=[O|P],
        inc_id(I, Q),
        universal_search_iterator_end(C, A, D, E, I, K, R),
        universal_search_iterator(A, C, D, E, I, R, S),
        (   memberchk_eq(M, B) ->
            simpagation_universal_searches(P, N, B, [O|C], D, E, F, G, H, Q, J, S, L)
        ;   J=Q,
            S=L,
            F=P,
            G=[O|C],
            N=H
        ).
simpagation_head2_prelude(A, B, C, H/I, D, E, F, G) :-
        head_info(A, I, J, K, L, M),
        build_head(H, I, E, L, N),
        get_constraint_mode(H/I, O),
        head_arg_matches(M, O, [], P, Q),
        lookup_passive_head(B, [A], Q, R, S),
        gen_occ_allocation(H/I, D, J, K, L, T),
        extend_id(E, U),
        extra_active_delegate_variables(A, [B|C], Q, V),
        append([S|L], V, W),
        build_head(H, I, U, W, X),
        Y=(N:-P,R,'!',T,X),
        F=[Y|G].
extra_active_delegate_variables(A, B, C, D) :-
        A=..[_|E],
        delegate_variables(A, B, C, E, D).
passive_delegate_variables(A, B, C, D, E) :-
        term_variables(B, F),
        delegate_variables(A, C, D, F, E).
delegate_variables(A, B, C, D, E) :-
        term_variables(A, F),
        term_variables(B, G),
        intersect_eq(F, G, H),
        list_difference_eq(H, D, I),
        translate(I, C, E).
simpagation_head2_new_worker([H|I], A, B, C, J/K, D, E, F, G) :-
        C=pragma(L,ids(N,_),M,_,_),
        L=rule(_,_,O,P),
        get_prop_inner_loop_vars(I, [H,A,O,P], Q, R, S, T),
        gen_var(U),
        gen_var(V),
        functor(H, W, X),
        gen_vars(X, Y),
        head_info(H, X, Y, U, _, Z),
        get_constraint_mode(W/X, A1),
        head_arg_matches(Z, A1, R, B1, C1, [], _),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(W/X,E1),get_static_suspension_term_field(state,W/X,E1,F1),get_static_suspension_term_field(arguments,W/X,E1,Y))),
        different_from_other_susps(H, U, I, T, D1),
        create_get_mutable_ref(active, F1, G1),
        H1=(U=E1,G1,D1,B1),
        I1=[[U|V]|Q],
        build_head(J, K, E, I1, J1),
        guard_splitting(L, K1),
        guard_via_reschedule_new(A, K1, [H|I], L1, M1, N1),
        rest_heads_retrieval_and_matching(A, B, [H|I], M1, O1, C1, P1, [H|I], [U|T], []),
        split_by_ids(B, O1, N, Q1, R1),
        split_by_ids(B, A, N, S1, _),
        gen_uncond_susps_detachments([U|Q1], [H|S1], T1),
        U1=[V|Q],
        build_head(J, K, E, U1, V1),
        W1=[[]|Q],
        build_head(J, K, E, W1, X1),
        guard_body_copies3(L, K1, P1, L1, Y1),
        (   Y1\==true,
            is_observed(J/K, D) ->
            gen_uncond_attach_goal(J/K, S, Z1, A2),
            gen_state_cond_call(S, J/K, V1, A2, B2),
            gen_state_cond_call(S, J/K, X1, A2, C2)
        ;   Z1=true,
            B2=V1,
            C2=X1
        ),
        (   chr_pp_flag(debugable, on) ->
            my_term_copy(O-P, R, G2-H2),
            D2='chr debug_event'(try([U|Q1],[S|R1],G2,H2)),
            E2='chr debug_event'(apply([U|Q1],[S|R1],G2,H2))
        ;   D2=true,
            E2=true
        ),
        (   member(unique(_,I2), M),
            check_unique_keys(I2, R) ->
            F2=(J1:-H1->(N1,D2->E2,T1,Z1,Y1,C2 ; X1); V1)
        ;   F2=(J1:-H1,N1,D2->E2,T1,Z1,Y1,B2 ; V1)
        ),
        F=[F2|G].
gen_state_cond_call(A, B, C, D, E) :-
        (   may_trigger(B) ->
            delay_phase_end(validate_store_type_assumptions, (static_suspension_term(B,J),get_static_suspension_term_field(state,B,J,F),get_static_suspension_term_field(generation,B,J,I),get_static_suspension_term_field(arguments,B,J,K))),
            create_get_mutable_ref(D, I, H)
        ;   delay_phase_end(validate_store_type_assumptions, (static_suspension_term(B,J),get_static_suspension_term_field(state,B,J,F),get_static_suspension_term_field(arguments,B,J,K))),
            H=true
        ),
        create_get_mutable_ref(active, F, G),
        E=(A=J,G,H->'chr update_mutable'(inactive,F),C ; true).
propagation_code(A, B, C, D, E, F, G, H, I, J) :-
        (   B==[] ->
            propagation_single_headed(A, D, E, F, G, H, I, J)
        ;   propagation_multi_headed(A, B, C, D, E, F, G, H, I, J)
        ).
propagation_single_headed(A, B, C, H/I, D, E, F, G) :-
        head_info(A, I, J, K, L, M),
        build_head(H, I, E, L, N),
        inc_id(E, O),
        build_head(H, I, O, L, P),
        get_constraint_mode(H/I, Q),
        head_arg_matches(M, Q, [], R, S, [], _),
        get_occurrence(H/I, D, _, T),
        guard_body_copies([K], [T], B, C, S, U, V),
        gen_occ_allocation(H/I, D, J, K, L, W),
        X=P,
        (   V\==true,
            is_observed(H/I, D) ->
            gen_uncond_attach_goal(H/I, K, Y, B1),
            gen_state_cond_call(K, H/I, X, B1, Z)
        ;   Y=true,
            Z=X
        ),
        (   unconditional_occurrence(H/I, D),
            chr_pp_flag(late_allocation, on) ->
            A1=true
        ;   A1='!'
        ),
        (   chr_pp_flag(debugable, on) ->
            B=rule(_,_,G1,H1),
            my_term_copy(G1-H1, S, I1-J1),
            K1='chr debug_event'(try([],[K],I1,J1)),
            L1='chr debug_event'(apply([],[K],I1,J1)),
            instrument_goal(A1, K1, L1, C1)
        ;   C1=A1
        ),
        (   may_trigger(H/I),
            \+has_no_history(C) ->
            use_auxiliary_predicate(novel_production),
            use_auxiliary_predicate(extend_history),
            does_use_history(H/I),
            E1='$novel_production'(K,C),
            F1='$extend_history'(K,C)
        ;   E1=true,
            F1=true
        ),
        D1=(N:-R,W,E1,U,C1,F1,Y,V,Z),
        F=[D1|G].
propagation_multi_headed(A, B, C, D, E, F, G, H, I, J) :-
        B=[K|L],
        propagation_prelude(A, B, D, F, G, H, I, M),
        extend_id(H, N),
        propagation_nested_code(L, [K,A], C, D, E, F, G, N, M, J).
propagation_prelude(A, [G|H], B, I/J, C, D, E, F) :-
        head_info(A, J, K, L, M, N),
        build_head(I, J, D, M, O),
        get_constraint_mode(I/J, P),
        head_arg_matches(N, P, [], Q, R),
        B=rule(_,_,S,T),
        extra_active_delegate_variables(A, [G,H,S,T], R, U),
        lookup_passive_head(G, [A], R, V, W),
        gen_occ_allocation(I/J, C, K, L, M, X),
        extend_id(D, Y),
        append([W|M], U, Z),
        build_head(I, J, Y, Z, A1),
        B1=A1,
        C1=(O:-Q,V,'!',X,B1),
        E=[C1|F].
propagation_nested_code([], [I|J], A, B, C, D, E, F, G, H) :-
        universal_search_iterator_end([I|J], [], B, D, F, G, K),
        propagation_body(I, J, A, B, C, D, E, F, K, H).
propagation_nested_code([J|K], A, B, C, D, E, F, G, H, I) :-
        universal_search_iterator_end(A, [J|K], C, E, G, H, L),
        universal_search_iterator([J|K], A, C, E, G, L, M),
        inc_id(G, N),
        propagation_nested_code(K, [J|A], B, C, D, E, F, N, M, I).
check_fd_lookup_condition(_, _, _, _) :-
        fail.
propagation_body(A, B, C, D, E, J/K, F, G, H, I) :-
        D=rule(_,_,L,M),
        gen_var_susp_list_for_b(B, [A,L,M], N, O, P, Q, R),
        flatten(O, S),
        init(Q, T),
        last(Q, U),
        gen_var(V),
        gen_var(W),
        functor(A, X, Y),
        gen_vars(Y, Z),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(X/Y,C1),get_static_suspension_term_field(state,X/Y,C1,A1),get_static_suspension_term_field(arguments,X/Y,C1,Z))),
        create_get_mutable_ref(active, A1, B1),
        D1=(V=C1,B1),
        E1=[[V|W]|S],
        build_head(J, K, G, E1, F1),
        (   check_fd_lookup_condition(X, Y, A, B) ->
            universal_search_iterator_failure_vars(B, G, O, P, R, K1, G1),
            H1=K1
        ;   H1=[W|S],
            G1=G
        ),
        build_head(J, K, G1, H1, I1),
        J1=I1,
        A=..[_|L1],
        pairup(L1, Z, M1),
        get_constraint_mode(X/Y, N1),
        head_arg_matches(M1, N1, N, O1, P1),
        different_from_other_susps(A, V, B, T, Q1),
        get_occurrence(J/K, F, _, R1),
        reverse(C, S1),
        guard_body_copies([U,V|T], [R1|S1], D, E, P1, T1, U1),
        (   U1\==true,
            is_observed(J/K, F) ->
            gen_uncond_attach_goal(J/K, U, V1, X1),
            gen_state_cond_call(U, J/K, J1, X1, W1)
        ;   V1=true,
            W1=J1
        ),
        (   (   is_least_occurrence(E)
            ;   has_no_history(E)
            ) ->
            A2=true,
            B2=true
        ;   history_susps(C, [V|T], U, R1, Y1),
            C2=..[t,E|Y1],
            use_auxiliary_predicate(novel_production),
            use_auxiliary_predicate(extend_history),
            does_use_history(J/K),
            bagof('$novel_production'(I2,J2), (lists:member(I2,Y1),J2=L2), H2),
            list2conj(H2, K2),
            A2=(L2=C2,K2),
            B2='$extend_history'(U,L2)
        ),
        (   chr_pp_flag(debugable, on) ->
            D=rule(_,_,L,M),
            my_term_copy(L-M, P1, F2-G2),
            D2='chr debug_event'(try([],[U,V|T],F2,G2)),
            E2='chr debug_event'(apply([],[U,V|T],F2,G2))
        ;   D2=true,
            E2=true
        ),
        Z1=(F1:-D1,Q1,O1,A2,T1,D2->E2,B2,V1,U1,W1 ; J1),
        H=[Z1|I].
history_susps(A, B, C, D, E) :-
        reverse(B, F),
        pairup([D|A], [C|F], G),
        sort(G, H),
        pairup(_, E, H).
gen_var_susp_list_for([F], A, B, C, D, E) :- !,
        functor(F, G, H),
        head_info(F, H, _, E, D, I),
        get_constraint_mode(G/H, J),
        head_arg_matches(I, J, [], _, B),
        extra_active_delegate_variables(F, A, B, K),
        append(D, K, C).
gen_var_susp_list_for([F|G], A, B, C, D, E) :-
        gen_var_susp_list_for(G, [F|A], H, D, _, _),
        functor(F, I, J),
        gen_var(E),
        head_info(F, J, _, K, _, L),
        get_constraint_mode(I/J, M),
        head_arg_matches(L, M, H, _, B),
        passive_delegate_variables(F, G, A, B, N),
        append(N, [K,E|D], C).
gen_var_susp_list_for_b([D], A, B, [E], C, [F], []) :- !,
        functor(D, G, H),
        head_info(D, H, _, F, C, I),
        get_constraint_mode(G/H, J),
        head_arg_matches(I, J, [], _, B),
        extra_active_delegate_variables(D, A, B, K),
        append(C, K, E).
gen_var_susp_list_for_b([D|E], A, B, [F|G], C, [H|I], [J|K]) :-
        gen_var_susp_list_for_b(E, [D|A], L, G, C, I, K),
        functor(D, M, N),
        gen_var(J),
        head_info(D, N, _, H, _, O),
        get_constraint_mode(M/N, P),
        head_arg_matches(O, P, L, _, B),
        passive_delegate_variables(D, E, A, B, Q),
        append(Q, [H,J], F).
get_prop_inner_loop_vars([E], A, B, C, D, []) :- !,
        functor(E, F, G),
        head_info(E, G, _, D, H, I),
        get_constraint_mode(F/G, J),
        head_arg_matches(I, J, [], _, C),
        extra_active_delegate_variables(E, A, C, K),
        append(H, K, B).
get_prop_inner_loop_vars([E|F], A, B, C, D, [G|H]) :-
        get_prop_inner_loop_vars(F, [E|A], I, J, D, H),
        functor(E, K, L),
        gen_var(M),
        head_info(E, L, _, G, _, N),
        get_constraint_mode(K/L, O),
        head_arg_matches(N, O, J, _, C),
        passive_delegate_variables(E, F, A, C, P),
        append(P, [G,M|I], B).
reorder_heads(A, B, C, D, E, F) :-
        (   chr_pp_flag(reorder_heads, on),
            length(C, G),
            G=<6 ->
            reorder_heads_main(A, B, C, D, E, F)
        ;   E=C,
            F=D
        ).
reorder_heads_main(A, B, C, D, E, F) :-
        term_variables(B, G),
        H=entry([],[],G,C,D,A),
        copy_term_nat(H, I),
        a_star(I, K^(chr_translate:final_data(K)), L^M^N^(chr_translate:expand_data(L,M,N)), J),
        I=H,
        J=entry(O,P,_,_,_,_),
        reverse(O, E),
        reverse(P, F).
final_data(A) :-
        A=entry(_,_,_,_,[],_).
expand_data(A, B, C) :-
        A=entry(D,E,F,G,H,I),
        select2(J, K, G, H, L, M),
        term_variables([J|F], N),
        B=entry([J|D],[K|E],N,L,M,I),
        order_score(J, K, F, L, I, C).
order_score(A, B, C, D, E, F) :-
        functor(A, G, H),
        get_store_type(G/H, I),
        order_score(I, A, B, C, D, E, F).
order_score(default, A, _, B, C, _, D) :-
        term_variables(A, E),
        term_variables(C, F),
        order_score_vars(E, B, F, D).
order_score(multi_inthash(D), A, _, B, _, _, C) :-
        order_score_indexes(D, A, B, 0, C).
order_score(multi_hash(D), A, _, B, _, _, C) :-
        order_score_indexes(D, A, B, 0, C).
order_score(global_ground, A, _, B, C, _, D) :-
        term_variables(A, E),
        term_variables(C, F),
        order_score_vars(E, B, F, G),
        D is G*2.
order_score(global_singleton, _, _, _, _, _, A) :-
        A=1.
order_score(multi_store(G), A, B, C, D, E, F) :-
        find_with_var_identity(H, t(A,C,D), (lists:member(J,G),chr_translate:order_score(J,A,B,C,D,E,H)), I),
        min_list(I, F).
order_score_indexes([], _, _, A, B) :-
        A>0,
        B=100.
order_score_indexes([E|F], A, B, C, D) :-
        multi_hash_key_args(E, A, G),
        (   forall(I, G, memberchk_eq(I,B)) ->
            H is C+1
        ;   H=C
        ),
        order_score_indexes(F, A, B, H, D).
order_score_vars(A, B, C, D) :-
        order_score_count_vars(A, B, C, F-G-E),
        (   F-G-E==0-0-0 ->
            D=0
        ;   F>0 ->
            D is max(10-F,0)
        ;   G>0 ->
            D is max(10-G,1)*10
        ;   D is max(10-E,1)*100
        ).
order_score_count_vars([], _, _, 0-0-0).
order_score_count_vars([C|D], A, B, F-G-E) :-
        order_score_count_vars(D, A, B, I-J-H),
        (   memberchk_eq(C, A) ->
            F is I+1,
            G=J,
            E=H
        ;   memberchk_eq(C, B) ->
            G is J+1,
            F=I,
            E=H
        ;   E is H+1,
            F=I,
            G=J
        ).
create_get_mutable_ref(A, B, C) :-
        C=(B=mutable(A)).
gen_var(_).
gen_vars(A, B) :-
        length(B, A).
head_info(A, B, C, D, E, F) :-
        vars_susp(B, C, D, E),
        A=..[_|G],
        pairup(G, C, F).
inc_id([B|C], [A|C]) :-
        A is B+1.
dec_id([B|C], [A|C]) :-
        A is B-1.
extend_id(A, [0|A]).
next_id([_,C|B], [A|B]) :-
        A is C+1.
build_head(A, B, C, D, E) :-
        buildName(A, B, C, F),
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(A/B),
                has_active_occurrence(A/B),
                (   may_trigger(A/B)
                ;   get_allocation_occurrence(A/B, H),
                    get_max_occurrence(A/B, I),
                    I>=H
                )
            ) ->
            E=..[F|D]
        ;   init(D, G),
            E=..[F|G]
        ).
buildName(A, B, C, D) :-
        (   (   chr_pp_flag(debugable, on)
            ;   once((is_stored(A/B),(has_active_occurrence(A/B); chr_pp_flag(late_allocation,off)),(may_trigger(A/B); get_allocation_occurrence(A/B,G),get_max_occurrence(A/B,H),H>=G); C\=[0]))
            ) ->
            atom_concat(A, '/', E),
            atomic_concat(E, B, F),
            buildName_(C, F, D)
        ;   D=A
        ).
buildName_([], A, A).
buildName_([C|D], A, B) :-
        buildName_(D, A, E),
        atom_concat(E, '__', F),
        atomic_concat(F, C, B).
vars_susp(A, B, C, D) :-
        length(B, A),
        append(B, [C], D).
make_attr(A, B, C, D) :-
        length(C, A),
        D=..[v,B|C].
or_pattern(A, B) :-
        C is A-1,
        B is 1<<C.
and_pattern(A, B) :-
        C is A-1,
        D is 1<<C,
        B is-1*(D+1).
make_name(A, C/D, B) :-
        atom_concat_list([A,C,'/',D], B).
lookup_passive_head(A, B, C, D, E) :-
        functor(A, F, G),
        get_store_type(F/G, H),
        lookup_passive_head(H, A, B, C, D, E).
lookup_passive_head(default, A, B, C, D, E) :-
        functor(A, _, _),
        passive_head_via(A, B, C, D, E).
lookup_passive_head(multi_inthash(E), A, _, B, C, D) :-
        once((member(F,E),multi_hash_key_args(F,A,J),(translate(J,B,K); ground(J),K=J))),
        (   K=[G] ->
            true
        ;   G=..[k|K]
        ),
        functor(A, H, I),
        multi_hash_via_lookup_name(H/I, F, L),
        C=..[L,G,D],
        update_store_type(H/I, multi_inthash([F])).
lookup_passive_head(multi_hash(E), A, _, B, C, D) :-
        once((member(F,E),multi_hash_key_args(F,A,J),(translate(J,B,K); ground(J),K=J))),
        (   K=[G] ->
            true
        ;   G=..[k|K]
        ),
        functor(A, H, I),
        multi_hash_via_lookup_name(H/I, F, L),
        C=..[L,G,D],
        update_store_type(H/I, multi_hash([F])).
lookup_passive_head(global_ground, A, _, _, B, C) :-
        functor(A, D, E),
        global_ground_store_name(D/E, F),
        make_get_store_goal(F, C, B),
        update_store_type(D/E, global_ground).
lookup_passive_head(global_singleton, A, _, _, B, C) :-
        functor(A, D, E),
        global_singleton_store_name(D/E, F),
        make_get_store_goal(F, G, H),
        B=(H,G\==[],C=[G]),
        update_store_type(D/E, global_singleton).
lookup_passive_head(multi_store(F), A, B, C, D, E) :-
        once((member(G,F),lookup_passive_head(G,A,B,C,D,E))).
existential_lookup(global_singleton, A, _, _, B, _, C, D, E, E) :- !,
        functor(A, F, G),
        global_singleton_store_name(F/G, H),
        make_get_store_goal(H, D, I),
        C=(I,D\==[],D=B),
        update_store_type(F/G, global_singleton).
existential_lookup(multi_store(J), A, B, C, D, E, F, G, H, I) :- !,
        once((member(K,J),existential_lookup(K,A,B,C,D,E,F,G,H,I))).
existential_lookup(multi_inthash(I), A, _, B, C, D, E, F, G, H) :- !,
        once((member(J,I),multi_hash_key_args(J,A,N),(translate(N,B,O); ground(N),O=N))),
        (   O=[K] ->
            true
        ;   K=..[k|O]
        ),
        functor(A, L, M),
        multi_hash_via_lookup_name(L/M, J, P),
        Q=..[P,K,S],
        create_get_mutable_ref(active, D, R),
        sbag_member_call(F, S, T),
        E=(Q,T,F=C,R),
        hash_index_filter(G, J, H),
        update_store_type(L/M, multi_inthash([J])).
existential_lookup(multi_hash(I), A, _, B, C, D, E, F, G, H) :- !,
        once((member(J,I),multi_hash_key_args(J,A,N),(translate(N,B,O); ground(N),O=N))),
        (   O=[K] ->
            true
        ;   K=..[k|O]
        ),
        functor(A, L, M),
        multi_hash_via_lookup_name(L/M, J, P),
        Q=..[P,K,R],
        sbag_member_call(F, R, S),
        create_get_mutable_ref(active, D, T),
        E=(Q,S,F=C,T),
        hash_index_filter(G, J, H),
        update_store_type(L/M, multi_hash([J])).
existential_lookup(A, B, C, D, E, F, G, H, I, I) :-
        lookup_passive_head(A, B, C, D, J, K),
        sbag_member_call(H, K, L),
        create_get_mutable_ref(active, F, M),
        G=(J,L,H=E,M).
hash_index_filter(A, B, C) :-
        (   integer(B) ->
            D=[B]
        ;   D=B
        ),
        hash_index_filter(A, D, 1, C).
hash_index_filter([], _, _, []).
hash_index_filter([D|E], A, B, C) :-
        (   A=[F|G] ->
            H is B+1,
            (   F>B ->
                C=[D|I],
                hash_index_filter(E, [F|G], H, I)
            ;   F==B ->
                C=I,
                hash_index_filter(E, G, H, I)
            )
        ;   C=[D|E]
        ).
assume_constraint_stores([]).
assume_constraint_stores([A|B]) :-
        (   only_ground_indexed_arguments(A),
            is_stored(A),
            get_store_type(A, default) ->
            get_indexed_arguments(A, C),
            length(C, D),
            (   D>10 ->
                findall([F], member(F,C), E)
            ;   findall(F, (sublist(F,C),F\==[]), G),
                predsort(longer_list, G, E)
            ),
            (   get_functional_dependency(A, 1, H, I),
                all_distinct_var_args(H),
                I==[] ->
                assumed_store_type(A, global_singleton)
            ;   get_constraint_type(A, J),
                findall(F, (member(F,E),F=[M],nth(M,J,dense_int)), K),
                K\==[] ->
                list_difference_eq(E, K, L),
                (   L\==[] ->
                    assumed_store_type(A, multi_store([multi_inthash(K),multi_hash(L),global_ground]))
                ;   assumed_store_type(A, multi_store([multi_inthash(K),global_ground]))
                )
            ;   assumed_store_type(A, multi_store([multi_hash(E),global_ground]))
            )
        ;   true
        ),
        assume_constraint_stores(B).
longer_list(A, B, C) :-
        length(B, D),
        length(C, E),
        compare(F, E, D),
        (   F== = ->
            compare(A, B, C)
        ;   A=F
        ).
all_distinct_var_args(A) :-
        A=..[_|B],
        copy_term_nat(B, C),
        all_distinct_var_args_(C).
all_distinct_var_args_([]).
all_distinct_var_args_([A|B]) :-
        var(A),
        A=t,
        all_distinct_var_args_(B).
get_indexed_arguments(A, B) :-
        A=_/C,
        get_indexed_arguments(1, C, A, B).
get_indexed_arguments(A, B, C, D) :-
        (   A>B ->
            D=[]
        ;   (   is_indexed_argument(C, A) ->
                D=[A|E]
            ;   D=E
            ),
            F is A+1,
            get_indexed_arguments(F, B, C, E)
        ).
validate_store_type_assumptions([]).
validate_store_type_assumptions([A|B]) :-
        validate_store_type_assumption(A),
        validate_store_type_assumptions(B).
universal_search_iterator_end([F|G], A, B, H/I, C, D, E) :-
        B=rule(J,_,K,L),
        (   J==[],
            functor(F, R, S),
            check_fd_lookup_condition(R, S, F, G) ->
            D=E
        ;   gen_var_susp_list_for_b(G, [F,A,K,L], _, M, N, _, O),
            universal_search_iterator_failure_vars(G, C, M, N, O, P, Q),
            flatten(M, T),
            U=[[]|T],
            build_head(H, I, C, U, V),
            build_head(H, I, Q, P, W),
            X=(V:-W),
            D=[X|E]
        ).
universal_search_iterator_failure_vars(A, B, C, D, E, F, G) :-
        (   B=[0|_] ->
            next_id(B, G),
            F=D
        ;   C=[_|H],
            dec_id(B, I),
            (   A=[M|J],
                functor(M, N, O),
                check_fd_lookup_condition(N, O, M, J) ->
                E=[_|K],
                universal_search_iterator_failure_vars(J, I, H, D, K, F, G)
            ;   G=I,
                flatten(H, L),
                E=[P|_],
                F=[P|L]
            )
        ).
universal_search_iterator([E|F], [G|H], A, I/J, B, C, D) :-
        A=rule(_,_,K,L),
        gen_var_susp_list_for_b(H, [G,E,F,K,L], M, N, O, P, Q),
        init(P, R),
        flatten(N, S),
        gen_var(T),
        functor(G, U, V),
        gen_vars(V, W),
        head_info(G, V, W, X, _, Y),
        get_constraint_mode(U/V, Z),
        head_arg_matches(Y, Z, M, A1, B1),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(U/V,D1),get_static_suspension_term_field(state,U/V,D1,E1),get_static_suspension_term_field(arguments,U/V,D1,W))),
        different_from_other_susps(G, X, H, R, C1),
        create_get_mutable_ref(active, E1, F1),
        G1=(X=D1,F1,C1,A1),
        lookup_passive_head(E, [G|H], B1, H1, I1),
        inc_id(B, J1),
        K1=[[X|T]|S],
        build_head(I, J, B, K1, L1),
        passive_delegate_variables(G, H, [E,F,K,L], B1, M1),
        append([I1|M1], [X,T|S], N1),
        build_head(I, J, J1, N1, O1),
        (   check_fd_lookup_condition(U, V, G, H) ->
            universal_search_iterator_failure_vars(H, B, N, O, Q, T1, P1),
            Q1=T1
        ;   Q1=[T|S],
            P1=B
        ),
        build_head(I, J, P1, Q1, R1),
        S1=(L1:-G1,H1->O1 ; R1),
        C=[S1|D].
ai_observation_analysis(A) :-
        (   chr_pp_flag(ai_observation_analysis, on),
            get_target_module(B),
            B\==chr_translate ->
            list_to_ord_set(A, _),
            abstract_constraints(A),
            ai_observation_schedule_initial_calls(A),
            ai_observation_gather_results
        ;   true
        ).
ai_observation_schedule_initial_calls([]).
ai_observation_schedule_initial_calls([A|B]) :-
        ai_observation_schedule_initial_call(A),
        ai_observation_schedule_initial_calls(B).
ai_observation_schedule_initial_call(A) :-
        ai_observation_top(A, B),
        initial_call_pattern(B).
ai_observation_schedule_new_calls([], _).
ai_observation_schedule_new_calls([B|C], A) :-
        A=odom(_,D),
        initial_call_pattern(odom(B,D)),
        ai_observation_schedule_new_calls(C, A).
ai_observation_lub(odom(D,A), odom(D,B), odom(D,C)) :-
        ord_intersection(A, B, C).
ai_observation_top(A, odom(A,B)) :-
        ord_empty(B).
ai_observation_leq(odom(C,B), odom(C,A)) :-
        ord_subset(A, B).
ai_observation_observe_list(odom(B,C), A, odom(B,D)) :-
        list_to_ord_set(A, E),
        ord_subtract(C, E, D).
ai_observation_abstract_constraint(A, B, C) :-
        functor(A, D, E),
        C=D/E,
        member(C, B).
ai_observation_abstract_constraints(A, B, C) :-
        findall(D, (member(E,A),ai_observation_abstract_constraint(E,B,D)), C).
ai_observation_abstract_goal_(A, B, C, D, E, F) :-
        term_variables((A,B,C), G),
        append(A, B, H),
        ground_vars(H, I),
        list_difference_eq(G, I, J),
        ai_observation_abstract_goal(D, E, F, [], J), !.
ground_vars([], []).
ground_vars([B|C], A) :-
        functor(B, D, E),
        get_constraint_mode(D/E, F),
        head_info(B, E, _, _, _, G),
        head_arg_matches(G, F, [], _, _, [], H),
        ground_vars(C, I),
        append(H, I, A).
ai_observation_abstract_goal((E,F), A, B, C, D) :- !,
        ai_observation_abstract_goal(E, A, B, G, D),
        ai_observation_abstract_goal(F, A, G, C, D).
ai_observation_abstract_goal((E ; F), A, B, C, D) :- !,
        ai_observation_abstract_goal(E, A, B, G, D),
        ai_observation_abstract_goal(F, A, G, C, D).
ai_observation_abstract_goal((E->F), A, B, C, D) :- !,
        ai_observation_abstract_goal(E, A, B, G, D),
        ai_observation_abstract_goal(F, A, G, C, D).
ai_observation_abstract_goal(A, B, [D|C], C, _) :-
        ai_observation_abstract_constraint(A, B, D), !.
ai_observation_abstract_goal(true, _, A, A, _) :- !.
ai_observation_abstract_goal(writeln(_), _, A, A, _) :- !.
ai_observation_abstract_goal(A, _, B, B, C) :-
        binds_b(A, D),
        intersect_eq(D, C, []), !.
ai_observation_abstract_goal(_, _, [B|A], A, _) :-
        B=builtin.
ai_observation_is_observed(odom(_,B), A) :-
        \+ord_memberchk(A,B).
unconditional_occurrence(A, B) :-
        get_occurrence(A, B, C, _),
        get_rule(C, D),
        D=pragma(E,_,_,_,_),
        copy_term_nat(E, F),
        F=rule(G,H,I,_),
        guard_entailment:entails_guard([chr_pp_headvariables(G,H)],I),
        once((G=[J],H==[] ; H=[J],G==[],\+may_trigger(A))),
        functor(J, _, _),
        J=..[_|K],
        unconditional_occurrence_args(K).
unconditional_occurrence_args([]).
unconditional_occurrence_args([A|B]) :-
        var(A),
        A=x,
        unconditional_occurrence_args(B).
generate_show_constraint(A, B, C, D) :-
        (   chr_pp_flag(show, on) ->
            B=['$show'/0|A],
            generate_show_rules(A, D, [E|C]),
            inc_rule_count(F),
            E=pragma(rule(['$show'],[],true,true),ids([0],[]),[],no,F)
        ;   B=A,
            D=C
        ).
generate_show_rules([], A, A).
generate_show_rules([F/G|B], [C|D], A) :-
        functor(E, F, G),
        inc_rule_count(H),
        C=pragma(rule([],['$show',E],true,writeln(E)),ids([],[0,1]),[passive(1)],no,H),
        generate_show_rules(B, D, A).
static_suspension_term(B/C, A) :-
        suspension_term_base(B/C, D),
        E is D+C,
        functor(A, suspension, E).
suspension_term_base(A, B) :-
        suspension_term_base_fields(A, C),
        length(C, B).
suspension_term_base_fields(A, B) :-
        B=[id,state|C],
        (   chr_pp_flag(debugable, on) ->
            C=[history,generation,continuation,functor]
        ;   C=[history|D],
            (   only_ground_indexed_arguments(A) ->
                get_store_type(A, E),
                basic_store_types(E, F),
                (   memberchk(global_ground, F) ->
                    D=[global_list_prev]
                ;   D=[]
                )
            ;   may_trigger(A) ->
                D=[generation,continuation,global_list_prev]
            ;   D=[global_list_prev]
            )
        ).
get_static_suspension_term_field(A, B, C, D) :-
        suspension_term_base_fields(B, E),
        nth(F, E, A), !,
        arg(F, C, D).
get_static_suspension_term_field(arguments, A, B, C) :- !,
        suspension_term_base(A, D),
        B=..[_|E],
        drop(D, E, C).
get_static_suspension_term_field(A, B, _, _) :-
        chr_error(internal, 'Trying to obtain field ~w of ~w, wich does not have it!', [A,B]).
get_dynamic_suspension_term_field(A, B, C, D, E) :-
        suspension_term_base_fields(B, F),
        nth(G, F, A), !,
        E=arg(G,C,D).
get_dynamic_suspension_term_field(arguments, A, B, C, D) :- !,
        static_suspension_term(A, E),
        get_static_suspension_term_field(arguments, A, E, C),
        D=(B=E).
get_dynamic_suspension_term_field(argument(E), A, B, C, D) :- !,
        suspension_term_base(A, F),
        G is E+F,
        D=arg(G,B,C).
get_dynamic_suspension_term_field(A, B, _, _, _) :-
        chr_error(internal, 'Dynamic goal to get ~w of ~w, which does not have this field!', [A,B]).
set_dynamic_suspension_term_field(A, B, C, D, E) :-
        suspension_term_base_fields(B, F),
        nth(G, F, A), !,
        E=setarg(G,C,D).
set_dynamic_suspension_term_field(A, B, _, _, _) :-
        chr_error(internal, 'Dynamic goal to set ~w of ~w, which does not have this field!', [A,B]).
basic_store_types(multi_store(A), A) :- !.
basic_store_types(A, [A]).
'attach_head_name/4'([], _).
'attach_head_name/4'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\1=:=1 ->
                put_attr(A, chr_translate, v(E,[D|F],G,H,I,J))
            ;   K is E\/1,
                put_attr(A, chr_translate, v(K,[D],G,H,I,J))
            )
        ;   put_attr(A, chr_translate, v(1,[D],[D],[D],[D],[D]))
        ),
        'attach_head_name/4'(B, D).
'detach_head_name/4'([], _).
'detach_head_name/4'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\1=:=1 ->
                'chr sbag_del_element'(F, D, K),
                (   K==[] ->
                    L is E/\ -2,
                    (   L==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(L,[],G,H,I,J))
                    )
                ;   put_attr(A, chr_translate, v(E,K,G,H,I,J))
                )
            ;   true
            )
        ;   true
        ),
        'detach_head_name/4'(B, D).
'attach_prolog_global_variable/1'([], _).
'attach_prolog_global_variable/1'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\2=:=2 ->
                put_attr(A, chr_translate, v(E,F,[D|G],H,I,J))
            ;   K is E\/2,
                put_attr(A, chr_translate, v(K,F,[D],H,I,J))
            )
        ;   put_attr(A, chr_translate, v(2,[D],[D],[D],[D],[D]))
        ),
        'attach_prolog_global_variable/1'(B, D).
'detach_prolog_global_variable/1'([], _).
'detach_prolog_global_variable/1'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\2=:=2 ->
                'chr sbag_del_element'(G, D, K),
                (   K==[] ->
                    L is E/\ -3,
                    (   L==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(L,F,[],H,I,J))
                    )
                ;   put_attr(A, chr_translate, v(E,F,K,H,I,J))
                )
            ;   true
            )
        ;   true
        ),
        'detach_prolog_global_variable/1'(B, D).
'attach_type_definition/2'([], _).
'attach_type_definition/2'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\4=:=4 ->
                put_attr(A, chr_translate, v(E,F,G,[D|H],I,J))
            ;   K is E\/4,
                put_attr(A, chr_translate, v(K,F,G,[D],I,J))
            )
        ;   put_attr(A, chr_translate, v(4,[D],[D],[D],[D],[D]))
        ),
        'attach_type_definition/2'(B, D).
'detach_type_definition/2'([], _).
'detach_type_definition/2'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\4=:=4 ->
                'chr sbag_del_element'(H, D, K),
                (   K==[] ->
                    L is E/\ -5,
                    (   L==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(L,F,G,[],I,J))
                    )
                ;   put_attr(A, chr_translate, v(E,F,G,K,I,J))
                )
            ;   true
            )
        ;   true
        ),
        'detach_type_definition/2'(B, D).
'attach_type_alias/2'([], _).
'attach_type_alias/2'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\8=:=8 ->
                put_attr(A, chr_translate, v(E,F,G,H,[D|I],J))
            ;   K is E\/8,
                put_attr(A, chr_translate, v(K,F,G,H,[D],J))
            )
        ;   put_attr(A, chr_translate, v(8,[D],[D],[D],[D],[D]))
        ),
        'attach_type_alias/2'(B, D).
'detach_type_alias/2'([], _).
'detach_type_alias/2'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\8=:=8 ->
                'chr sbag_del_element'(I, D, K),
                (   K==[] ->
                    L is E/\ -9,
                    (   L==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(L,F,G,H,[],J))
                    )
                ;   put_attr(A, chr_translate, v(E,F,G,H,K,J))
                )
            ;   true
            )
        ;   true
        ),
        'detach_type_alias/2'(B, D).
'attach_does_use_history/1'([], _).
'attach_does_use_history/1'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\16=:=16 ->
                put_attr(A, chr_translate, v(E,F,G,H,I,[D|J]))
            ;   K is E\/16,
                put_attr(A, chr_translate, v(K,F,G,H,I,[D]))
            )
        ;   put_attr(A, chr_translate, v(16,[D],[D],[D],[D],[D]))
        ),
        'attach_does_use_history/1'(B, D).
'detach_does_use_history/1'([], _).
'detach_does_use_history/1'([A|B], D) :-
        (   get_attr(A, chr_translate, C) ->
            C=v(E,F,G,H,I,J),
            (   E/\16=:=16 ->
                'chr sbag_del_element'(J, D, K),
                (   K==[] ->
                    L is E/\ -17,
                    (   L==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(L,F,G,H,I,[]))
                    )
                ;   put_attr(A, chr_translate, v(E,F,G,H,I,K))
                )
            ;   true
            )
        ;   true
        ),
        'detach_does_use_history/1'(B, D).
'$chr_translate__indexed_variables'(B, A) :-
        B=target_module(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=indexed_argument(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=constraint_mode(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=none_suspended_on_variables,
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=store_type(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=actual_store_types(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=assumed_store_type(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=rule_count(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=passive(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=occurrence(_,_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=max_occurrence(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=allocation_occurrence(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=rule(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=least_occurrence(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=constraint_index(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=max_constraint_index(_),
        A=[].
'$chr_translate__indexed_variables'(E, D) :-
        E=head_name(A,_,_,B),
        term_variables(A, D, C),
        term_variables(B, C).
'$chr_translate__indexed_variables'(B, A) :-
        B=no_history(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=indexing_spec(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=observes(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=spawns_observer(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=observes_indirectly(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=module_initializer(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=prolog_global_variable(_),
        term_variables(B, A).
'$chr_translate__indexed_variables'(B, A) :-
        B=prev_guard_list(_,_,_,_,_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=set_all_passive(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=multiple_occ_constraints_checked(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=type_definition(_,_),
        term_variables(B, A).
'$chr_translate__indexed_variables'(B, A) :-
        B=type_alias(_,_),
        term_variables(B, A).
'$chr_translate__indexed_variables'(B, A) :-
        B=constraint_type(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=add_type_information(_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=stored(_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=stored_complete(_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=check_all_passive(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=constraints_code1(_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=use_auxiliary_predicate(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=use_auxiliary_predicate(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=functional_dependency(_,_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=initial_call_pattern(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=call_pattern(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=final_answer_pattern(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=abstract_constraints(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=depends_on(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=depends_on_ap(_,_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=depends_on_goal(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_observed_internal(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_observed(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_not_observed_internal(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_not_observed(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=depends_on_as(_,_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_observation_gather_results,
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=phase_end(_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=delay_phase_end(_,_),
        A=[].
'$chr_translate__indexed_variables'(B, A) :-
        B=does_use_history(_),
        term_variables(B, A).
attach_increment([], _).
attach_increment([M|N], v(F,A,B,C,D,E)) :-
        'chr not_locked'(M),
        (   get_attr(M, chr_translate, Z) ->
            Z=v(L,G,H,I,J,K),
            sort(G, W),
            'chr merge_attributes'(A, W, X),
            sort(H, U),
            'chr merge_attributes'(B, U, V),
            sort(I, S),
            'chr merge_attributes'(C, S, T),
            sort(J, Q),
            'chr merge_attributes'(D, Q, R),
            sort(K, O),
            'chr merge_attributes'(E, O, P),
            Y is F\/L,
            put_attr(M, chr_translate, v(Y,X,V,T,R,P))
        ;   put_attr(M, chr_translate, v(F,A,B,C,D,E))
        ),
        attach_increment(N, v(F,A,B,C,D,E)).
attr_unify_hook(v(F,A,B,C,D,E), C1) :-
        sort(A, Q),
        sort(B, P),
        sort(C, O),
        sort(D, N),
        sort(E, M),
        (   var(C1) ->
            (   get_attr(C1, chr_translate, D1) ->
                D1=v(L,G,H,I,J,K),
                sort(G, Z),
                'chr merge_attributes'(Q, Z, A1),
                sort(H, X),
                'chr merge_attributes'(P, X, Y),
                sort(I, V),
                'chr merge_attributes'(O, V, W),
                sort(J, T),
                'chr merge_attributes'(N, T, U),
                sort(K, R),
                'chr merge_attributes'(M, R, S),
                B1 is F\/L,
                put_attr(C1, chr_translate, v(B1,A1,Y,W,U,S)),
                'chr run_suspensions_loop'([A1,Y,W,U,S])
            ;   put_attr(C1, chr_translate, v(F,Q,P,O,N,M)),
                'chr run_suspensions_loop'([Q,P,O,N,M])
            )
        ;   (   compound(C1) ->
                term_variables(C1, E1),
                attach_increment(E1, v(F,Q,P,O,N,M))
            ;   true
            ),
            'chr run_suspensions_loop'([Q,P,O,N,M])
        ).
'$chr_translate__remove_constraint_internal'(A, B, C) :-
        arg(2, A, D),
        'chr get_mutable'(E, D),
        'chr update_mutable'(removed, D),
        (   compound(E) ->
            B=[],
            C=no
        ;   E==removed ->
            B=[],
            C=no
        ;   C=yes,
            '$chr_translate__chr_indexed_variables'(A, B)
        ).
'$chr_translate__activate_constraint'(A, B, C, D) :-
        arg(2, C, E),
        'chr get_mutable'(F, E),
        'chr update_mutable'(active, E),
        (   nonvar(D) ->
            true
        ;   arg(4, C, G),
            'chr get_mutable'(H, G),
            D is H+1,
            'chr update_mutable'(D, G)
        ),
        (   compound(F) ->
            term_variables(F, B),
            'chr none_locked'(B),
            A=yes
        ;   F==removed ->
            '$chr_translate__chr_indexed_variables'(C, B),
            A=yes
        ;   B=[],
            A=no
        ).
'$chr_translate__allocate_constraint'(A, B, C, D) :-
        B=..[suspension,F,G,A,H,I,C|D],
        'chr create_mutable'(0, H),
        'chr empty_history'(J),
        'chr create_mutable'(J, I),
        '$chr_translate__chr_indexed_variables'(B, E),
        'chr create_mutable'(passive(E), G),
        'chr gen_id'(F).
'$chr_translate__chr_indexed_variables'(C, B) :-
        C=..[_,_,_,_,_,_,A|_],
        '$chr_translate__indexed_variables'(A, B).
'$chr_translate__insert_constraint_internal'(yes, A, B, C, D, E) :-
        B=..[suspension,F,G,C,H,I,D|E],
        '$chr_translate__chr_indexed_variables'(B, A),
        'chr none_locked'(A),
        'chr create_mutable'(active, G),
        'chr create_mutable'(0, H),
        'chr empty_history'(J),
        'chr create_mutable'(J, I),
        'chr gen_id'(F).
'$insert_in_store_target_module/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
        b_setval('$chr_store_global_ground_chr_translate:target_module/1', [A|B]).
'$delete_from_store_target_module/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:target_module/1', C).
'$insert_in_store_indexed_argument/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_indexed_argument/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_constraint_mode/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', D),
        b_setval('$chr_store_global_ground_chr_translate:constraint_mode/2', [A|D]),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_constraint_mode/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:constraint_mode/2', E),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_none_suspended_on_variables/0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', B),
        b_setval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', [A|B]).
'$delete_from_store_none_suspended_on_variables/0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', C).
'$insert_in_store_store_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_store_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_actual_store_types/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_actual_store_types/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_assumed_store_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_assumed_store_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_rule_count/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', B),
        b_setval('$chr_store_global_ground_chr_translate:rule_count/1', [A|B]).
'$delete_from_store_rule_count/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:rule_count/1', C).
'$insert_in_store_passive/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_passive/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_occurrence/4'(A) :-
        arg(9, A, M),
        arg(10, A, N),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', O),
        insert_ht(O, k(M,N), A),
        true,
        arg(7, A, K),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', L),
        insert_ht(L, K, A),
        true,
        arg(8, A, I),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', J),
        insert_ht(J, I, A),
        true,
        arg(9, A, G),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', H),
        insert_ht(H, G, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        arg(9, A, D),
        arg(10, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', F),
        insert_ht(F, k(B,C,D,E), A),
        true.
'$delete_from_store_occurrence/4'(A) :-
        arg(9, A, M),
        arg(10, A, N),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', O),
        delete_ht(O, k(M,N), A),
        true,
        arg(7, A, K),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', L),
        delete_ht(L, K, A),
        true,
        arg(8, A, I),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', J),
        delete_ht(J, I, A),
        true,
        arg(9, A, G),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', H),
        delete_ht(H, G, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        arg(9, A, D),
        arg(10, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', F),
        delete_ht(F, k(B,C,D,E), A),
        true.
'$insert_in_store_max_occurrence/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_max_occurrence/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_allocation_occurrence/2'(A) :-
        arg(7, A, F),
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', G),
        insert_ht(G, F, A),
        true,
        arg(7, A, C),
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', E),
        insert_ht(E, k(C,D), A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', B),
        b_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', [A|B]).
'$delete_from_store_allocation_occurrence/2'(A) :-
        arg(7, A, G),
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', H),
        delete_ht(H, G, A),
        true,
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', F),
        delete_ht(F, k(D,E), A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', C).
'$insert_in_store_rule/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule/2', D),
        b_setval('$chr_store_global_ground_chr_translate:rule/2', [A|D]),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_rule/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:rule/2', E),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_least_occurrence/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', D),
        b_setval('$chr_store_global_ground_chr_translate:least_occurrence/2', [A|D]),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_least_occurrence/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:least_occurrence/2', E),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_constraint_index/2'(A) :-
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-2', E),
        insert_ht(E, D, A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_constraint_index/2'(A) :-
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-2', E),
        delete_ht(E, D, A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_max_constraint_index/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
        b_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1', [A|B]).
'$delete_from_store_max_constraint_index/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1', C).
'$insert_in_store_head_name/4'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\1=:=1 ->
                put_attr(I, chr_translate, v(G,[A|B],C,D,E,F))
            ;   H is G\/1,
                put_attr(I, chr_translate, v(H,[A],C,D,E,F))
            )
        ;   put_attr(I, chr_translate, v(1,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_head_name/4'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\1=:=1 ->
                'chr sbag_del_element'(B, A, I),
                (   I==[] ->
                    H is G/\ -2,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,[],C,D,E,F))
                    )
                ;   put_attr(J, chr_translate, v(G,I,C,D,E,F))
                )
            ;   true
            )
        ;   true
        ).
'$insert_in_store_no_history/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_no_history/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_indexing_spec/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_indexing_spec/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_observes/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_observes/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_spawns_observer/2'(A) :-
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', F),
        insert_ht(F, k(D,E), A),
        true,
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_spawns_observer/2'(A) :-
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', F),
        delete_ht(F, k(D,E), A),
        true,
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_observes_indirectly/2'(A) :-
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', F),
        insert_ht(F, k(D,E), A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_observes_indirectly/2'(A) :-
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', F),
        delete_ht(F, k(D,E), A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_module_initializer/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:module_initializer/1', B),
        b_setval('$chr_store_global_ground_chr_translate:module_initializer/1', [A|B]).
'$delete_from_store_module_initializer/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:module_initializer/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:module_initializer/1', C).
'$insert_in_store_prolog_global_variable/1'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\2=:=2 ->
                put_attr(I, chr_translate, v(G,B,[A|C],D,E,F))
            ;   H is G\/2,
                put_attr(I, chr_translate, v(H,B,[A],D,E,F))
            )
        ;   put_attr(I, chr_translate, v(2,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_prolog_global_variable/1'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\2=:=2 ->
                'chr sbag_del_element'(C, A, I),
                (   I==[] ->
                    H is G/\ -3,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,B,[],D,E,F))
                    )
                ;   put_attr(J, chr_translate, v(G,B,I,D,E,F))
                )
            ;   true
            )
        ;   true
        ).
'$insert_in_store_prev_guard_list/7'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', F),
        b_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7', [A|F]),
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', E),
        insert_ht(E, D, A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_prev_guard_list/7'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', F),
        'chr sbag_del_element'(F, A, G),
        b_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7', G),
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', E),
        delete_ht(E, D, A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_set_all_passive/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_set_all_passive/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_multiple_occ_constraints_checked/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
        b_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', [A|B]).
'$delete_from_store_multiple_occ_constraints_checked/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', C).
'$insert_in_store_type_definition/2'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\4=:=4 ->
                put_attr(I, chr_translate, v(G,B,C,[A|D],E,F))
            ;   H is G\/4,
                put_attr(I, chr_translate, v(H,B,C,[A],E,F))
            )
        ;   put_attr(I, chr_translate, v(4,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_type_definition/2'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\4=:=4 ->
                'chr sbag_del_element'(D, A, I),
                (   I==[] ->
                    H is G/\ -5,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,B,C,[],E,F))
                    )
                ;   put_attr(J, chr_translate, v(G,B,C,I,E,F))
                )
            ;   true
            )
        ;   true
        ).
'$insert_in_store_type_alias/2'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\8=:=8 ->
                put_attr(I, chr_translate, v(G,B,C,D,[A|E],F))
            ;   H is G\/8,
                put_attr(I, chr_translate, v(H,B,C,D,[A],F))
            )
        ;   put_attr(I, chr_translate, v(8,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_type_alias/2'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\8=:=8 ->
                'chr sbag_del_element'(E, A, I),
                (   I==[] ->
                    H is G/\ -9,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,B,C,D,[],F))
                    )
                ;   put_attr(J, chr_translate, v(G,B,C,D,I,F))
                )
            ;   true
            )
        ;   true
        ).
'$insert_in_store_constraint_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_constraint_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_add_type_information/3'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', B),
        b_setval('$chr_store_global_ground_chr_translate:add_type_information/3', [A|B]).
'$delete_from_store_add_type_information/3'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:add_type_information/3', C).
'$insert_in_store_stored/3'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', F),
        insert_ht(F, E, A),
        true,
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', D),
        insert_ht(D, C, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:stored/3', B),
        b_setval('$chr_store_global_ground_chr_translate:stored/3', [A|B]).
'$delete_from_store_stored/3'(A) :-
        arg(7, A, F),
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', G),
        delete_ht(G, F, A),
        true,
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', E),
        delete_ht(E, D, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:stored/3', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:stored/3', C).
'$insert_in_store_stored_complete/3'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_stored_complete/3'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_check_all_passive/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_check_all_passive/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_constraints_code1/3'(A) :-
        arg(7, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', D),
        insert_ht(D, C, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:constraints_code1/3', B),
        b_setval('$chr_store_global_ground_chr_translate:constraints_code1/3', [A|B]).
'$delete_from_store_constraints_code1/3'(A) :-
        arg(7, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', E),
        delete_ht(E, D, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:constraints_code1/3', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:constraints_code1/3', C).
'$insert_in_store_use_auxiliary_predicate/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_use_auxiliary_predicate/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_use_auxiliary_predicate/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_use_auxiliary_predicate/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_functional_dependency/4'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_functional_dependency/4'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_initial_call_pattern/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_initial_call_pattern/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_call_pattern/1'(A) :-
        arg(7, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', D),
        insert_ht(D, C, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', B),
        b_setval('$chr_store_global_ground_chr_translate:call_pattern/1', [A|B]).
'$delete_from_store_call_pattern/1'(A) :-
        arg(7, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', E),
        delete_ht(E, D, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:call_pattern/1', C).
'$insert_in_store_final_answer_pattern/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', D),
        b_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', [A|D]),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_final_answer_pattern/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', E),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_abstract_constraints/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', B),
        b_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1', [A|B]).
'$delete_from_store_abstract_constraints/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1', C).
'$insert_in_store_depends_on/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', F),
        insert_ht(F, E, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D),
        b_setval('$chr_store_global_ground_chr_translate:depends_on/2', [A|D]),
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_depends_on/2'(A) :-
        arg(7, A, F),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', G),
        delete_ht(G, F, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:depends_on/2', E),
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_depends_on_ap/4'(A) :-
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', E),
        insert_ht(E, D, A),
        true,
        arg(9, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_depends_on_ap/4'(A) :-
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', E),
        delete_ht(E, D, A),
        true,
        arg(9, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_depends_on_goal/2'(A) :-
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_depends_on_goal/2'(A) :-
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_ai_observed_internal/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', E),
        b_setval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', [A|E]),
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_ai_observed_internal/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', E),
        'chr sbag_del_element'(E, A, F),
        b_setval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', F),
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_ai_observed/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed/2', B),
        b_setval('$chr_store_global_ground_chr_translate:ai_observed/2', [A|B]).
'$delete_from_store_ai_observed/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed/2', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:ai_observed/2', C).
'$insert_in_store_ai_not_observed_internal/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', E),
        b_setval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', [A|E]),
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_ai_not_observed_internal/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', E),
        'chr sbag_del_element'(E, A, F),
        b_setval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', F),
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_ai_not_observed/2'(A) :-
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_ai_not_observed/2'(A) :-
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_depends_on_as/3'(A) :-
        arg(9, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', E),
        insert_ht(E, D, A),
        true,
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_depends_on_as/3'(A) :-
        arg(9, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', E),
        delete_ht(E, D, A),
        true,
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_ai_observation_gather_results/0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', B),
        b_setval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', [A|B]).
'$delete_from_store_ai_observation_gather_results/0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', C).
'$insert_in_store_phase_end/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_phase_end/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_delay_phase_end/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_delay_phase_end/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_does_use_history/1'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\16=:=16 ->
                put_attr(I, chr_translate, v(G,B,C,D,E,[A|F]))
            ;   H is G\/16,
                put_attr(I, chr_translate, v(H,B,C,D,E,[A]))
            )
        ;   put_attr(I, chr_translate, v(16,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_does_use_history/1'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\16=:=16 ->
                'chr sbag_del_element'(F, A, I),
                (   I==[] ->
                    H is G/\ -17,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,B,C,D,E,[]))
                    )
                ;   put_attr(J, chr_translate, v(G,B,C,D,E,I))
                )
            ;   true
            )
        ;   true
        ).
'$enumerate_suspensions'(A) :-
        (   nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
            'chr sbag_member'(A, B)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
            value_ht(C, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', D),
            'chr sbag_member'(A, D)
        ;   nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', E),
            'chr sbag_member'(A, E)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', F),
            value_ht(F, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', G),
            value_ht(G, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', H),
            value_ht(H, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', I),
            'chr sbag_member'(A, I)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', J),
            value_ht(J, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', K),
            value_ht(K, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', L),
            value_ht(L, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', M),
            value_ht(M, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:rule/2', N),
            'chr sbag_member'(A, N)
        ;   nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', O),
            'chr sbag_member'(A, O)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-2', P),
            value_ht(P, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', Q),
            'chr sbag_member'(A, Q)
        ;   'chr default_store'(R),
            get_attr(R, chr_translate, S),
            arg(2, S, T),
            'chr sbag_member'(A, T)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:no_history/1-1', U),
            value_ht(U, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', V),
            value_ht(V, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', W),
            value_ht(W, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', X),
            value_ht(X, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', Y),
            value_ht(Y, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:module_initializer/1', Z),
            'chr sbag_member'(A, Z)
        ;   'chr default_store'(A1),
            get_attr(A1, chr_translate, B1),
            arg(3, B1, C1),
            'chr sbag_member'(A, C1)
        ;   nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', D1),
            'chr sbag_member'(A, D1)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', E1),
            value_ht(E1, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F1),
            'chr sbag_member'(A, F1)
        ;   'chr default_store'(G1),
            get_attr(G1, chr_translate, H1),
            arg(4, H1, I1),
            'chr sbag_member'(A, I1)
        ;   'chr default_store'(J1),
            get_attr(J1, chr_translate, K1),
            arg(5, K1, L1),
            'chr sbag_member'(A, L1)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', M1),
            value_ht(M1, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', N1),
            'chr sbag_member'(A, N1)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', O1),
            value_ht(O1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', P1),
            value_ht(P1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', Q1),
            value_ht(Q1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', R1),
            value_ht(R1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', S1),
            value_ht(S1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', T1),
            value_ht(T1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', U1),
            value_ht(U1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', V1),
            value_ht(V1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', W1),
            value_ht(W1, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', X1),
            'chr sbag_member'(A, X1)
        ;   nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', Y1),
            'chr sbag_member'(A, Y1)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', Z1),
            value_ht(Z1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', A2),
            value_ht(A2, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', B2),
            value_ht(B2, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', C2),
            'chr sbag_member'(A, C2)
        ;   nb_getval('$chr_store_global_ground_chr_translate:ai_observed/2', D2),
            'chr sbag_member'(A, D2)
        ;   nb_getval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', E2),
            'chr sbag_member'(A, E2)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', F2),
            value_ht(F2, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', G2),
            value_ht(G2, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', H2),
            'chr sbag_member'(A, H2)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:phase_end/1-1', I2),
            value_ht(I2, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', J2),
            value_ht(J2, A)
        ;   'chr default_store'(K2),
            get_attr(K2, chr_translate, L2),
            arg(6, L2, M2),
            'chr sbag_member'(A, M2)
        ).
(:-nb_setval('$chr_store_global_ground_chr_translate:target_module/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1',A)).
'$via1_multi_hash_indexed_argument/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12',A)).
'$via1_multi_hash_indexed_argument/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:constraint_mode/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1',A)).
'$via1_multi_hash_constraint_mode/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:store_type/2-1',A)).
'$via1_multi_hash_store_type/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1',A)).
'$via1_multi_hash_actual_store_types/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1',A)).
'$via1_multi_hash_assumed_store_type/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:rule_count/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:passive/2-1',A)).
'$via1_multi_hash_passive/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:passive/2-12',A)).
'$via1_multi_hash_passive/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-34',A)).
'$via1_multi_hash_occurrence/4-34'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-1',A)).
'$via1_multi_hash_occurrence/4-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-2',A)).
'$via1_multi_hash_occurrence/4-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-3',A)).
'$via1_multi_hash_occurrence/4-3'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-1234',A)).
'$via1_multi_hash_occurrence/4-1234'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1',A)).
'$via1_multi_hash_max_occurrence/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1',A)).
'$via1_multi_hash_allocation_occurrence/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12',A)).
'$via1_multi_hash_allocation_occurrence/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2',[])).
(:-nb_setval('$chr_store_global_ground_chr_translate:rule/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:rule/2-1',A)).
'$via1_multi_hash_rule/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:least_occurrence/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1',A)).
'$via1_multi_hash_least_occurrence/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraint_index/2-2',A)).
'$via1_multi_hash_constraint_index/2-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraint_index/2-1',A)).
'$via1_multi_hash_constraint_index/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:no_history/1-1',A)).
'$via1_multi_hash_no_history/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1',A)).
'$via1_multi_hash_indexing_spec/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:observes/2-1',A)).
'$via1_multi_hash_observes/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:observes/2-12',A)).
'$via1_multi_hash_observes/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12',A)).
'$via1_multi_hash_spawns_observer/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2',A)).
'$via1_multi_hash_spawns_observer/2-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12',A)).
'$via1_multi_hash_observes_indirectly/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1',A)).
'$via1_multi_hash_observes_indirectly/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:module_initializer/1',[])).
(:-nb_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2',A)).
'$via1_multi_hash_prev_guard_list/7-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1',A)).
'$via1_multi_hash_prev_guard_list/7-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1',A)).
'$via1_multi_hash_set_all_passive/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraint_type/2-1',A)).
'$via1_multi_hash_constraint_type/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:add_type_information/3',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:stored/3-1',A)).
'$via1_multi_hash_stored/3-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:stored/3-2',A)).
'$via1_multi_hash_stored/3-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:stored/3',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:stored_complete/3-1',A)).
'$via1_multi_hash_stored_complete/3-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1',A)).
'$via1_multi_hash_check_all_passive/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1',A)).
'$via1_multi_hash_constraints_code1/3-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:constraints_code1/3',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1',A)).
'$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1',A)).
'$via1_multi_hash_use_auxiliary_predicate/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12',A)).
'$via1_multi_hash_use_auxiliary_predicate/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1',A)).
'$via1_multi_hash_functional_dependency/4-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12',A)).
'$via1_multi_hash_functional_dependency/4-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1',A)).
'$via1_multi_hash_initial_call_pattern/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:call_pattern/1-1',A)).
'$via1_multi_hash_call_pattern/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:call_pattern/1',[])).
(:-nb_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1',A)).
'$via1_multi_hash_final_answer_pattern/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on/2-1',A)).
'$via1_multi_hash_depends_on/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:depends_on/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on/2-2',A)).
'$via1_multi_hash_depends_on/2-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2',A)).
'$via1_multi_hash_depends_on_ap/4-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3',A)).
'$via1_multi_hash_depends_on_ap/4-3'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2',A)).
'$via1_multi_hash_depends_on_goal/2-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12',A)).
'$via1_multi_hash_depends_on_goal/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:ai_observed_internal/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12',A)).
'$via1_multi_hash_ai_observed_internal/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:ai_observed/2',[])).
(:-nb_setval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12',A)).
'$via1_multi_hash_ai_not_observed_internal/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12',A)).
'$via1_multi_hash_ai_not_observed/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3',A)).
'$via1_multi_hash_depends_on_as/3-3'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2',A)).
'$via1_multi_hash_depends_on_as/3-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:phase_end/1-1',A)).
'$via1_multi_hash_phase_end/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1',A)).
'$via1_multi_hash_delay_phase_end/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        lookup_ht(C, A, B).
target_module(A) :-
        'target_module/1__0'(A, _).
'target_module/1__0'(_, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:target_module/1', A),
        (   'chr sbag_member'(B, A),
            B=suspension(_,C,_,_,_,_,_),
            C=mutable(active) ->
            true
        ), !.
'target_module/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'target_module/1__0'(A,B), target_module(A), [A]),
        '$insert_in_store_target_module/1'(B).
get_target_module(A) :-
        'get_target_module/1__0'(A, _).
'get_target_module/1__0'(A, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
        (   'chr sbag_member'(D, B),
            D=suspension(_,E,_,_,_,_,C),
            E=mutable(active) ->
            true
        ), !,
        A=C.
'get_target_module/1__0'(A, _) :- !,
        A=user.
indexed_argument(A, B) :-
        'indexed_argument/2__0'(A, B, _).
'indexed_argument/2__0'(A, B, _) :-
        '$via1_multi_hash_indexed_argument/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'indexed_argument/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'indexed_argument/2__0'(A,B,C), indexed_argument(A,B), [A,B]),
        '$insert_in_store_indexed_argument/2'(C).
is_indexed_argument(A, B) :-
        'is_indexed_argument/2__0'(A, B, _).
'is_indexed_argument/2__0'(A, B, _) :-
        '$via1_multi_hash_indexed_argument/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'is_indexed_argument/2__0'(_, _, _) :- !,
        fail.
constraint_mode(A, B) :-
        'constraint_mode/2__0'(A, B, _).
'constraint_mode/2__0'(A, _, _) :-
        '$via1_multi_hash_constraint_mode/2-1'(A, B),
        (   'chr sbag_member'(C, B),
            C=suspension(_,D,_,_,_,_,E,_),
            D=mutable(active),
            E==A ->
            true
        ), !.
'constraint_mode/2__0'(C, D, E) :-
        nonvar(C),
        C=A/B,
        nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', F), !,
        '$chr_translate__allocate_constraint'(chr_translate:'constraint_mode/2__0'(C,D,E), E, constraint_mode(C,D), [C,D]),
        'constraint_mode/2__0__0'(F, C, D, E, A, B).
'constraint_mode/2__0__0'([], A, B, C, _, _) :-
        'constraint_mode/2__1'(A, B, C).
'constraint_mode/2__0__0'([A|B], O, P, Q, R, S) :-
        (   A=suspension(_,T,_,_,_,_,V,W,X),
            T=mutable(active),
            nonvar(V),
            V=[C|D],
            nonvar(W),
            W=[F|G],
            functor(C, R, S) ->
            '$chr_translate__remove_constraint_internal'(A, _, U),
            (   U==yes ->
                '$delete_from_store_add_type_information/3'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(Y, _, Q, Z),
            (   Y==yes ->
                '$insert_in_store_constraint_mode/2'(Q)
            ;   true
            ),
            C=..[_|E],
            F=..[_|H],
            add_mode_info(P, E, I),
            X=(I,J),
            (   get_constraint_type(R/S, K) ->
                types2condition(K, E, H, P, L),
                list2conj(L, M),
                J=(M,N),
                add_type_information(D, G, N)
            ;   add_type_information(D, G, J)
            ),
            (   Q=suspension(_,A1,_,B1,_,_,_,_),
                A1=mutable(active),
                B1=mutable(Z) ->
                'chr update_mutable'(inactive, A1),
                'constraint_mode/2__0__0'(B, O, P, Q, R, S)
            ;   true
            )
        ;   'constraint_mode/2__0__0'(B, O, P, Q, R, S)
        ).
'constraint_mode/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'constraint_mode/2__0'(A,B,C), C, constraint_mode(A,B), [A,B]),
        'constraint_mode/2__1'(A, B, C).
'constraint_mode/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_constraint_mode/2'(A)
        ;   true
        ).
get_constraint_mode(A, B) :-
        'get_constraint_mode/2__0'(A, B, _).
'get_constraint_mode/2__0'(A, _, _) :-
        chr_pp_flag(all_ground, on),
        '$via1_multi_hash_constraint_mode/2-1'(A, B),
        (   'chr sbag_member'(D, B),
            D=suspension(_,E,_,_,_,_,F,C),
            E=mutable(active),
            F==A ->
            true
        ),
        not_all_ground(C), !,
        chr_error(invalid_mode, 'only ground constraints allowed - illegal mode specified for ~w.\n', [A]).
'get_constraint_mode/2__0'(A, B, _) :-
        '$via1_multi_hash_constraint_mode/2-1'(A, C),
        (   'chr sbag_member'(E, C),
            E=suspension(_,F,_,_,_,_,G,D),
            F=mutable(active),
            G==A ->
            true
        ), !,
        B=D.
'get_constraint_mode/2__0'(B, C, _) :-
        chr_pp_flag(all_ground, on), !,
        B=_/A,
        replicate(A, '+', C).
'get_constraint_mode/2__0'(B, C, _) :- !,
        B=_/A,
        replicate(A, '?', C).
may_trigger(A) :-
        'may_trigger/1__0'(A, _).
'may_trigger/1__0'(A, _) :-
        \+has_active_occurrence(A), !,
        fail.
'may_trigger/1__0'(B, _) :-
        '$via1_multi_hash_indexed_argument/2-1'(B, C),
        '$via1_multi_hash_constraint_mode/2-1'(B, D),
        (   'chr sbag_member'(F, D),
            F=suspension(_,J,_,_,_,_,K,L),
            J=mutable(active),
            K==B ->
            true
        ),
        'chr sbag_member'(E, C),
        E=suspension(_,G,_,_,_,_,H,I),
        G=mutable(active),
        H==B,
        nth1(I, L, A),
        A\==('+'), !,
        is_stored(B).
'may_trigger/1__0'(_, _) :- !,
        chr_pp_flag(debugable, on).
only_ground_indexed_arguments(A) :-
        'only_ground_indexed_arguments/1__0'(A, _).
'only_ground_indexed_arguments/1__0'(B, _) :-
        '$via1_multi_hash_indexed_argument/2-1'(B, C),
        '$via1_multi_hash_constraint_mode/2-1'(B, D),
        (   'chr sbag_member'(F, D),
            F=suspension(_,J,_,_,_,_,K,L),
            J=mutable(active),
            K==B ->
            true
        ),
        'chr sbag_member'(E, C),
        E=suspension(_,G,_,_,_,_,H,I),
        G=mutable(active),
        H==B,
        nth1(I, L, A),
        A\==('+'), !,
        fail.
'only_ground_indexed_arguments/1__0'(_, _) :- !.
none_suspended_on_variables :-
        'none_suspended_on_variables/0__0'(_).
'none_suspended_on_variables/0__0'(_) :-
        nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', A),
        (   'chr sbag_member'(B, A),
            B=suspension(_,C,_,_,_,_),
            C=mutable(active) ->
            true
        ), !.
'none_suspended_on_variables/0__0'(A) :-
        '$chr_translate__insert_constraint_internal'(_, _, A, chr_translate:'none_suspended_on_variables/0__0'(A), none_suspended_on_variables, []),
        '$insert_in_store_none_suspended_on_variables/0'(A).
are_none_suspended_on_variables :-
        'are_none_suspended_on_variables/0__0'(_).
'are_none_suspended_on_variables/0__0'(_) :-
        nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', A),
        (   'chr sbag_member'(B, A),
            B=suspension(_,C,_,_,_,_),
            C=mutable(active) ->
            true
        ), !.
'are_none_suspended_on_variables/0__0'(_) :- !,
        fail.
store_type(A, B) :-
        'store_type/2__0'(A, B, _).
'store_type/2__0'(B, C, _) :-
        nonvar(C),
        C=atom_hash(A), !,
        store_type(B, multi_hash([A])).
'store_type/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'store_type/2__0'(A,B,C), store_type(A,B), [A,B]),
        '$insert_in_store_store_type/2'(C).
get_store_type(A, B) :-
        'get_store_type/2__0'(A, B, _).
'get_store_type/2__0'(A, B, _) :-
        '$via1_multi_hash_store_type/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        B=G.
'get_store_type/2__0'(A, B, _) :-
        '$via1_multi_hash_assumed_store_type/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        B=G.
'get_store_type/2__0'(_, A, _) :- !,
        A=default.
update_store_type(A, B) :-
        'update_store_type/2__0'(A, B, _).
'update_store_type/2__0'(A, B, _) :-
        '$via1_multi_hash_actual_store_types/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A,
        member(B, G), !.
'update_store_type/2__0'(A, B, _) :-
        '$via1_multi_hash_actual_store_types/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        '$chr_translate__remove_constraint_internal'(D, _, H),
        (   H==yes ->
            '$delete_from_store_actual_store_types/2'(D)
        ;   true
        ),
        actual_store_types(A, [B|G]).
'update_store_type/2__0'(A, B, _) :- !,
        actual_store_types(A, [B]).
actual_store_types(A, B) :-
        'actual_store_types/2__0'(A, B, _).
'actual_store_types/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'actual_store_types/2__0'(A,B,C), actual_store_types(A,B), [A,B]),
        '$insert_in_store_actual_store_types/2'(C).
assumed_store_type(A, B) :-
        'assumed_store_type/2__0'(A, B, _).
'assumed_store_type/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'assumed_store_type/2__0'(A,B,C), assumed_store_type(A,B), [A,B]),
        '$insert_in_store_assumed_store_type/2'(C).
validate_store_type_assumption(A) :-
        'validate_store_type_assumption/1__0'(A, _).
'validate_store_type_assumption/1__0'(A, _) :-
        '$via1_multi_hash_assumed_store_type/2-1'(A, B),
        '$via1_multi_hash_actual_store_types/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A,
        'chr sbag_member'(H, B),
        H=suspension(_,I,_,_,_,_,J,_),
        I=mutable(active),
        J==A, !,
        '$chr_translate__remove_constraint_internal'(D, _, K),
        (   K==yes ->
            '$delete_from_store_actual_store_types/2'(D)
        ;   true
        ),
        '$chr_translate__remove_constraint_internal'(H, _, L),
        (   L==yes ->
            '$delete_from_store_assumed_store_type/2'(H)
        ;   true
        ),
        store_type(A, multi_store(G)).
'validate_store_type_assumption/1__0'(A, _) :-
        '$via1_multi_hash_store_type/2-1'(A, B),
        '$via1_multi_hash_actual_store_types/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A,
        'chr sbag_member'(H, B),
        H=suspension(_,I,_,_,_,_,J,_),
        I=mutable(active),
        J==A, !,
        '$chr_translate__remove_constraint_internal'(D, _, K),
        (   K==yes ->
            '$delete_from_store_actual_store_types/2'(D)
        ;   true
        ),
        '$chr_translate__remove_constraint_internal'(H, _, L),
        (   L==yes ->
            '$delete_from_store_store_type/2'(H)
        ;   true
        ),
        store_type(A, multi_store(G)).
'validate_store_type_assumption/1__0'(A, _) :-
        '$via1_multi_hash_assumed_store_type/2-1'(A, B),
        'chr sbag_member'(C, B),
        C=suspension(_,D,_,_,_,_,E,_),
        D=mutable(active),
        E==A, !,
        '$chr_translate__remove_constraint_internal'(C, _, F),
        (   F==yes ->
            '$delete_from_store_assumed_store_type/2'(C)
        ;   true
        ),
        store_type(A, global_ground).
'validate_store_type_assumption/1__0'(_, _) :- !.
rule_count(A) :-
        'rule_count/1__0'(A, _).
'rule_count/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'rule_count/1__0'(A,B), rule_count(A), [A]),
        '$insert_in_store_rule_count/1'(B).
inc_rule_count(A) :-
        'inc_rule_count/1__0'(A, _).
'inc_rule_count/1__0'(A, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', B),
        'chr sbag_member'(C, B),
        C=suspension(_,D,_,_,_,_,E),
        D=mutable(active), !,
        '$chr_translate__remove_constraint_internal'(C, _, F),
        (   F==yes ->
            '$delete_from_store_rule_count/1'(C)
        ;   true
        ),
        A is E+1,
        rule_count(A).
'inc_rule_count/1__0'(A, _) :- !,
        A=1,
        rule_count(A).
passive(A, B) :-
        'passive/2__0'(A, B, _).
'passive/2__0'(A, B, _) :-
        '$via1_multi_hash_passive/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'passive/2__0'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'passive/2__0'(A,B,C), C, passive(A,B), [A,B]),
        'passive/2__0__0'(D, A, B, C).
'passive/2__0__0'([], A, B, C) :-
        'passive/2__1'(A, B, C).
'passive/2__0__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,J,K),
            G=mutable(active),
            '$via1_multi_hash_occurrence/4-1234'(k(J,K,D,E), H),
            'chr sbag_member'(L, H),
            L=suspension(_,O,_,_,_,_,P,Q,R,S),
            O=mutable(active),
            P==J,
            Q==K,
            R==D,
            S==E ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, F, N),
            (   M==yes ->
                '$insert_in_store_passive/2'(F)
            ;   true
            ),
            C is K+1,
            allocation_occurrence(J, C),
            (   F=suspension(_,T,_,U,_,_,_,_),
                T=mutable(active),
                U=mutable(N) ->
                'chr update_mutable'(inactive, T),
                'passive/2__0__0'(B, D, E, F)
            ;   true
            )
        ;   'passive/2__0__0'(B, D, E, F)
        ).
'passive/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'passive/2__0'(A,B,C), C, passive(A,B), [A,B]),
        'passive/2__1'(A, B, C).
'passive/2__1'(A, B, C) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, D), !,
        'passive/2__1__0'(D, A, B, C).
'passive/2__1__0'([], A, B, C) :-
        'passive/2__2'(A, B, C).
'passive/2__1__0'([A|B], E, F, G) :-
        (   A=suspension(_,H,_,_,_,_,J,K),
            H=mutable(active),
            J==E,
            nonvar(K),
            K=[C|D],
            C==F,
            '$via1_multi_hash_rule/2-1'(E, L),
            'chr sbag_member'(O, L),
            O=suspension(_,P,_,_,_,_,Q,_),
            P=mutable(active),
            Q==E ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, G, N),
            (   M==yes ->
                '$insert_in_store_passive/2'(G)
            ;   true
            ),
            least_occurrence(E, D),
            (   G=suspension(_,R,_,S,_,_,_,_),
                R=mutable(active),
                S=mutable(N) ->
                'chr update_mutable'(inactive, R),
                'passive/2__1__0'(B, E, F, G)
            ;   true
            )
        ;   'passive/2__1__0'(B, E, F, G)
        ).
'passive/2__1'(A, B, C) :-
        'passive/2__2'(A, B, C).
'passive/2__2'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:stored/3', D), !,
        'passive/2__2__0'(D, A, B, C).
'passive/2__2__0'([], A, B, C) :-
        'passive/2__3'(A, B, C).
'passive/2__2__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,I,J,H),
            G=mutable(active),
            H==yes,
            '$via1_multi_hash_occurrence/4-1234'(k(I,J,D,E), K),
            '$via1_multi_hash_stored_complete/3-1'(I, Q),
            'chr sbag_member'(M, Q),
            M=suspension(_,W,_,_,_,_,X,S,R),
            W=mutable(active),
            X==I,
            J<S,
            'chr sbag_member'(U, K),
            U=suspension(_,Y,_,_,_,_,Z,A1,B1,C1),
            Y=mutable(active),
            Z==I,
            A1==J,
            B1==D,
            C1==E ->
            '$chr_translate__remove_constraint_internal'(A, _, L),
            (   L==yes ->
                '$delete_from_store_stored/3'(A)
            ;   true
            ),
            '$chr_translate__remove_constraint_internal'(M, _, N),
            (   N==yes ->
                '$delete_from_store_stored_complete/3'(M)
            ;   true
            ),
            '$chr_translate__activate_constraint'(O, _, F, P),
            (   O==yes ->
                '$insert_in_store_passive/2'(F)
            ;   true
            ),
            C is R-1,
            stored(I, J, maybe),
            stored_complete(I, S, C),
            (   F=suspension(_,T,_,V,_,_,_,_),
                T=mutable(active),
                V=mutable(P) ->
                'chr update_mutable'(inactive, T),
                'passive/2__2__0'(B, D, E, F)
            ;   true
            )
        ;   'passive/2__2__0'(B, D, E, F)
        ).
'passive/2__2'(A, B, C) :-
        'passive/2__3'(A, B, C).
'passive/2__3'(A, B, C) :-
        '$via1_multi_hash_rule/2-1'(A, D), !,
        'passive/2__3__0'(D, A, B, C).
'passive/2__3__0'([], A, B, C) :-
        'passive/2__4'(A, B, C).
'passive/2__3__0'([B|A], F, G, H) :-
        (   B=suspension(_,J,_,_,_,_,K,L),
            J=mutable(active),
            K==F,
            I=t(120,B,H),
            'chr novel_production'(B, I),
            'chr novel_production'(H, I),
            L=pragma(rule(_,_,_,_),ids([G|E],D),_,_,F) ->
            'chr extend_history'(H, I),
            '$chr_translate__activate_constraint'(M, _, H, N),
            (   M==yes ->
                '$insert_in_store_passive/2'(H)
            ;   true
            ),
            append(E, D, C),
            check_all_passive(F, C),
            (   H=suspension(_,O,_,P,_,_,_,_),
                O=mutable(active),
                P=mutable(N) ->
                'chr update_mutable'(inactive, O),
                'passive/2__3__0'(A, F, G, H)
            ;   true
            )
        ;   'passive/2__3__0'(A, F, G, H)
        ).
'passive/2__3'(A, B, C) :-
        'passive/2__4'(A, B, C).
'passive/2__4'(A, B, C) :-
        '$via1_multi_hash_rule/2-1'(A, D), !,
        'passive/2__4__0'(D, A, B, C).
'passive/2__4__0'([], A, B, C) :-
        'passive/2__5'(A, B, C).
'passive/2__4__0'([B|A], D, E, F) :-
        (   B=suspension(_,H,_,_,_,_,I,J),
            H=mutable(active),
            I==D,
            G=t(121,B,F),
            'chr novel_production'(B, G),
            'chr novel_production'(F, G),
            J=pragma(rule(_,_,_,_),ids([],[E|C]),_,_,D) ->
            'chr extend_history'(F, G),
            '$chr_translate__activate_constraint'(K, _, F, L),
            (   K==yes ->
                '$insert_in_store_passive/2'(F)
            ;   true
            ),
            check_all_passive(D, C),
            (   F=suspension(_,M,_,N,_,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'passive/2__4__0'(A, D, E, F)
            ;   true
            )
        ;   'passive/2__4__0'(A, D, E, F)
        ).
'passive/2__4'(A, B, C) :-
        'passive/2__5'(A, B, C).
'passive/2__5'(A, B, C) :-
        '$via1_multi_hash_check_all_passive/2-1'(A, D), !,
        'passive/2__5__0'(D, A, B, C).
'passive/2__5__0'([], A, B, C) :-
        'passive/2__6'(A, B, C).
'passive/2__5__0'([A|B], E, F, G) :-
        (   A=suspension(_,H,_,_,_,_,I,K),
            H=mutable(active),
            I==E,
            nonvar(K),
            K=[C|D],
            C==F ->
            '$chr_translate__remove_constraint_internal'(A, _, J),
            (   J==yes ->
                '$delete_from_store_check_all_passive/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(L, _, G, M),
            (   L==yes ->
                '$insert_in_store_passive/2'(G)
            ;   true
            ),
            check_all_passive(E, D),
            (   G=suspension(_,N,_,O,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'passive/2__5__0'(B, E, F, G)
            ;   true
            )
        ;   'passive/2__5__0'(B, E, F, G)
        ).
'passive/2__5'(A, B, C) :-
        'passive/2__6'(A, B, C).
'passive/2__6'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_passive/2'(A)
        ;   true
        ).
is_passive(A, B) :-
        'is_passive/2__0'(A, B, _).
'is_passive/2__0'(A, B, _) :-
        '$via1_multi_hash_passive/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'is_passive/2__0'(_, _, _) :- !,
        fail.
any_passive_head(A) :-
        'any_passive_head/1__0'(A, _).
'any_passive_head/1__0'(A, _) :-
        '$via1_multi_hash_passive/2-1'(A, B),
        'chr sbag_member'(C, B),
        C=suspension(_,D,_,_,_,_,E,_),
        D=mutable(active),
        E==A, !.
'any_passive_head/1__0'(_, _) :- !,
        fail.
new_occurrence(A, B, C) :-
        'new_occurrence/3__0'(A, B, C, _).
'new_occurrence/3__0'(B, C, D, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(B, E),
        (   'chr sbag_member'(F, E),
            F=suspension(_,H,_,_,_,_,I,J),
            H=mutable(active),
            I==B ->
            true
        ), !,
        '$chr_translate__remove_constraint_internal'(F, _, G),
        (   G==yes ->
            '$delete_from_store_max_occurrence/2'(F)
        ;   true
        ),
        A is J+1,
        occurrence(B, A, C, D),
        max_occurrence(B, A).
'new_occurrence/3__0'(A, B, _, _) :- !,
        chr_error(internal, 'new_occurrence: missing max_occurrence for ~w in rule ~w\n', [A,B]).
occurrence(A, B, C, D) :-
        'occurrence/4__0'(A, B, C, D, _).
'occurrence/4__0'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        '$chr_translate__allocate_constraint'(chr_translate:'occurrence/4__0'(A,B,C,D,E), E, occurrence(A,B,C,D), [A,B,C,D]),
        'occurrence/4__0__0'(F, A, B, C, D, E).
'occurrence/4__0__0'([], A, B, C, D, E) :-
        'occurrence/4__1'(A, B, C, D, E).
'occurrence/4__0__0'([A|B], D, E, F, G, H) :-
        (   A=suspension(_,I,_,_,_,_,K,L),
            I=mutable(active),
            K==D,
            L==E,
            '$via1_multi_hash_passive/2-12'(k(F,G), M),
            (   'chr sbag_member'(P, M),
                P=suspension(_,R,_,_,_,_,S,T),
                R=mutable(active),
                S==F,
                T==G ->
                true
            ) ->
            '$chr_translate__remove_constraint_internal'(A, _, J),
            (   J==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(N, _, H, O),
            (   N==yes ->
                '$insert_in_store_occurrence/4'(H)
            ;   true
            ),
            C is E+1,
            allocation_occurrence(D, C),
            (   H=suspension(_,Q,_,U,_,_,_,_,_,_),
                Q=mutable(active),
                U=mutable(O) ->
                'chr update_mutable'(inactive, Q),
                'occurrence/4__0__0'(B, D, E, F, G, H)
            ;   true
            )
        ;   'occurrence/4__0__0'(B, D, E, F, G, H)
        ).
'occurrence/4__0'(A, B, C, D, E) :-
        '$chr_translate__allocate_constraint'(chr_translate:'occurrence/4__0'(A,B,C,D,E), E, occurrence(A,B,C,D), [A,B,C,D]),
        'occurrence/4__1'(A, B, C, D, E).
'occurrence/4__1'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__1__0'(F, A, B, C, D, E).
'occurrence/4__1__0'([], A, B, C, D, E) :-
        'occurrence/4__2'(A, B, C, D, E).
'occurrence/4__1__0'([A|B], E, F, G, H, I) :-
        (   A=suspension(_,J,_,_,_,_,L,M),
            J=mutable(active),
            L==E,
            M==F,
            '$via1_multi_hash_rule/2-1'(G, N),
            'chr sbag_member'(Q, N),
            Q=suspension(_,T,_,_,_,_,U,R),
            T=mutable(active),
            U==G,
            R=pragma(_,ids(D,_),_,_,_),
            member(H, D) ->
            '$chr_translate__remove_constraint_internal'(A, _, K),
            (   K==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(O, _, I, P),
            (   O==yes ->
                '$insert_in_store_occurrence/4'(I)
            ;   true
            ),
            C is F+1,
            allocation_occurrence(E, C),
            (   I=suspension(_,S,_,V,_,_,_,_,_,_),
                S=mutable(active),
                V=mutable(P) ->
                'chr update_mutable'(inactive, S),
                'occurrence/4__1__0'(B, E, F, G, H, I)
            ;   true
            )
        ;   'occurrence/4__1__0'(B, E, F, G, H, I)
        ).
'occurrence/4__1'(A, B, C, D, E) :-
        'occurrence/4__2'(A, B, C, D, E).
'occurrence/4__2'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__2__0'(F, A, B, C, D, E).
'occurrence/4__2__0'([], A, B, C, D, E) :-
        'occurrence/4__3'(A, B, C, D, E).
'occurrence/4__2__0'([A|B], D, E, F, G, H) :-
        (   A=suspension(_,I,_,_,_,_,K,L),
            I=mutable(active),
            K==D,
            L==E,
            '$via1_multi_hash_rule/2-1'(F, M),
            'chr sbag_member'(Q, M),
            Q=suspension(_,S,_,_,_,_,T,P),
            S=mutable(active),
            T==F,
            P=pragma(rule(_,_,_,true),_,_,_,_) ->
            '$chr_translate__remove_constraint_internal'(A, _, J),
            (   J==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(N, _, H, O),
            (   N==yes ->
                '$insert_in_store_occurrence/4'(H)
            ;   true
            ),
            C is E+1,
            allocation_occurrence(D, C),
            (   H=suspension(_,R,_,U,_,_,_,_,_,_),
                R=mutable(active),
                U=mutable(O) ->
                'chr update_mutable'(inactive, R),
                'occurrence/4__2__0'(B, D, E, F, G, H)
            ;   true
            )
        ;   'occurrence/4__2__0'(B, D, E, F, G, H)
        ).
'occurrence/4__2'(A, B, C, D, E) :-
        'occurrence/4__3'(A, B, C, D, E).
'occurrence/4__3'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__3__0'(F, A, B, C, D, E).
'occurrence/4__3__0'([], A, B, C, D, E) :-
        'occurrence/4__4'(A, B, C, D, E).
'occurrence/4__3__0'([A|B], D, E, F, G, H) :-
        (   A=suspension(_,I,_,_,_,_,K,L),
            I=mutable(active),
            K==D,
            L==E,
            '$via1_multi_hash_rule/2-1'(F, M),
            'chr sbag_member'(P, M),
            P=suspension(_,S,_,_,_,_,T,Q),
            S=mutable(active),
            T==F,
            Q=pragma(rule([_|_],_,_,_),_,_,_,_),
            \+is_observed(D,E) ->
            '$chr_translate__remove_constraint_internal'(A, _, J),
            (   J==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(N, _, H, O),
            (   N==yes ->
                '$insert_in_store_occurrence/4'(H)
            ;   true
            ),
            C is E+1,
            allocation_occurrence(D, C),
            (   H=suspension(_,R,_,U,_,_,_,_,_,_),
                R=mutable(active),
                U=mutable(O) ->
                'chr update_mutable'(inactive, R),
                'occurrence/4__3__0'(B, D, E, F, G, H)
            ;   true
            )
        ;   'occurrence/4__3__0'(B, D, E, F, G, H)
        ).
'occurrence/4__3'(A, B, C, D, E) :-
        'occurrence/4__4'(A, B, C, D, E).
'occurrence/4__4'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__4__0'(F, A, B, C, D, E).
'occurrence/4__4__0'([], A, B, C, D, E) :-
        'occurrence/4__5'(A, B, C, D, E).
'occurrence/4__4__0'([A|B], D, E, F, G, H) :-
        (   A=suspension(_,I,_,_,_,_,K,L),
            I=mutable(active),
            K==D,
            L==E,
            '$via1_multi_hash_rule/2-1'(F, M),
            '$via1_multi_hash_least_occurrence/2-1'(F, P),
            'chr sbag_member'(Q, P),
            Q=suspension(_,V,_,_,_,_,W,X),
            V=mutable(active),
            W==F,
            X==[],
            'chr sbag_member'(S, M),
            S=suspension(_,Y,_,_,_,_,Z,T),
            Y=mutable(active),
            Z==F,
            T=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(D,E) ->
            '$chr_translate__remove_constraint_internal'(A, _, J),
            (   J==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(N, _, H, O),
            (   N==yes ->
                '$insert_in_store_occurrence/4'(H)
            ;   true
            ),
            C is E+1,
            allocation_occurrence(D, C),
            (   H=suspension(_,R,_,U,_,_,_,_,_,_),
                R=mutable(active),
                U=mutable(O) ->
                'chr update_mutable'(inactive, R),
                'occurrence/4__4__0'(B, D, E, F, G, H)
            ;   true
            )
        ;   'occurrence/4__4__0'(B, D, E, F, G, H)
        ).
'occurrence/4__4'(A, B, C, D, E) :-
        'occurrence/4__5'(A, B, C, D, E).
'occurrence/4__5'(A, B, C, D, E) :-
        '$via1_multi_hash_least_occurrence/2-1'(C, F), !,
        'occurrence/4__5__0'(F, A, B, C, D, E).
'occurrence/4__5__0'([], A, B, C, D, E) :-
        'occurrence/4__6'(A, B, C, D, E).
'occurrence/4__5__0'([A|B], E, F, G, H, I) :-
        (   A=suspension(_,J,_,_,_,_,L,M),
            J=mutable(active),
            L==G,
            nonvar(M),
            M=[C|D],
            C==H,
            '$via1_multi_hash_rule/2-1'(G, N),
            '$via1_multi_hash_allocation_occurrence/2-1'(E, Q),
            'chr sbag_member'(R, Q),
            R=suspension(_,V,_,_,_,_,W,S),
            V=mutable(active),
            W==E,
            S>=F,
            'chr sbag_member'(X, N),
            X=suspension(_,Y,_,_,_,_,Z,_),
            Y=mutable(active),
            Z==G,
            \+may_trigger(E) ->
            '$chr_translate__remove_constraint_internal'(A, _, K),
            (   K==yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(O, _, I, P),
            (   O==yes ->
                '$insert_in_store_occurrence/4'(I)
            ;   true
            ),
            least_occurrence(G, D),
            (   I=suspension(_,T,_,U,_,_,_,_,_,_),
                T=mutable(active),
                U=mutable(P) ->
                'chr update_mutable'(inactive, T),
                'occurrence/4__5__0'(B, E, F, G, H, I)
            ;   true
            )
        ;   'occurrence/4__5__0'(B, E, F, G, H, I)
        ).
'occurrence/4__5'(A, B, C, D, E) :-
        'occurrence/4__6'(A, B, C, D, E).
'occurrence/4__6'(A, B, C, D, E) :-
        '$via1_multi_hash_set_all_passive/1-1'(C, F), !,
        'occurrence/4__6__0'(F, A, B, C, D, E).
'occurrence/4__6__0'([], A, B, C, D, E) :-
        'occurrence/4__7'(A, B, C, D, E).
'occurrence/4__6__0'([B|A], C, D, E, F, G) :-
        (   B=suspension(_,I,_,_,_,_,J),
            I=mutable(active),
            J==E,
            H=t(94,B,G),
            'chr novel_production'(B, H),
            'chr novel_production'(G, H) ->
            'chr extend_history'(G, H),
            '$chr_translate__activate_constraint'(K, _, G, L),
            (   K==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            passive(E, F),
            (   G=suspension(_,M,_,N,_,_,_,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'occurrence/4__6__0'(A, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__6__0'(A, C, D, E, F, G)
        ).
'occurrence/4__6'(A, B, C, D, E) :-
        'occurrence/4__7'(A, B, C, D, E).
'occurrence/4__7'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F), !,
        'occurrence/4__7__0'(F, A, B, C, D, E).
'occurrence/4__7__0'([], A, B, C, D, E) :-
        'occurrence/4__8'(A, B, C, D, E).
'occurrence/4__7__0'([A|B], D, E, F, G, H) :-
        (   A=suspension(_,I,_,_,_,_,K),
            I=mutable(active),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(F, L),
            '$via1_multi_hash_rule/2-1'(F, O),
            '$via1_multi_hash_prev_guard_list/7-1'(F, P),
            'chr sbag_member'(R, P),
            R=suspension(_,U,_,_,_,_,V,W,_,_,_,_,X),
            U=mutable(active),
            V==F,
            W==0,
            X==[],
            'chr sbag_member'(T, O),
            T=suspension(_,A1,_,_,_,_,B1,C1),
            A1=mutable(active),
            B1==F,
            'chr sbag_member'(Y, L),
            Y=suspension(_,D1,_,_,_,_,E1,Z,F1,_),
            D1=mutable(active),
            E1==D,
            F1==F,
            E<Z,
            C1=pragma(rule(C,_,_,_),_,_,_,F),
            C\==[],
            \+memberchk_eq(D,K) ->
            '$chr_translate__remove_constraint_internal'(A, _, J),
            (   J==yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, H, N),
            (   M==yes ->
                '$insert_in_store_occurrence/4'(H)
            ;   true
            ),
            first_occ_in_rule(F, D, E, G),
            multiple_occ_constraints_checked([D|K]),
            (   H=suspension(_,Q,_,S,_,_,_,_,_,_),
                Q=mutable(active),
                S=mutable(N) ->
                'chr update_mutable'(inactive, Q),
                'occurrence/4__7__0'(B, D, E, F, G, H)
            ;   true
            )
        ;   'occurrence/4__7__0'(B, D, E, F, G, H)
        ).
'occurrence/4__7'(A, B, C, D, E) :-
        'occurrence/4__8'(A, B, C, D, E).
'occurrence/4__8'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F), !,
        'occurrence/4__8__0'(F, A, B, C, D, E).
'occurrence/4__8__0'([], A, B, C, D, E) :-
        'occurrence/4__9'(A, B, C, D, E).
'occurrence/4__8__0'([A|B], D, E, F, G, H) :-
        (   A=suspension(_,I,_,_,_,_,K),
            I=mutable(active),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(F, L),
            '$via1_multi_hash_rule/2-1'(F, O),
            '$via1_multi_hash_prev_guard_list/7-1'(F, R),
            'chr sbag_member'(T, R),
            T=suspension(_,W,_,_,_,_,X,Y,_,_,_,_,Z),
            W=mutable(active),
            X==F,
            Y==0,
            Z==[],
            'chr sbag_member'(V, O),
            V=suspension(_,B1,_,_,_,_,C1,D1),
            B1=mutable(active),
            C1==F,
            'chr sbag_member'(A1, L),
            A1=suspension(_,E1,_,_,_,_,F1,P,G1,Q),
            E1=mutable(active),
            F1==D,
            G1==F,
            P<E,
            D1=pragma(rule(C,_,_,_),_,_,_,F),
            C\==[],
            \+memberchk_eq(D,K) ->
            '$chr_translate__remove_constraint_internal'(A, _, J),
            (   J==yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, H, N),
            (   M==yes ->
                '$insert_in_store_occurrence/4'(H)
            ;   true
            ),
            first_occ_in_rule(F, D, P, Q),
            multiple_occ_constraints_checked([D|K]),
            (   H=suspension(_,S,_,U,_,_,_,_,_,_),
                S=mutable(active),
                U=mutable(N) ->
                'chr update_mutable'(inactive, S),
                'occurrence/4__8__0'(B, D, E, F, G, H)
            ;   true
            )
        ;   'occurrence/4__8__0'(B, D, E, F, G, H)
        ).
'occurrence/4__8'(A, B, C, D, E) :-
        'occurrence/4__9'(A, B, C, D, E).
'occurrence/4__9'(A, B, C, D, E) :-
        '$via1_multi_hash_stored_complete/3-1'(A, F), !,
        'occurrence/4__9__0'(F, A, B, C, D, E).
'occurrence/4__9__0'([], A, B, C, D, E) :-
        'occurrence/4__10'(A, B, C, D, E).
'occurrence/4__9__0'([A|B], D, E, F, G, H) :-
        (   A=suspension(_,I,_,_,_,_,J,K,L),
            I=mutable(active),
            J==D,
            E<K,
            '$via1_multi_hash_passive/2-12'(k(F,G), R),
            '$via1_multi_hash_stored/3-2'(E, S),
            'chr sbag_member'(N, S),
            N=suspension(_,W,_,_,_,_,X,Y,Z),
            W=mutable(active),
            X==D,
            Y==E,
            Z==yes,
            (   'chr sbag_member'(V, R),
                V=suspension(_,A1,_,_,_,_,B1,C1),
                A1=mutable(active),
                B1==F,
                C1==G ->
                true
            ) ->
            '$chr_translate__remove_constraint_internal'(A, _, M),
            (   M==yes ->
                '$delete_from_store_stored_complete/3'(A)
            ;   true
            ),
            '$chr_translate__remove_constraint_internal'(N, _, O),
            (   O==yes ->
                '$delete_from_store_stored/3'(N)
            ;   true
            ),
            '$chr_translate__activate_constraint'(P, _, H, Q),
            (   P==yes ->
                '$insert_in_store_occurrence/4'(H)
            ;   true
            ),
            C is L-1,
            stored(D, E, maybe),
            stored_complete(D, K, C),
            (   H=suspension(_,T,_,U,_,_,_,_,_,_),
                T=mutable(active),
                U=mutable(Q) ->
                'chr update_mutable'(inactive, T),
                'occurrence/4__9__0'(B, D, E, F, G, H)
            ;   true
            )
        ;   'occurrence/4__9__0'(B, D, E, F, G, H)
        ).
'occurrence/4__9'(A, B, C, D, E) :-
        'occurrence/4__10'(A, B, C, D, E).
'occurrence/4__10'(A, B, C, D, E) :-
        '$via1_multi_hash_occurrence/4-3'(C, F), !,
        'occurrence/4__10__0'(F, A, B, C, D, E).
'occurrence/4__10__0'([], A, B, C, D, E) :-
        'occurrence/4__11'(A, B, C, D, E).
'occurrence/4__10__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,J,_,_,_,_,I,_,K,_),
            J=mutable(active),
            K==D,
            '$via1_multi_hash_stored_complete/3-1'(I, H) ->
            'occurrence/4__10__1'(H, I, G, A, B, C, D, E, F)
        ;   'occurrence/4__10__0'(A, B, C, D, E, F)
        ).
'occurrence/4__10__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__10__0'(A, B, C, D, E, F).
'occurrence/4__10__1'([J|A], B, C, D, E, F, G, H, I) :-
        (   J=suspension(_,M,_,_,_,_,N,L,O),
            M=mutable(active),
            N==B,
            O==0,
            '$via1_multi_hash_max_occurrence/2-1'(B, K) ->
            'occurrence/4__10__2'(K, L, J, A, B, C, D, E, F, G, H, I)
        ;   'occurrence/4__10__1'(A, B, C, D, E, F, G, H, I)
        ).
'occurrence/4__10__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__10__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__10__2'([B|A], C, D, E, F, G, H, I, J, K, L, M) :-
        (   B=suspension(_,O,_,_,_,_,P,Q),
            O=mutable(active),
            P==F,
            N=t(119,M,G,D,B),
            'chr novel_production'(M, N),
            'chr novel_production'(G, N),
            'chr novel_production'(D, N),
            'chr novel_production'(B, N),
            C=<Q ->
            'chr extend_history'(M, N),
            '$chr_translate__activate_constraint'(R, _, M, S),
            (   R==yes ->
                '$insert_in_store_occurrence/4'(M)
            ;   true
            ),
            passive(K, L),
            (   M=suspension(_,T,_,U,_,_,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'occurrence/4__10__2'(A, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'occurrence/4__10__2'(A, C, D, E, F, G, H, I, J, K, L, M)
        ).
'occurrence/4__10'(A, B, C, D, E) :-
        'occurrence/4__11'(A, B, C, D, E).
'occurrence/4__11'(A, B, C, D, E) :-
        '$via1_multi_hash_stored_complete/3-1'(A, F), !,
        'occurrence/4__11__0'(F, A, B, C, D, E).
'occurrence/4__11__0'([], A, B, C, D, E) :-
        'occurrence/4__12'(A, B, C, D, E).
'occurrence/4__11__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,J,_,_,_,_,K,I,L),
            J=mutable(active),
            K==B,
            L==0,
            '$via1_multi_hash_occurrence/4-3'(D, H) ->
            'occurrence/4__11__1'(H, I, G, A, B, C, D, E, F)
        ;   'occurrence/4__11__0'(A, B, C, D, E, F)
        ).
'occurrence/4__11__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__11__0'(A, B, C, D, E, F).
'occurrence/4__11__1'([J|A], B, C, D, E, F, G, H, I) :-
        (   J=suspension(_,M,_,_,_,_,_,_,N,L),
            M=mutable(active),
            N==G,
            '$via1_multi_hash_max_occurrence/2-1'(E, K) ->
            'occurrence/4__11__2'(K, L, J, A, B, C, D, E, F, G, H, I)
        ;   'occurrence/4__11__1'(A, B, C, D, E, F, G, H, I)
        ).
'occurrence/4__11__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__11__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__11__2'([B|A], C, D, E, F, G, H, I, J, K, L, M) :-
        (   B=suspension(_,O,_,_,_,_,P,Q),
            O=mutable(active),
            P==I,
            N=t(119,G,M,D,B),
            'chr novel_production'(G, N),
            'chr novel_production'(M, N),
            'chr novel_production'(D, N),
            'chr novel_production'(B, N),
            F=<Q ->
            'chr extend_history'(M, N),
            '$chr_translate__activate_constraint'(R, _, M, S),
            (   R==yes ->
                '$insert_in_store_occurrence/4'(M)
            ;   true
            ),
            passive(K, C),
            (   M=suspension(_,T,_,U,_,_,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'occurrence/4__11__2'(A, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'occurrence/4__11__2'(A, C, D, E, F, G, H, I, J, K, L, M)
        ).
'occurrence/4__11'(A, B, C, D, E) :-
        'occurrence/4__12'(A, B, C, D, E).
'occurrence/4__12'(A, B, C, D, E) :-
        '$via1_multi_hash_stored_complete/3-1'(A, F), !,
        'occurrence/4__12__0'(F, A, B, C, D, E).
'occurrence/4__12__0'([], A, B, C, D, E) :-
        'occurrence/4__13'(A, B, C, D, E).
'occurrence/4__12__0'([B|A], C, D, E, F, G) :-
        (   B=suspension(_,I,_,_,_,_,J,K,_),
            I=mutable(active),
            J==C,
            H=t(128,B,G),
            'chr novel_production'(B, H),
            'chr novel_production'(G, H),
            D>K ->
            'chr extend_history'(G, H),
            '$chr_translate__activate_constraint'(L, _, G, M),
            (   L==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            passive(E, F),
            (   G=suspension(_,N,_,O,_,_,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'occurrence/4__12__0'(A, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__12__0'(A, C, D, E, F, G)
        ).
'occurrence/4__12'(A, B, C, D, E) :-
        'occurrence/4__13'(A, B, C, D, E).
'occurrence/4__13'(A, B, C, D, E) :-
        '$via1_multi_hash_functional_dependency/4-12'(k(A,C), F), !,
        'occurrence/4__13__0'(F, A, B, C, D, E).
'occurrence/4__13__0'([], A, B, C, D, E) :-
        'occurrence/4__14'(A, B, C, D, E).
'occurrence/4__13__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,_,_,J,K,L,M),
            H=mutable(active),
            J==C,
            K==E,
            E>1,
            '$via1_multi_hash_allocation_occurrence/2-1'(C, P),
            'chr sbag_member'(R, P),
            R=suspension(_,U,_,_,_,_,V,Q),
            U=mutable(active),
            V==C,
            Q>D ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_functional_dependency/4'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(N, _, G, O),
            (   N==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            functional_dependency(C, 1, L, M),
            (   G=suspension(_,S,_,T,_,_,_,_,_,_),
                S=mutable(active),
                T=mutable(O) ->
                'chr update_mutable'(inactive, S),
                'occurrence/4__13__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__13__0'(B, C, D, E, F, G)
        ).
'occurrence/4__13'(A, B, C, D, E) :-
        'occurrence/4__14'(A, B, C, D, E).
'occurrence/4__14'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
        'occurrence/4__14__0'(F, A, B, C, D, E).
'occurrence/4__14__0'([], A, B, C, D, E) :-
        'occurrence/4__15'(A, B, C, D, E).
'occurrence/4__14__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,I,_,_,_,_,_),
            I=mutable(active),
            '$via1_multi_hash_rule/2-1'(D, H) ->
            'occurrence/4__14__1'(H, G, A, B, C, D, E, F)
        ;   'occurrence/4__14__0'(A, B, C, D, E, F)
        ).
'occurrence/4__14__1'([], _, A, B, C, D, E, F) :-
        'occurrence/4__14__0'(A, B, C, D, E, F).
'occurrence/4__14__1'([I|A], B, C, D, E, F, G, H) :-
        (   I=suspension(_,L,_,_,_,_,M,K),
            L=mutable(active),
            M==F,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', J) ->
            'occurrence/4__14__2'(J, K, I, A, B, C, D, E, F, G, H)
        ;   'occurrence/4__14__1'(A, B, C, D, E, F, G, H)
        ).
'occurrence/4__14__2'([], _, _, A, B, C, D, E, F, G, H) :-
        'occurrence/4__14__1'(A, B, C, D, E, F, G, H).
'occurrence/4__14__2'([B|A], J, K, L, M, N, O, P, Q, R, S) :-
        (   B=suspension(_,U,_,_,_,_,V),
            U=mutable(active),
            nonvar(V),
            V=odom(D,E),
            nonvar(D),
            D=occ(G,H),
            G==O,
            H==P,
            T=t(177,M,K,S,B),
            'chr novel_production'(M, T),
            'chr novel_production'(K, T),
            'chr novel_production'(S, T),
            'chr novel_production'(B, T),
            J=pragma(rule(_,_,_,_),ids(I,_),_,_,_),
            memberchk_eq(R, I),
            is_passive(Q, R) ->
            'chr extend_history'(S, T),
            '$chr_translate__activate_constraint'(W, _, S, X),
            (   W==yes ->
                '$insert_in_store_occurrence/4'(S)
            ;   true
            ),
            C is P+1,
            F=odom(occ(O,C),E),
            call_pattern(F),
            depends_on(odom(occ(O,P),E), F),
            (   S=suspension(_,Y,_,Z,_,_,_,_,_,_),
                Y=mutable(active),
                Z=mutable(X) ->
                'chr update_mutable'(inactive, Y),
                'occurrence/4__14__2'(A, J, K, L, M, N, O, P, Q, R, S)
            ;   true
            )
        ;   'occurrence/4__14__2'(A, J, K, L, M, N, O, P, Q, R, S)
        ).
'occurrence/4__14'(A, B, C, D, E) :-
        'occurrence/4__15'(A, B, C, D, E).
'occurrence/4__15'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
        'occurrence/4__15__0'(F, A, B, C, D, E).
'occurrence/4__15__0'([], A, B, C, D, E) :-
        'occurrence/4__16'(A, B, C, D, E).
'occurrence/4__15__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,J,_,_,_,_,I),
            J=mutable(active),
            '$via1_multi_hash_rule/2-1'(D, H) ->
            'occurrence/4__15__1'(H, I, G, A, B, C, D, E, F)
        ;   'occurrence/4__15__0'(A, B, C, D, E, F)
        ).
'occurrence/4__15__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__15__0'(A, B, C, D, E, F).
'occurrence/4__15__1'([J|A], B, C, D, E, F, G, H, I) :-
        (   J=suspension(_,M,_,_,_,_,N,L),
            M=mutable(active),
            N==G,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', K) ->
            'occurrence/4__15__2'(K, L, J, A, B, C, D, E, F, G, H, I)
        ;   'occurrence/4__15__1'(A, B, C, D, E, F, G, H, I)
        ).
'occurrence/4__15__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__15__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__15__2'([B|A], T, U, V, W, X, Y, Z, A1, B1, C1, D1) :-
        (   B=suspension(_,F1,_,_,_,_,G1),
            F1=mutable(active),
            nonvar(G1),
            G1=odom(C,D),
            nonvar(C),
            C=occ(G,H),
            G==Z,
            H==A1,
            E1=t(178,X,U,D1,B),
            'chr novel_production'(X, E1),
            'chr novel_production'(U, E1),
            'chr novel_production'(D1, E1),
            'chr novel_production'(B, E1),
            T=pragma(rule(I,J,K,L),ids(M,_),_,_,_),
            memberchk_eq(C1, M),
            \+is_passive(B1,C1) ->
            'chr extend_history'(D1, E1),
            '$chr_translate__activate_constraint'(H1, _, D1, I1),
            (   H1==yes ->
                '$insert_in_store_occurrence/4'(D1)
            ;   true
            ),
            once(select2(C1,_,M,I,_,E)),
            ai_observation_abstract_constraints(E, W, F),
            ai_observation_observe_list(odom([],D), F, odom([],N)),
            ai_observation_abstract_constraints(J, W, O),
            ai_observation_observe_list(odom([],N), O, odom([],P)),
            ai_observation_abstract_goal_(I, J, K, L, W, Q),
            call_pattern(odom(Q,P)),
            R is A1+1,
            S=odom(occ(Z,R),D),
            call_pattern(S),
            depends_on_as(odom(occ(Z,A1),D), odom(Q,P), S),
            final_answer_pattern(odom(occ(Z,A1),D), odom([],D)),
            (   D1=suspension(_,J1,_,K1,_,_,_,_,_,_),
                J1=mutable(active),
                K1=mutable(I1) ->
                'chr update_mutable'(inactive, J1),
                'occurrence/4__15__2'(A, T, U, V, W, X, Y, Z, A1, B1, C1, D1)
            ;   true
            )
        ;   'occurrence/4__15__2'(A, T, U, V, W, X, Y, Z, A1, B1, C1, D1)
        ).
'occurrence/4__15'(A, B, C, D, E) :-
        'occurrence/4__16'(A, B, C, D, E).
'occurrence/4__16'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
        'occurrence/4__16__0'(F, A, B, C, D, E).
'occurrence/4__16__0'([], A, B, C, D, E) :-
        'occurrence/4__17'(A, B, C, D, E).
'occurrence/4__16__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,I,_,_,_,_,_),
            I=mutable(active),
            '$via1_multi_hash_rule/2-1'(D, H) ->
            'occurrence/4__16__1'(H, G, A, B, C, D, E, F)
        ;   'occurrence/4__16__0'(A, B, C, D, E, F)
        ).
'occurrence/4__16__1'([], _, A, B, C, D, E, F) :-
        'occurrence/4__16__0'(A, B, C, D, E, F).
'occurrence/4__16__1'([I|A], B, C, D, E, F, G, H) :-
        (   I=suspension(_,L,_,_,_,_,M,K),
            L=mutable(active),
            M==F,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', J) ->
            'occurrence/4__16__2'(J, K, I, A, B, C, D, E, F, G, H)
        ;   'occurrence/4__16__1'(A, B, C, D, E, F, G, H)
        ).
'occurrence/4__16__2'([], _, _, A, B, C, D, E, F, G, H) :-
        'occurrence/4__16__1'(A, B, C, D, E, F, G, H).
'occurrence/4__16__2'([B|A], J, K, L, M, N, O, P, Q, R, S) :-
        (   B=suspension(_,U,_,_,_,_,V),
            U=mutable(active),
            nonvar(V),
            V=odom(D,E),
            nonvar(D),
            D=occ(G,H),
            G==O,
            H==P,
            T=t(180,M,K,S,B),
            'chr novel_production'(M, T),
            'chr novel_production'(K, T),
            'chr novel_production'(S, T),
            'chr novel_production'(B, T),
            J=pragma(rule(_,_,_,_),ids(_,I),_,_,_),
            memberchk_eq(R, I),
            is_passive(Q, R) ->
            'chr extend_history'(S, T),
            '$chr_translate__activate_constraint'(W, _, S, X),
            (   W==yes ->
                '$insert_in_store_occurrence/4'(S)
            ;   true
            ),
            C is P+1,
            F=odom(occ(O,C),E),
            call_pattern(F),
            final_answer_pattern(odom(occ(O,P),E), odom([],E)),
            depends_on(odom(occ(O,P),E), F),
            (   S=suspension(_,Y,_,Z,_,_,_,_,_,_),
                Y=mutable(active),
                Z=mutable(X) ->
                'chr update_mutable'(inactive, Y),
                'occurrence/4__16__2'(A, J, K, L, M, N, O, P, Q, R, S)
            ;   true
            )
        ;   'occurrence/4__16__2'(A, J, K, L, M, N, O, P, Q, R, S)
        ).
'occurrence/4__16'(A, B, C, D, E) :-
        'occurrence/4__17'(A, B, C, D, E).
'occurrence/4__17'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
        'occurrence/4__17__0'(F, A, B, C, D, E).
'occurrence/4__17__0'([], A, B, C, D, E) :-
        'occurrence/4__18'(A, B, C, D, E).
'occurrence/4__17__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,J,_,_,_,_,I),
            J=mutable(active),
            '$via1_multi_hash_rule/2-1'(D, H) ->
            'occurrence/4__17__1'(H, I, G, A, B, C, D, E, F)
        ;   'occurrence/4__17__0'(A, B, C, D, E, F)
        ).
'occurrence/4__17__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__17__0'(A, B, C, D, E, F).
'occurrence/4__17__1'([J|A], B, C, D, E, F, G, H, I) :-
        (   J=suspension(_,M,_,_,_,_,N,L),
            M=mutable(active),
            N==G,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', K) ->
            'occurrence/4__17__2'(K, L, J, A, B, C, D, E, F, G, H, I)
        ;   'occurrence/4__17__1'(A, B, C, D, E, F, G, H, I)
        ).
'occurrence/4__17__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__17__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__17__2'([B|A], V, W, X, Y, Z, A1, B1, C1, D1, E1, F1) :-
        (   B=suspension(_,H1,_,_,_,_,I1),
            H1=mutable(active),
            nonvar(I1),
            I1=odom(C,D),
            nonvar(C),
            C=occ(G,H),
            G==B1,
            H==C1,
            G1=t(181,Z,W,F1,B),
            'chr novel_production'(Z, G1),
            'chr novel_production'(W, G1),
            'chr novel_production'(F1, G1),
            'chr novel_production'(B, G1),
            V=pragma(rule(I,J,K,L),ids(_,M),_,_,_),
            memberchk_eq(E1, M),
            \+is_passive(D1,E1) ->
            'chr extend_history'(F1, G1),
            '$chr_translate__activate_constraint'(J1, _, F1, K1),
            (   J1==yes ->
                '$insert_in_store_occurrence/4'(F1)
            ;   true
            ),
            once(select2(E1,_,M,J,_,E)),
            ai_observation_abstract_constraints(E, Y, F),
            ai_observation_observe_list(odom([],D), F, odom([],N)),
            ai_observation_abstract_constraints(I, Y, O),
            ai_observation_observe_list(odom([],N), O, odom([],P)),
            ord_add_element(P, B1, Q),
            ai_observation_abstract_goal_(I, J, K, L, Y, R),
            call_pattern(odom(R,Q)),
            (   ord_memberchk(B1, P) ->
                T=no
            ;   T=yes
            ),
            S is C1+1,
            U=odom(occ(B1,S),D),
            call_pattern(U),
            depends_on_ap(odom(occ(B1,C1),D), odom(R,Q), U, T),
            (   F1=suspension(_,L1,_,M1,_,_,_,_,_,_),
                L1=mutable(active),
                M1=mutable(K1) ->
                'chr update_mutable'(inactive, L1),
                'occurrence/4__17__2'(A, V, W, X, Y, Z, A1, B1, C1, D1, E1, F1)
            ;   true
            )
        ;   'occurrence/4__17__2'(A, V, W, X, Y, Z, A1, B1, C1, D1, E1, F1)
        ).
'occurrence/4__17'(A, B, C, D, E) :-
        'occurrence/4__18'(A, B, C, D, E).
'occurrence/4__18'(_, _, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_occurrence/4'(A)
        ;   true
        ).
get_occurrence(A, B, C, D) :-
        'get_occurrence/4__0'(A, B, C, D, _).
'get_occurrence/4__0'(A, B, C, D, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, E),
        'chr sbag_member'(F, E),
        F=suspension(_,G,_,_,_,_,H,I,J,K),
        G=mutable(active),
        H==A,
        I==B, !,
        J=C,
        K=D.
'get_occurrence/4__0'(_, _, _, _, _) :- !,
        chr_error(internal, 'get_occurrence: missing occurrence ~w:~w\n', []).
max_occurrence(A, B) :-
        'max_occurrence/2__0'(A, B, _).
'max_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        (   'chr sbag_member'(E, C),
            E=suspension(_,F,_,_,_,_,G,D),
            F=mutable(active),
            G==A ->
            true
        ),
        D>=B, !.
'max_occurrence/2__0'(A, B, C) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'max_occurrence/2__0'(A,B,C), C, max_occurrence(A,B), [A,B]),
        'max_occurrence/2__0__0'(D, A, B, C).
'max_occurrence/2__0__0'([], A, B, C) :-
        'max_occurrence/2__1'(A, B, C).
'max_occurrence/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,G,_,_,_,_,F,H),
            G=mutable(active),
            F==C ->
            (   D>=H ->
                '$chr_translate__remove_constraint_internal'(A, _, I),
                (   I==yes ->
                    '$delete_from_store_max_occurrence/2'(A)
                ;   true
                ),
                'max_occurrence/2__0__0'([], C, D, E)
            ;   'max_occurrence/2__0__0'([], C, D, E)
            )
        ;   'max_occurrence/2__0__0'(B, C, D, E)
        ).
'max_occurrence/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'max_occurrence/2__0'(A,B,C), C, max_occurrence(A,B), [A,B]),
        'max_occurrence/2__1'(A, B, C).
'max_occurrence/2__1'(A, B, C) :-
        '$via1_multi_hash_stored_complete/3-1'(A, D), !,
        'max_occurrence/2__1__0'(D, A, B, C).
'max_occurrence/2__1__0'([], A, B, C) :-
        'max_occurrence/2__2'(A, B, C).
'max_occurrence/2__1__0'([E|A], B, C, D) :-
        (   E=suspension(_,H,_,_,_,_,I,G,J),
            H=mutable(active),
            I==B,
            J==0,
            '$via1_multi_hash_occurrence/4-1'(B, F) ->
            'max_occurrence/2__1__1'(F, G, E, A, B, C, D)
        ;   'max_occurrence/2__1__0'(A, B, C, D)
        ).
'max_occurrence/2__1__1'([], _, _, A, B, C, D) :-
        'max_occurrence/2__1__0'(A, B, C, D).
'max_occurrence/2__1__1'([H|A], B, C, D, E, F, G) :-
        (   H=suspension(_,K,_,_,_,_,L,_,J,_),
            K=mutable(active),
            L==E,
            '$via1_multi_hash_occurrence/4-3'(J, I) ->
            'max_occurrence/2__1__2'(I, J, H, A, B, C, D, E, F, G)
        ;   'max_occurrence/2__1__1'(A, B, C, D, E, F, G)
        ).
'max_occurrence/2__1__2'([], _, _, A, B, C, D, E, F, G) :-
        'max_occurrence/2__1__1'(A, B, C, D, E, F, G).
'max_occurrence/2__1__2'([B|A], C, D, E, F, G, H, I, J, K) :-
        (   B=suspension(_,M,_,_,_,_,_,_,N,O),
            M=mutable(active),
            B\==D,
            N==C,
            L=t(119,G,D,B,K),
            'chr novel_production'(G, L),
            'chr novel_production'(D, L),
            'chr novel_production'(B, L),
            'chr novel_production'(K, L),
            F=<J ->
            'chr extend_history'(K, L),
            '$chr_translate__activate_constraint'(P, _, K, Q),
            (   P==yes ->
                '$insert_in_store_max_occurrence/2'(K)
            ;   true
            ),
            passive(C, O),
            (   K=suspension(_,R,_,S,_,_,_,_),
                R=mutable(active),
                S=mutable(Q) ->
                'chr update_mutable'(inactive, R),
                'max_occurrence/2__1__2'(A, C, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'max_occurrence/2__1__2'(A, C, D, E, F, G, H, I, J, K)
        ).
'max_occurrence/2__1'(A, B, C) :-
        'max_occurrence/2__2'(A, B, C).
'max_occurrence/2__2'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', D), !,
        'max_occurrence/2__2__0'(D, A, B, C).
'max_occurrence/2__2__0'([], A, B, C) :-
        'max_occurrence/2__3'(A, B, C).
'max_occurrence/2__2__0'([B|A], G, H, I) :-
        (   B=suspension(_,K,_,_,_,_,L),
            K=mutable(active),
            nonvar(L),
            L=odom(C,D),
            nonvar(C),
            C=occ(E,F),
            E==G,
            J=t(175,B,I),
            'chr novel_production'(B, J),
            'chr novel_production'(I, J),
            F>H ->
            'chr extend_history'(I, J),
            '$chr_translate__activate_constraint'(M, _, I, N),
            (   M==yes ->
                '$insert_in_store_max_occurrence/2'(I)
            ;   true
            ),
            final_answer_pattern(odom(occ(G,F),D), odom([],D)),
            (   I=suspension(_,O,_,P,_,_,_,_),
                O=mutable(active),
                P=mutable(N) ->
                'chr update_mutable'(inactive, O),
                'max_occurrence/2__2__0'(A, G, H, I)
            ;   true
            )
        ;   'max_occurrence/2__2__0'(A, G, H, I)
        ).
'max_occurrence/2__2'(A, B, C) :-
        'max_occurrence/2__3'(A, B, C).
'max_occurrence/2__3'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_max_occurrence/2'(A)
        ;   true
        ).
get_max_occurrence(A, B) :-
        'get_max_occurrence/2__0'(A, B, _).
'get_max_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        (   'chr sbag_member'(E, C),
            E=suspension(_,F,_,_,_,_,G,D),
            F=mutable(active),
            G==A ->
            true
        ), !,
        B=D.
'get_max_occurrence/2__0'(A, _, _) :- !,
        chr_error(internal, 'get_max_occurrence: missing max occurrence for ~w\n', [A]).
allocation_occurrence(A, B) :-
        'allocation_occurrence/2__0'(A, B, _).
'allocation_occurrence/2__0'(B, C, _) :-
        '$via1_multi_hash_occurrence/4-2'(C, D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_,G,H,I,J),
        F=mutable(active),
        G==B,
        H==C,
        '$via1_multi_hash_passive/2-12'(k(I,J), K),
        (   'chr sbag_member'(L, K),
            L=suspension(_,M,_,_,_,_,N,O),
            M=mutable(active),
            N==I,
            O==J ->
            true
        ), !,
        A is C+1,
        allocation_occurrence(B, A).
'allocation_occurrence/2__0'(C, D, _) :-
        '$via1_multi_hash_occurrence/4-2'(D, E),
        'chr sbag_member'(F, E),
        F=suspension(_,G,_,_,_,_,H,I,J,K),
        G=mutable(active),
        H==C,
        I==D,
        '$via1_multi_hash_rule/2-1'(J, L),
        'chr sbag_member'(M, L),
        M=suspension(_,N,_,_,_,_,O,P),
        N=mutable(active),
        O==J,
        P=pragma(_,ids(A,_),_,_,_),
        member(K, A), !,
        B is D+1,
        allocation_occurrence(C, B).
'allocation_occurrence/2__0'(B, C, _) :-
        '$via1_multi_hash_occurrence/4-2'(C, D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_,G,H,I,_),
        F=mutable(active),
        G==B,
        H==C,
        '$via1_multi_hash_rule/2-1'(I, J),
        'chr sbag_member'(K, J),
        K=suspension(_,L,_,_,_,_,M,N),
        L=mutable(active),
        M==I,
        N=pragma(rule(_,_,_,true),_,_,_,_), !,
        A is C+1,
        allocation_occurrence(B, A).
'allocation_occurrence/2__0'(B, C, _) :-
        '$via1_multi_hash_occurrence/4-2'(C, D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_,G,H,I,_),
        F=mutable(active),
        G==B,
        H==C,
        '$via1_multi_hash_rule/2-1'(I, J),
        'chr sbag_member'(K, J),
        K=suspension(_,L,_,_,_,_,M,N),
        L=mutable(active),
        M==I,
        N=pragma(rule([_|_],_,_,_),_,_,_,_),
        \+is_observed(B,C), !,
        A is C+1,
        allocation_occurrence(B, A).
'allocation_occurrence/2__0'(B, C, _) :-
        '$via1_multi_hash_occurrence/4-2'(C, D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_,G,H,I,_),
        F=mutable(active),
        G==B,
        H==C,
        '$via1_multi_hash_least_occurrence/2-1'(I, J),
        '$via1_multi_hash_rule/2-1'(I, K),
        'chr sbag_member'(L, K),
        L=suspension(_,M,_,_,_,_,N,O),
        M=mutable(active),
        N==I,
        'chr sbag_member'(P, J),
        P=suspension(_,Q,_,_,_,_,R,S),
        Q=mutable(active),
        R==I,
        S==[],
        O=pragma(rule([],_,_,_),_,_,_,_),
        \+is_observed(B,C), !,
        A is C+1,
        allocation_occurrence(B, A).
'allocation_occurrence/2__0'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'allocation_occurrence/2__0'(A,B,C), C, allocation_occurrence(A,B), [A,B]),
        'allocation_occurrence/2__0__0'(D, A, B, C).
'allocation_occurrence/2__0__0'([], A, B, C) :-
        'allocation_occurrence/2__1'(A, B, C).
'allocation_occurrence/2__0__0'([A|B], E, F, G) :-
        (   A=suspension(_,H,_,_,_,_,J,K),
            H=mutable(active),
            nonvar(K),
            K=[C|D],
            '$via1_multi_hash_occurrence/4-34'(k(J,C), L),
            '$via1_multi_hash_rule/2-1'(J, O),
            'chr sbag_member'(P, O),
            P=suspension(_,U,_,_,_,_,V,_),
            U=mutable(active),
            V==J,
            'chr sbag_member'(R, L),
            R=suspension(_,W,_,_,_,_,X,S,Y,Z),
            W=mutable(active),
            X==E,
            Y==J,
            Z==C,
            F>=S,
            \+may_trigger(E) ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, G, N),
            (   M==yes ->
                '$insert_in_store_allocation_occurrence/2'(G)
            ;   true
            ),
            least_occurrence(J, D),
            (   G=suspension(_,Q,_,T,_,_,_,_),
                Q=mutable(active),
                T=mutable(N) ->
                'chr update_mutable'(inactive, Q),
                'allocation_occurrence/2__0__0'(B, E, F, G)
            ;   true
            )
        ;   'allocation_occurrence/2__0__0'(B, E, F, G)
        ).
'allocation_occurrence/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'allocation_occurrence/2__0'(A,B,C), C, allocation_occurrence(A,B), [A,B]),
        'allocation_occurrence/2__1'(A, B, C).
'allocation_occurrence/2__1'(A, B, C) :-
        '$via1_multi_hash_functional_dependency/4-1'(A, D), !,
        'allocation_occurrence/2__1__0'(D, A, B, C).
'allocation_occurrence/2__1__0'([], A, B, C) :-
        'allocation_occurrence/2__2'(A, B, C).
'allocation_occurrence/2__1__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,G,I,J,K),
            F=mutable(active),
            G==C,
            I>1,
            '$via1_multi_hash_occurrence/4-3'(I, N),
            'chr sbag_member'(P, N),
            P=suspension(_,S,_,_,_,_,T,O,U,_),
            S=mutable(active),
            T==C,
            U==I,
            D>O ->
            '$chr_translate__remove_constraint_internal'(A, _, H),
            (   H==yes ->
                '$delete_from_store_functional_dependency/4'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(L, _, E, M),
            (   L==yes ->
                '$insert_in_store_allocation_occurrence/2'(E)
            ;   true
            ),
            functional_dependency(C, 1, J, K),
            (   E=suspension(_,Q,_,R,_,_,_,_),
                Q=mutable(active),
                R=mutable(M) ->
                'chr update_mutable'(inactive, Q),
                'allocation_occurrence/2__1__0'(B, C, D, E)
            ;   true
            )
        ;   'allocation_occurrence/2__1__0'(B, C, D, E)
        ).
'allocation_occurrence/2__1'(A, B, C) :-
        'allocation_occurrence/2__2'(A, B, C).
'allocation_occurrence/2__2'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_allocation_occurrence/2'(A)
        ;   true
        ).
get_allocation_occurrence(A, B) :-
        'get_allocation_occurrence/2__0'(A, B, _).
'get_allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_allocation_occurrence/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        B=G.
'get_allocation_occurrence/2__0'(_, A, _) :- !,
        chr_pp_flag(late_allocation, off),
        A=0.
rule(A, B) :-
        'rule/2__0'(A, B, _).
'rule/2__0'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'rule/2__0'(A,B,C), C, rule(A,B), [A,B]),
        'rule/2__0__0'(D, A, B, C).
'rule/2__0__0'([], A, B, C) :-
        'rule/2__1'(A, B, C).
'rule/2__0__0'([A|B], E, F, G) :-
        (   A=suspension(_,H,_,_,_,_,K,L),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(E, I),
            'chr sbag_member'(O, I),
            O=suspension(_,Q,_,_,_,_,R,S,T,P),
            Q=mutable(active),
            R==K,
            S==L,
            T==E,
            F=pragma(_,ids(D,_),_,_,_),
            member(P, D) ->
            '$chr_translate__remove_constraint_internal'(A, _, J),
            (   J==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, G, N),
            (   M==yes ->
                '$insert_in_store_rule/2'(G)
            ;   true
            ),
            C is L+1,
            allocation_occurrence(K, C),
            (   G=suspension(_,U,_,V,_,_,_,_),
                U=mutable(active),
                V=mutable(N) ->
                'chr update_mutable'(inactive, U),
                'rule/2__0__0'(B, E, F, G)
            ;   true
            )
        ;   'rule/2__0__0'(B, E, F, G)
        ).
'rule/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'rule/2__0'(A,B,C), C, rule(A,B), [A,B]),
        'rule/2__1'(A, B, C).
'rule/2__1'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        'rule/2__1__0'(D, A, B, C).
'rule/2__1__0'([], A, B, C) :-
        'rule/2__2'(A, B, C).
'rule/2__1__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,J,K),
            G=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(D, H),
            'chr sbag_member'(N, H),
            N=suspension(_,O,_,_,_,_,P,Q,R,_),
            O=mutable(active),
            P==J,
            Q==K,
            R==D,
            E=pragma(rule(_,_,_,true),_,_,_,_) ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(L, _, F, M),
            (   L==yes ->
                '$insert_in_store_rule/2'(F)
            ;   true
            ),
            C is K+1,
            allocation_occurrence(J, C),
            (   F=suspension(_,S,_,T,_,_,_,_),
                S=mutable(active),
                T=mutable(M) ->
                'chr update_mutable'(inactive, S),
                'rule/2__1__0'(B, D, E, F)
            ;   true
            )
        ;   'rule/2__1__0'(B, D, E, F)
        ).
'rule/2__1'(A, B, C) :-
        'rule/2__2'(A, B, C).
'rule/2__2'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        'rule/2__2__0'(D, A, B, C).
'rule/2__2__0'([], A, B, C) :-
        'rule/2__3'(A, B, C).
'rule/2__2__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,J,K),
            G=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(D, H),
            'chr sbag_member'(N, H),
            N=suspension(_,O,_,_,_,_,P,Q,R,_),
            O=mutable(active),
            P==J,
            Q==K,
            R==D,
            E=pragma(rule([_|_],_,_,_),_,_,_,_),
            \+is_observed(J,K) ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(L, _, F, M),
            (   L==yes ->
                '$insert_in_store_rule/2'(F)
            ;   true
            ),
            C is K+1,
            allocation_occurrence(J, C),
            (   F=suspension(_,S,_,T,_,_,_,_),
                S=mutable(active),
                T=mutable(M) ->
                'chr update_mutable'(inactive, S),
                'rule/2__2__0'(B, D, E, F)
            ;   true
            )
        ;   'rule/2__2__0'(B, D, E, F)
        ).
'rule/2__2'(A, B, C) :-
        'rule/2__3'(A, B, C).
'rule/2__3'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        'rule/2__3__0'(D, A, B, C).
'rule/2__3__0'([], A, B, C) :-
        'rule/2__4'(A, B, C).
'rule/2__3__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,J,K),
            G=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(D, H),
            '$via1_multi_hash_least_occurrence/2-1'(D, L),
            'chr sbag_member'(O, L),
            O=suspension(_,R,_,_,_,_,S,T),
            R=mutable(active),
            S==D,
            T==[],
            'chr sbag_member'(P, H),
            P=suspension(_,V,_,_,_,_,W,X,Y,_),
            V=mutable(active),
            W==J,
            X==K,
            Y==D,
            E=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(J,K) ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, F, N),
            (   M==yes ->
                '$insert_in_store_rule/2'(F)
            ;   true
            ),
            C is K+1,
            allocation_occurrence(J, C),
            (   F=suspension(_,Q,_,U,_,_,_,_),
                Q=mutable(active),
                U=mutable(N) ->
                'chr update_mutable'(inactive, Q),
                'rule/2__3__0'(B, D, E, F)
            ;   true
            )
        ;   'rule/2__3__0'(B, D, E, F)
        ).
'rule/2__3'(A, B, C) :-
        'rule/2__4'(A, B, C).
'rule/2__4'(A, B, C) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, D), !,
        'rule/2__4__0'(D, A, B, C).
'rule/2__4__0'([], A, B, C) :-
        'rule/2__5'(A, B, C).
'rule/2__4__0'([A|B], E, F, G) :-
        (   A=suspension(_,H,_,_,_,_,J,K),
            H=mutable(active),
            J==E,
            nonvar(K),
            K=[C|D],
            '$via1_multi_hash_occurrence/4-34'(k(E,C), L),
            'chr sbag_member'(O, L),
            O=suspension(_,S,_,_,_,_,P,T,U,V),
            S=mutable(active),
            U==E,
            V==C,
            '$via1_multi_hash_allocation_occurrence/2-1'(P, Q),
            'chr sbag_member'(W, Q),
            W=suspension(_,Z,_,_,_,_,A1,X),
            Z=mutable(active),
            A1==P,
            X>=T,
            \+may_trigger(P) ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, G, N),
            (   M==yes ->
                '$insert_in_store_rule/2'(G)
            ;   true
            ),
            least_occurrence(E, D),
            (   G=suspension(_,R,_,Y,_,_,_,_),
                R=mutable(active),
                Y=mutable(N) ->
                'chr update_mutable'(inactive, R),
                'rule/2__4__0'(B, E, F, G)
            ;   true
            )
        ;   'rule/2__4__0'(B, E, F, G)
        ).
'rule/2__4'(A, B, C) :-
        'rule/2__5'(A, B, C).
'rule/2__5'(A, B, C) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, D), !,
        'rule/2__5__0'(D, A, B, C).
'rule/2__5__0'([], A, B, C) :-
        'rule/2__6'(A, B, C).
'rule/2__5__0'([A|B], E, F, G) :-
        (   A=suspension(_,H,_,_,_,_,J,K),
            H=mutable(active),
            J==E,
            nonvar(K),
            K=[C|D],
            '$via1_multi_hash_passive/2-12'(k(E,C), L),
            (   'chr sbag_member'(O, L),
                O=suspension(_,Q,_,_,_,_,R,S),
                Q=mutable(active),
                R==E,
                S==C ->
                true
            ) ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, G, N),
            (   M==yes ->
                '$insert_in_store_rule/2'(G)
            ;   true
            ),
            least_occurrence(E, D),
            (   G=suspension(_,P,_,T,_,_,_,_),
                P=mutable(active),
                T=mutable(N) ->
                'chr update_mutable'(inactive, P),
                'rule/2__5__0'(B, E, F, G)
            ;   true
            )
        ;   'rule/2__5__0'(B, E, F, G)
        ).
'rule/2__5'(A, B, C) :-
        'rule/2__6'(A, B, C).
'rule/2__6'(B, C, D) :-
        'chr novel_production'(D, 52),
        C=pragma(rule([],_,_,_),ids([],A),_,_,_), !,
        'chr extend_history'(D, 52),
        '$chr_translate__activate_constraint'(E, _, D, F),
        (   E==yes ->
            '$insert_in_store_rule/2'(D)
        ;   true
        ),
        least_occurrence(B, A),
        (   D=suspension(_,G,_,H,_,_,_,_),
            G=mutable(active),
            H=mutable(F) ->
            'chr update_mutable'(inactive, G),
            'rule/2__7'(B, C, D)
        ;   true
        ).
'rule/2__6'(A, B, C) :-
        'rule/2__7'(A, B, C).
'rule/2__7'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-2'(A, D), !,
        'rule/2__7__0'(D, A, B, C).
'rule/2__7__0'([], A, B, C) :-
        'rule/2__8'(A, B, C).
'rule/2__7__0'([A|B], V, W, X) :-
        (   A=suspension(_,Y,_,_,_,_,B1,Z,C1,D1,E1,F1,G1),
            Y=mutable(active),
            Z==V,
            W=pragma(rule(E,F,G,_),_,_,_,V),
            E\==[],
            append(E, F, H),
            make_head_matchings_explicit(H, J, K),
            term_variables(J+C1, M),
            find_with_var_identity(O, M, chr_translate:head_subset(J,C1,O), P),
            sort(P, R),
            R\=[] ->
            '$chr_translate__remove_constraint_internal'(A, _, A1),
            (   A1==yes ->
                '$delete_from_store_prev_guard_list/7'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(H1, _, X, I1),
            (   H1==yes ->
                '$insert_in_store_rule/2'(X)
            ;   true
            ),
            compute_derived_info(K, R, J, H, G, F1, C1, G1, C, D),
            append(E1, C, I),
            list2conj(I, L),
            conj2list(L, N),
            append(D, G1, Q),
            list2conj(Q, S),
            conj2list(S, T),
            U is V-1,
            prev_guard_list(B1, U, C1, D1, N, F1, T),
            (   X=suspension(_,J1,_,K1,_,_,_,_),
                J1=mutable(active),
                K1=mutable(I1) ->
                'chr update_mutable'(inactive, J1),
                'rule/2__7__0'(B, V, W, X)
            ;   true
            )
        ;   'rule/2__7__0'(B, V, W, X)
        ).
'rule/2__7'(A, B, C) :-
        'rule/2__8'(A, B, C).
'rule/2__8'(J, K, L) :-
        '$via1_multi_hash_prev_guard_list/7-1'(J, M),
        'chr sbag_member'(N, M),
        N=suspension(_,O,_,_,_,_,P,Q,R,S,T,U,V),
        O=mutable(active),
        P==J,
        Q==0,
        V==[],
        K=pragma(rule(D,E,S,F),A,B,C,J),
        S\==true,
        append(U, T, G),
        simplify_guard(S, F, G, H, I),
        S\==H, !,
        '$chr_translate__remove_constraint_internal'(N, _, W),
        (   W==yes ->
            '$delete_from_store_prev_guard_list/7'(N)
        ;   true
        ),
        (   var(L) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(L, _, X),
            (   X==yes ->
                '$delete_from_store_rule/2'(L)
            ;   true
            )
        ),
        rule(J, pragma(rule(D,E,H,I),A,B,C,J)),
        prev_guard_list(J, 0, R, H, T, U, []).
'rule/2__8'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, D), !,
        'rule/2__8__0'(D, A, B, C).
'rule/2__8__0'([], A, B, C) :-
        'rule/2__9'(A, B, C).
'rule/2__8__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,I,J,_,K,L,M,N),
            G=mutable(active),
            I==D,
            J==0,
            N==[],
            chr_pp_flag(check_impossible_rules, on),
            E=pragma(rule(_,_,K,_),_,_,_,D),
            append(M, L, C),
            guard_entailment:entails_guard(C,fail) ->
            '$chr_translate__remove_constraint_internal'(A, _, H),
            (   H==yes ->
                '$delete_from_store_prev_guard_list/7'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(O, _, F, P),
            (   O==yes ->
                '$insert_in_store_rule/2'(F)
            ;   true
            ),
            chr_warning(weird_program, 'Heads will never match in ~@.\n\tThis rule will never fire!\n', [format_rule(E)]),
            set_all_passive(D),
            (   F=suspension(_,Q,_,R,_,_,_,_),
                Q=mutable(active),
                R=mutable(P) ->
                'chr update_mutable'(inactive, Q),
                'rule/2__8__0'(B, D, E, F)
            ;   true
            )
        ;   'rule/2__8__0'(B, D, E, F)
        ).
'rule/2__8'(A, B, C) :-
        'rule/2__9'(A, B, C).
'rule/2__9'(T, U, V) :-
        '$via1_multi_hash_prev_guard_list/7-1'(T, W),
        'chr sbag_member'(X, W),
        X=suspension(_,Y,_,_,_,_,Z,A1,B1,C1,D1,E1,F1),
        Y=mutable(active),
        Z==T,
        A1==0,
        F1==[],
        U=pragma(rule(F,G,C1,H),A,B,C,T),
        simplify_heads(E1, D1, C1, H, D, E),
        D\==[],
        extract_variables(F, I),
        extract_variables(G, J),
        extract_variables(B1, K),
        replace_some_heads(I, J, K, D, L, M, C1, H, N),
        insert_variables(L, F, O),
        insert_variables(M, G, P),
        append(E, N, Q),
        list2conj(Q, R),
        S=pragma(rule(O,P,C1,(R,H)),A,B,C,T),
        (   F\==O
        ;   G\==P
        ), !,
        (   var(V) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(V, _, G1),
            (   G1==yes ->
                '$delete_from_store_rule/2'(V)
            ;   true
            )
        ),
        rule(T, S).
'rule/2__9'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, D), !,
        'rule/2__9__0'(D, A, B, C).
'rule/2__9__0'([], A, B, C) :-
        'rule/2__10'(A, B, C).
'rule/2__9__0'([B|A], D, E, F) :-
        (   B=suspension(_,H,_,_,_,_,I,J,_,K,_,_,L),
            H=mutable(active),
            I==D,
            J==0,
            L==[],
            G=t(96,B,F),
            'chr novel_production'(B, G),
            'chr novel_production'(F, G),
            chr_pp_flag(check_impossible_rules, on),
            E=pragma(rule(_,_,K,_),_,_,_,D),
            conj2list(K, C),
            guard_entailment:entails_guard(C,fail) ->
            'chr extend_history'(F, G),
            '$chr_translate__activate_constraint'(M, _, F, N),
            (   M==yes ->
                '$insert_in_store_rule/2'(F)
            ;   true
            ),
            chr_warning(weird_program, 'Guard will always fail in ~@.\n\tThis rule will never fire!\n', [format_rule(E)]),
            set_all_passive(D),
            (   F=suspension(_,O,_,P,_,_,_,_),
                O=mutable(active),
                P=mutable(N) ->
                'chr update_mutable'(inactive, O),
                'rule/2__9__0'(A, D, E, F)
            ;   true
            )
        ;   'rule/2__9__0'(A, D, E, F)
        ).
'rule/2__9'(A, B, C) :-
        'rule/2__10'(A, B, C).
'rule/2__10'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', D), !,
        'rule/2__10__0'(D, A, B, C).
'rule/2__10__0'([], A, B, C) :-
        'rule/2__11'(A, B, C).
'rule/2__10__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,I),
            G=mutable(active),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(D, J),
            '$via1_multi_hash_prev_guard_list/7-1'(D, M),
            '$via1_multi_hash_occurrence/4-3'(D, Q),
            'chr sbag_member'(S, Q),
            S=suspension(_,V,_,_,_,_,N,O,W,P),
            V=mutable(active),
            W==D,
            'chr sbag_member'(U, M),
            U=suspension(_,Z,_,_,_,_,A1,B1,_,_,_,_,C1),
            Z=mutable(active),
            A1==D,
            B1==0,
            C1==[],
            'chr sbag_member'(X, J),
            X=suspension(_,D1,_,_,_,_,E1,Y,F1,_),
            D1=mutable(active),
            X\==S,
            E1==N,
            F1==D,
            O<Y,
            E=pragma(rule(C,_,_,_),_,_,_,D),
            C\==[],
            \+memberchk_eq(N,I) ->
            '$chr_translate__remove_constraint_internal'(A, _, H),
            (   H==yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(K, _, F, L),
            (   K==yes ->
                '$insert_in_store_rule/2'(F)
            ;   true
            ),
            first_occ_in_rule(D, N, O, P),
            multiple_occ_constraints_checked([N|I]),
            (   F=suspension(_,R,_,T,_,_,_,_),
                R=mutable(active),
                T=mutable(L) ->
                'chr update_mutable'(inactive, R),
                'rule/2__10__0'(B, D, E, F)
            ;   true
            )
        ;   'rule/2__10__0'(B, D, E, F)
        ).
'rule/2__10'(A, B, C) :-
        'rule/2__11'(A, B, C).
'rule/2__11'(A, B, C) :-
        '$via1_multi_hash_passive/2-1'(A, D), !,
        'rule/2__11__0'(D, A, B, C).
'rule/2__11__0'([], A, B, C) :-
        'rule/2__12'(A, B, C).
'rule/2__11__0'([B|A], F, G, H) :-
        (   B=suspension(_,J,_,_,_,_,K,L),
            J=mutable(active),
            K==F,
            I=t(120,H,B),
            'chr novel_production'(H, I),
            'chr novel_production'(B, I),
            G=pragma(rule(_,_,_,_),ids([L|E],D),_,_,F) ->
            'chr extend_history'(H, I),
            '$chr_translate__activate_constraint'(M, _, H, N),
            (   M==yes ->
                '$insert_in_store_rule/2'(H)
            ;   true
            ),
            append(E, D, C),
            check_all_passive(F, C),
            (   H=suspension(_,O,_,P,_,_,_,_),
                O=mutable(active),
                P=mutable(N) ->
                'chr update_mutable'(inactive, O),
                'rule/2__11__0'(A, F, G, H)
            ;   true
            )
        ;   'rule/2__11__0'(A, F, G, H)
        ).
'rule/2__11'(A, B, C) :-
        'rule/2__12'(A, B, C).
'rule/2__12'(A, B, C) :-
        '$via1_multi_hash_passive/2-1'(A, D), !,
        'rule/2__12__0'(D, A, B, C).
'rule/2__12__0'([], A, B, C) :-
        'rule/2__13'(A, B, C).
'rule/2__12__0'([B|A], D, E, F) :-
        (   B=suspension(_,H,_,_,_,_,I,J),
            H=mutable(active),
            I==D,
            G=t(121,F,B),
            'chr novel_production'(F, G),
            'chr novel_production'(B, G),
            E=pragma(rule(_,_,_,_),ids([],[J|C]),_,_,D) ->
            'chr extend_history'(F, G),
            '$chr_translate__activate_constraint'(K, _, F, L),
            (   K==yes ->
                '$insert_in_store_rule/2'(F)
            ;   true
            ),
            check_all_passive(D, C),
            (   F=suspension(_,M,_,N,_,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'rule/2__12__0'(A, D, E, F)
            ;   true
            )
        ;   'rule/2__12__0'(A, D, E, F)
        ).
'rule/2__12'(A, B, C) :-
        'rule/2__13'(A, B, C).
'rule/2__13'(A, B, C) :-
        '$via1_multi_hash_check_all_passive/2-1'(A, D), !,
        'rule/2__13__0'(D, A, B, C).
'rule/2__13__0'([], A, B, C) :-
        'rule/2__14'(A, B, C).
'rule/2__13__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,G,H),
            F=mutable(active),
            G==C,
            H==[] ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_check_all_passive/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            chr_warning(weird_program, 'All heads passive in ~@.\n\tThis rule never fires. Please check your program.\n', [format_rule(D)]),
            (   E=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'rule/2__13__0'(B, C, D, E)
            ;   true
            )
        ;   'rule/2__13__0'(B, C, D, E)
        ).
'rule/2__13'(A, B, C) :-
        'rule/2__14'(A, B, C).
'rule/2__14'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
        'rule/2__14__0'(D, A, B, C).
'rule/2__14__0'([], A, B, C) :-
        'rule/2__15'(A, B, C).
'rule/2__14__0'([E|A], B, C, D) :-
        (   E=suspension(_,G,_,_,_,_,_),
            G=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(B, F) ->
            'rule/2__14__1'(F, E, A, B, C, D)
        ;   'rule/2__14__0'(A, B, C, D)
        ).
'rule/2__14__1'([], _, A, B, C, D) :-
        'rule/2__14__0'(A, B, C, D).
'rule/2__14__1'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,L,_,_,_,_,I,J,M,K),
            L=mutable(active),
            M==D,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', H) ->
            'rule/2__14__2'(H, I, J, K, G, A, B, C, D, E, F)
        ;   'rule/2__14__1'(A, B, C, D, E, F)
        ).
'rule/2__14__2'([], _, _, _, _, A, B, C, D, E, F) :-
        'rule/2__14__1'(A, B, C, D, E, F).
'rule/2__14__2'([B|A], J, K, L, M, N, O, P, Q, R, S) :-
        (   B=suspension(_,U,_,_,_,_,V),
            U=mutable(active),
            nonvar(V),
            V=odom(D,E),
            nonvar(D),
            D=occ(G,H),
            G==J,
            H==K,
            T=t(177,O,M,B,S),
            'chr novel_production'(O, T),
            'chr novel_production'(M, T),
            'chr novel_production'(B, T),
            'chr novel_production'(S, T),
            R=pragma(rule(_,_,_,_),ids(I,_),_,_,_),
            memberchk_eq(L, I),
            is_passive(Q, L) ->
            'chr extend_history'(S, T),
            '$chr_translate__activate_constraint'(W, _, S, X),
            (   W==yes ->
                '$insert_in_store_rule/2'(S)
            ;   true
            ),
            C is K+1,
            F=odom(occ(J,C),E),
            call_pattern(F),
            depends_on(odom(occ(J,K),E), F),
            (   S=suspension(_,Y,_,Z,_,_,_,_),
                Y=mutable(active),
                Z=mutable(X) ->
                'chr update_mutable'(inactive, Y),
                'rule/2__14__2'(A, J, K, L, M, N, O, P, Q, R, S)
            ;   true
            )
        ;   'rule/2__14__2'(A, J, K, L, M, N, O, P, Q, R, S)
        ).
'rule/2__14'(A, B, C) :-
        'rule/2__15'(A, B, C).
'rule/2__15'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
        'rule/2__15__0'(D, A, B, C).
'rule/2__15__0'([], A, B, C) :-
        'rule/2__16'(A, B, C).
'rule/2__15__0'([E|A], B, C, D) :-
        (   E=suspension(_,H,_,_,_,_,G),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(B, F) ->
            'rule/2__15__1'(F, G, E, A, B, C, D)
        ;   'rule/2__15__0'(A, B, C, D)
        ).
'rule/2__15__1'([], _, _, A, B, C, D) :-
        'rule/2__15__0'(A, B, C, D).
'rule/2__15__1'([H|A], B, C, D, E, F, G) :-
        (   H=suspension(_,M,_,_,_,_,J,K,N,L),
            M=mutable(active),
            N==E,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', I) ->
            'rule/2__15__2'(I, J, K, L, H, A, B, C, D, E, F, G)
        ;   'rule/2__15__1'(A, B, C, D, E, F, G)
        ).
'rule/2__15__2'([], _, _, _, _, A, B, C, D, E, F, G) :-
        'rule/2__15__1'(A, B, C, D, E, F, G).
'rule/2__15__2'([B|A], T, U, V, W, X, Y, Z, A1, B1, C1, D1) :-
        (   B=suspension(_,F1,_,_,_,_,G1),
            F1=mutable(active),
            nonvar(G1),
            G1=odom(C,D),
            nonvar(C),
            C=occ(G,H),
            G==T,
            H==U,
            E1=t(178,Z,W,B,D1),
            'chr novel_production'(Z, E1),
            'chr novel_production'(W, E1),
            'chr novel_production'(B, E1),
            'chr novel_production'(D1, E1),
            C1=pragma(rule(I,J,K,L),ids(M,_),_,_,_),
            memberchk_eq(V, M),
            \+is_passive(B1,V) ->
            'chr extend_history'(D1, E1),
            '$chr_translate__activate_constraint'(H1, _, D1, I1),
            (   H1==yes ->
                '$insert_in_store_rule/2'(D1)
            ;   true
            ),
            once(select2(V,_,M,I,_,E)),
            ai_observation_abstract_constraints(E, Y, F),
            ai_observation_observe_list(odom([],D), F, odom([],N)),
            ai_observation_abstract_constraints(J, Y, O),
            ai_observation_observe_list(odom([],N), O, odom([],P)),
            ai_observation_abstract_goal_(I, J, K, L, Y, Q),
            call_pattern(odom(Q,P)),
            R is U+1,
            S=odom(occ(T,R),D),
            call_pattern(S),
            depends_on_as(odom(occ(T,U),D), odom(Q,P), S),
            final_answer_pattern(odom(occ(T,U),D), odom([],D)),
            (   D1=suspension(_,J1,_,K1,_,_,_,_),
                J1=mutable(active),
                K1=mutable(I1) ->
                'chr update_mutable'(inactive, J1),
                'rule/2__15__2'(A, T, U, V, W, X, Y, Z, A1, B1, C1, D1)
            ;   true
            )
        ;   'rule/2__15__2'(A, T, U, V, W, X, Y, Z, A1, B1, C1, D1)
        ).
'rule/2__15'(A, B, C) :-
        'rule/2__16'(A, B, C).
'rule/2__16'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
        'rule/2__16__0'(D, A, B, C).
'rule/2__16__0'([], A, B, C) :-
        'rule/2__17'(A, B, C).
'rule/2__16__0'([E|A], B, C, D) :-
        (   E=suspension(_,G,_,_,_,_,_),
            G=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(B, F) ->
            'rule/2__16__1'(F, E, A, B, C, D)
        ;   'rule/2__16__0'(A, B, C, D)
        ).
'rule/2__16__1'([], _, A, B, C, D) :-
        'rule/2__16__0'(A, B, C, D).
'rule/2__16__1'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,L,_,_,_,_,I,J,M,K),
            L=mutable(active),
            M==D,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', H) ->
            'rule/2__16__2'(H, I, J, K, G, A, B, C, D, E, F)
        ;   'rule/2__16__1'(A, B, C, D, E, F)
        ).
'rule/2__16__2'([], _, _, _, _, A, B, C, D, E, F) :-
        'rule/2__16__1'(A, B, C, D, E, F).
'rule/2__16__2'([B|A], J, K, L, M, N, O, P, Q, R, S) :-
        (   B=suspension(_,U,_,_,_,_,V),
            U=mutable(active),
            nonvar(V),
            V=odom(D,E),
            nonvar(D),
            D=occ(G,H),
            G==J,
            H==K,
            T=t(180,O,M,B,S),
            'chr novel_production'(O, T),
            'chr novel_production'(M, T),
            'chr novel_production'(B, T),
            'chr novel_production'(S, T),
            R=pragma(rule(_,_,_,_),ids(_,I),_,_,_),
            memberchk_eq(L, I),
            is_passive(Q, L) ->
            'chr extend_history'(S, T),
            '$chr_translate__activate_constraint'(W, _, S, X),
            (   W==yes ->
                '$insert_in_store_rule/2'(S)
            ;   true
            ),
            C is K+1,
            F=odom(occ(J,C),E),
            call_pattern(F),
            final_answer_pattern(odom(occ(J,K),E), odom([],E)),
            depends_on(odom(occ(J,K),E), F),
            (   S=suspension(_,Y,_,Z,_,_,_,_),
                Y=mutable(active),
                Z=mutable(X) ->
                'chr update_mutable'(inactive, Y),
                'rule/2__16__2'(A, J, K, L, M, N, O, P, Q, R, S)
            ;   true
            )
        ;   'rule/2__16__2'(A, J, K, L, M, N, O, P, Q, R, S)
        ).
'rule/2__16'(A, B, C) :-
        'rule/2__17'(A, B, C).
'rule/2__17'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
        'rule/2__17__0'(D, A, B, C).
'rule/2__17__0'([], A, B, C) :-
        'rule/2__18'(A, B, C).
'rule/2__17__0'([E|A], B, C, D) :-
        (   E=suspension(_,H,_,_,_,_,G),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(B, F) ->
            'rule/2__17__1'(F, G, E, A, B, C, D)
        ;   'rule/2__17__0'(A, B, C, D)
        ).
'rule/2__17__1'([], _, _, A, B, C, D) :-
        'rule/2__17__0'(A, B, C, D).
'rule/2__17__1'([H|A], B, C, D, E, F, G) :-
        (   H=suspension(_,M,_,_,_,_,J,K,N,L),
            M=mutable(active),
            N==E,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', I) ->
            'rule/2__17__2'(I, J, K, L, H, A, B, C, D, E, F, G)
        ;   'rule/2__17__1'(A, B, C, D, E, F, G)
        ).
'rule/2__17__2'([], _, _, _, _, A, B, C, D, E, F, G) :-
        'rule/2__17__1'(A, B, C, D, E, F, G).
'rule/2__17__2'([B|A], V, W, X, Y, Z, A1, B1, C1, D1, E1, F1) :-
        (   B=suspension(_,H1,_,_,_,_,I1),
            H1=mutable(active),
            nonvar(I1),
            I1=odom(C,D),
            nonvar(C),
            C=occ(G,H),
            G==V,
            H==W,
            G1=t(181,B1,Y,B,F1),
            'chr novel_production'(B1, G1),
            'chr novel_production'(Y, G1),
            'chr novel_production'(B, G1),
            'chr novel_production'(F1, G1),
            E1=pragma(rule(I,J,K,L),ids(_,M),_,_,_),
            memberchk_eq(X, M),
            \+is_passive(D1,X) ->
            'chr extend_history'(F1, G1),
            '$chr_translate__activate_constraint'(J1, _, F1, K1),
            (   J1==yes ->
                '$insert_in_store_rule/2'(F1)
            ;   true
            ),
            once(select2(X,_,M,J,_,E)),
            ai_observation_abstract_constraints(E, A1, F),
            ai_observation_observe_list(odom([],D), F, odom([],N)),
            ai_observation_abstract_constraints(I, A1, O),
            ai_observation_observe_list(odom([],N), O, odom([],P)),
            ord_add_element(P, V, Q),
            ai_observation_abstract_goal_(I, J, K, L, A1, R),
            call_pattern(odom(R,Q)),
            (   ord_memberchk(V, P) ->
                T=no
            ;   T=yes
            ),
            S is W+1,
            U=odom(occ(V,S),D),
            call_pattern(U),
            depends_on_ap(odom(occ(V,W),D), odom(R,Q), U, T),
            (   F1=suspension(_,L1,_,M1,_,_,_,_),
                L1=mutable(active),
                M1=mutable(K1) ->
                'chr update_mutable'(inactive, L1),
                'rule/2__17__2'(A, V, W, X, Y, Z, A1, B1, C1, D1, E1, F1)
            ;   true
            )
        ;   'rule/2__17__2'(A, V, W, X, Y, Z, A1, B1, C1, D1, E1, F1)
        ).
'rule/2__17'(A, B, C) :-
        'rule/2__18'(A, B, C).
'rule/2__18'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_rule/2'(A)
        ;   true
        ).
get_rule(A, B) :-
        'get_rule/2__0'(A, B, _).
'get_rule/2__0'(A, B, _) :-
        '$via1_multi_hash_rule/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        B=G.
'get_rule/2__0'(_, _, _) :- !,
        fail.
least_occurrence(A, B) :-
        'least_occurrence/2__0'(A, B, _).
'least_occurrence/2__0'(A, B, C) :-
        B==[],
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'least_occurrence/2__0'(A,B,C), C, least_occurrence(A,B), [A,B]),
        'least_occurrence/2__0__0'(D, A, B, C).
'least_occurrence/2__0__0'([], A, B, C) :-
        'least_occurrence/2__1'(A, B, C).
'least_occurrence/2__0__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,J,K),
            G=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(D, H),
            '$via1_multi_hash_rule/2-1'(D, L),
            'chr sbag_member'(O, L),
            O=suspension(_,S,_,_,_,_,T,Q),
            S=mutable(active),
            T==D,
            'chr sbag_member'(P, H),
            P=suspension(_,V,_,_,_,_,W,X,Y,_),
            V=mutable(active),
            W==J,
            X==K,
            Y==D,
            Q=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(J,K) ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(M, _, F, N),
            (   M==yes ->
                '$insert_in_store_least_occurrence/2'(F)
            ;   true
            ),
            C is K+1,
            allocation_occurrence(J, C),
            (   F=suspension(_,R,_,U,_,_,_,_),
                R=mutable(active),
                U=mutable(N) ->
                'chr update_mutable'(inactive, R),
                'least_occurrence/2__0__0'(B, D, E, F)
            ;   true
            )
        ;   'least_occurrence/2__0__0'(B, D, E, F)
        ).
'least_occurrence/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'least_occurrence/2__0'(A,B,C), C, least_occurrence(A,B), [A,B]),
        'least_occurrence/2__1'(A, B, C).
'least_occurrence/2__1'(C, D, E) :-
        nonvar(D),
        D=[A|B],
        '$via1_multi_hash_occurrence/4-34'(k(C,A), F),
        '$via1_multi_hash_rule/2-1'(C, G),
        'chr sbag_member'(H, G),
        H=suspension(_,I,_,_,_,_,J,_),
        I=mutable(active),
        J==C,
        'chr sbag_member'(K, F),
        K=suspension(_,L,_,_,_,_,M,N,O,P),
        L=mutable(active),
        O==C,
        P==A,
        '$via1_multi_hash_allocation_occurrence/2-1'(M, Q),
        'chr sbag_member'(R, Q),
        R=suspension(_,S,_,_,_,_,T,U),
        S=mutable(active),
        T==M,
        U>=N,
        \+may_trigger(M), !,
        (   var(E) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(E, _, V),
            (   V==yes ->
                '$delete_from_store_least_occurrence/2'(E)
            ;   true
            )
        ),
        least_occurrence(C, B).
'least_occurrence/2__1'(C, D, E) :-
        nonvar(D),
        D=[A|B],
        '$via1_multi_hash_passive/2-12'(k(C,A), F),
        '$via1_multi_hash_rule/2-1'(C, G),
        'chr sbag_member'(H, G),
        H=suspension(_,I,_,_,_,_,J,_),
        I=mutable(active),
        J==C,
        (   'chr sbag_member'(K, F),
            K=suspension(_,L,_,_,_,_,M,N),
            L=mutable(active),
            M==C,
            N==A ->
            true
        ), !,
        (   var(E) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(E, _, O),
            (   O==yes ->
                '$delete_from_store_least_occurrence/2'(E)
            ;   true
            )
        ),
        least_occurrence(C, B).
'least_occurrence/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_least_occurrence/2'(A)
        ;   true
        ).
is_least_occurrence(A) :-
        'is_least_occurrence/1__0'(A, _).
'is_least_occurrence/1__0'(A, _) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, B),
        'chr sbag_member'(C, B),
        C=suspension(_,D,_,_,_,_,E,F),
        D=mutable(active),
        E==A,
        F==[], !.
'is_least_occurrence/1__0'(_, _) :- !,
        fail.
constraint_index(A, B) :-
        'constraint_index/2__0'(A, B, _).
'constraint_index/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'constraint_index/2__0'(A,B,C), constraint_index(A,B), [A,B]),
        '$insert_in_store_constraint_index/2'(C).
get_constraint_index(A, B) :-
        'get_constraint_index/2__0'(A, B, _).
'get_constraint_index/2__0'(A, B, _) :-
        '$via1_multi_hash_constraint_index/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        B=G.
'get_constraint_index/2__0'(_, _, _) :- !,
        fail.
get_indexed_constraint(A, B) :-
        'get_indexed_constraint/2__0'(A, B, _).
'get_indexed_constraint/2__0'(A, B, _) :-
        '$via1_multi_hash_constraint_index/2-2'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        G==A, !,
        B=F.
'get_indexed_constraint/2__0'(_, _, _) :- !,
        fail.
max_constraint_index(A) :-
        'max_constraint_index/1__0'(A, _).
'max_constraint_index/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'max_constraint_index/1__0'(A,B), max_constraint_index(A), [A]),
        '$insert_in_store_max_constraint_index/1'(B).
get_max_constraint_index(A) :-
        'get_max_constraint_index/1__0'(A, _).
'get_max_constraint_index/1__0'(A, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
        'chr sbag_member'(C, B),
        C=suspension(_,D,_,_,_,_,E),
        D=mutable(active), !,
        A=E.
'get_max_constraint_index/1__0'(A, _) :- !,
        A=0.
head_name(A, B, C, D) :-
        'head_name/4__0'(A, B, C, D, _).
'head_name/4__0'(A, B, C, D, E) :-
        (   var(E) ->
            '$chr_translate__insert_constraint_internal'(F, G, E, chr_translate:'head_name/4__0'(A,B,C,D,E), head_name(A,B,C,D), [A,B,C,D])
        ;   '$chr_translate__activate_constraint'(F, G, E, _)
        ),
        (   F==yes ->
            '$insert_in_store_head_name/4'(E),
            'attach_head_name/4'(G, E)
        ;   true
        ).
find_head_name(A, B, C, D) :-
        'find_head_name/4__0'(A, B, C, D, _).
'find_head_name/4__0'(E, F, G, H, _) :-
        'chr via_2'(E, F, A),
        get_attr(A, chr_translate, B),
        B=v(I,J,_,_,_,_),
        I/\1=:=1,
        'chr sbag_member'(K, J),
        K=suspension(_,L,_,_,_,_,M,N,O,P),
        L=mutable(active),
        M==E,
        P==F, !,
        G=N,
        functor(O, C, D),
        H=C/D.
'find_head_name/4__0'(_, _, _, _, _) :- !,
        fail.
no_history(A) :-
        'no_history/1__0'(A, _).
'no_history/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'no_history/1__0'(A,B), no_history(A), [A]),
        '$insert_in_store_no_history/1'(B).
has_no_history(A) :-
        'has_no_history/1__0'(A, _).
'has_no_history/1__0'(A, _) :-
        '$via1_multi_hash_no_history/1-1'(A, B),
        'chr sbag_member'(C, B),
        C=suspension(_,D,_,_,_,_,E),
        D=mutable(active),
        E==A, !.
'has_no_history/1__0'(_, _) :- !,
        fail.
indexing_spec(A, B) :-
        'indexing_spec/2__0'(A, B, _).
'indexing_spec/2__0'(B, C, _) :-
        '$via1_multi_hash_indexing_spec/2-1'(B, D),
        (   'chr sbag_member'(E, D),
            E=suspension(_,G,_,_,_,_,H,I),
            G=mutable(active),
            H==B ->
            true
        ), !,
        '$chr_translate__remove_constraint_internal'(E, _, F),
        (   F==yes ->
            '$delete_from_store_indexing_spec/2'(E)
        ;   true
        ),
        append(C, I, A),
        indexing_spec(B, A).
'indexing_spec/2__0'(B, C, _) :-
        '$via1_multi_hash_indexing_spec/2-1'(B, D),
        (   'chr sbag_member'(E, D),
            E=suspension(_,G,_,_,_,_,H,I),
            G=mutable(active),
            H==B ->
            true
        ), !,
        '$chr_translate__remove_constraint_internal'(E, _, F),
        (   F==yes ->
            '$delete_from_store_indexing_spec/2'(E)
        ;   true
        ),
        append(I, C, A),
        indexing_spec(B, A).
'indexing_spec/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'indexing_spec/2__0'(A,B,C), indexing_spec(A,B), [A,B]),
        '$insert_in_store_indexing_spec/2'(C).
get_indexing_spec(A, B) :-
        'get_indexing_spec/2__0'(A, B, _).
'get_indexing_spec/2__0'(A, B, _) :-
        '$via1_multi_hash_indexing_spec/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        B=G.
'get_indexing_spec/2__0'(_, A, _) :- !,
        A=[].
observes(A, B) :-
        'observes/2__0'(A, B, _).
'observes/2__0'(A, B, _) :-
        '$via1_multi_hash_observes/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'observes/2__0'(A, B, C) :-
        '$via1_multi_hash_spawns_observer/2-2'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'observes/2__0'(A,B,C), C, observes(A,B), [A,B]),
        'observes/2__0__0'(D, A, B, C).
'observes/2__0__0'([], A, B, C) :-
        'observes/2__1'(A, B, C).
'observes/2__0__0'([B|A], C, D, E) :-
        (   B=suspension(_,G,_,_,_,_,I,H),
            G=mutable(active),
            H==C,
            F=t(75,B,E),
            'chr novel_production'(B, F),
            'chr novel_production'(E, F) ->
            'chr extend_history'(E, F),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_observes/2'(E)
            ;   true
            ),
            observes_indirectly(I, D),
            (   E=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'observes/2__0__0'(A, C, D, E)
            ;   true
            )
        ;   'observes/2__0__0'(A, C, D, E)
        ).
'observes/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'observes/2__0'(A,B,C), C, observes(A,B), [A,B]),
        'observes/2__1'(A, B, C).
'observes/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_observes/2'(A)
        ;   true
        ).
spawns_observer(A, B) :-
        'spawns_observer/2__0'(A, B, _).
'spawns_observer/2__0'(A, B, _) :-
        '$via1_multi_hash_spawns_observer/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'spawns_observer/2__0'(A, B, C) :-
        '$via1_multi_hash_observes/2-1'(B, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'spawns_observer/2__0'(A,B,C), C, spawns_observer(A,B), [A,B]),
        'spawns_observer/2__0__0'(D, A, B, C).
'spawns_observer/2__0__0'([], A, B, C) :-
        'spawns_observer/2__1'(A, B, C).
'spawns_observer/2__0__0'([B|A], C, D, E) :-
        (   B=suspension(_,G,_,_,_,_,H,I),
            G=mutable(active),
            H==D,
            F=t(75,E,B),
            'chr novel_production'(E, F),
            'chr novel_production'(B, F) ->
            'chr extend_history'(E, F),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_spawns_observer/2'(E)
            ;   true
            ),
            observes_indirectly(C, I),
            (   E=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'spawns_observer/2__0__0'(A, C, D, E)
            ;   true
            )
        ;   'spawns_observer/2__0__0'(A, C, D, E)
        ).
'spawns_observer/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'spawns_observer/2__0'(A,B,C), C, spawns_observer(A,B), [A,B]),
        'spawns_observer/2__1'(A, B, C).
'spawns_observer/2__1'(A, B, C) :-
        '$via1_multi_hash_observes_indirectly/2-1'(B, D), !,
        'spawns_observer/2__1__0'(D, A, B, C).
'spawns_observer/2__1__0'([], A, B, C) :-
        'spawns_observer/2__2'(A, B, C).
'spawns_observer/2__1__0'([B|A], C, D, E) :-
        (   B=suspension(_,G,_,_,_,_,H,I),
            G=mutable(active),
            H==D,
            F=t(76,E,B),
            'chr novel_production'(E, F),
            'chr novel_production'(B, F) ->
            'chr extend_history'(E, F),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_spawns_observer/2'(E)
            ;   true
            ),
            observes_indirectly(C, I),
            (   E=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'spawns_observer/2__1__0'(A, C, D, E)
            ;   true
            )
        ;   'spawns_observer/2__1__0'(A, C, D, E)
        ).
'spawns_observer/2__1'(A, B, C) :-
        'spawns_observer/2__2'(A, B, C).
'spawns_observer/2__2'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_spawns_observer/2'(A)
        ;   true
        ).
observes_indirectly(A, B) :-
        'observes_indirectly/2__0'(A, B, _).
'observes_indirectly/2__0'(A, B, _) :-
        '$via1_multi_hash_observes_indirectly/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'observes_indirectly/2__0'(A, B, C) :-
        '$via1_multi_hash_spawns_observer/2-2'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'observes_indirectly/2__0'(A,B,C), C, observes_indirectly(A,B), [A,B]),
        'observes_indirectly/2__0__0'(D, A, B, C).
'observes_indirectly/2__0__0'([], A, B, C) :-
        'observes_indirectly/2__1'(A, B, C).
'observes_indirectly/2__0__0'([B|A], C, D, E) :-
        (   B=suspension(_,G,_,_,_,_,I,H),
            G=mutable(active),
            H==C,
            F=t(76,B,E),
            'chr novel_production'(B, F),
            'chr novel_production'(E, F) ->
            'chr extend_history'(E, F),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_observes_indirectly/2'(E)
            ;   true
            ),
            observes_indirectly(I, D),
            (   E=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'observes_indirectly/2__0__0'(A, C, D, E)
            ;   true
            )
        ;   'observes_indirectly/2__0__0'(A, C, D, E)
        ).
'observes_indirectly/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'observes_indirectly/2__0'(A,B,C), C, observes_indirectly(A,B), [A,B]),
        'observes_indirectly/2__1'(A, B, C).
'observes_indirectly/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_observes_indirectly/2'(A)
        ;   true
        ).
is_self_observer(A) :-
        'is_self_observer/1__0'(A, _).
'is_self_observer/1__0'(A, _) :-
        '$via1_multi_hash_observes_indirectly/2-12'(k(A,A), B),
        'chr sbag_member'(C, B),
        C=suspension(_,D,_,_,_,_,E,F),
        D=mutable(active),
        E==A,
        F==A, !.
'is_self_observer/1__0'(_, _) :- !,
        chr_pp_flag(observation_analysis, off).
generate_indexed_variables_body(A, B, C, D) :-
        'generate_indexed_variables_body/4__0'(A, B, C, D, _).
'generate_indexed_variables_body/4__0'(H, I, J, K, _) :-
        nonvar(H),
        H=A/B,
        nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', L),
        (   'chr sbag_member'(M, L),
            M=suspension(_,N,_,_,_,_,O,P),
            N=mutable(active),
            nonvar(O),
            O=F/G,
            F==A,
            G==B ->
            true
        ), !,
        get_indexing_spec(A/B, C),
        (   chr_pp_flag(term_indexing, on) ->
            spectermvars(C, I, A, B, J, K)
        ;   create_indexed_variables_body(I, P, K, 1, A/B, D, E),
            (   D==empty ->
                J=true,
                K=[]
            ;   E==0 ->
                J=term_variables(I,K)
            ;   D=J
            )
        ).
'generate_indexed_variables_body/4__0'(A, _, _, _, _) :- !,
        chr_error(internal, 'generate_indexed_variables_body: missing mode info for ~w.\n', [A]).
module_initializer(A) :-
        'module_initializer/1__0'(A, _).
'module_initializer/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'module_initializer/1__0'(A,B), module_initializer(A), [A]),
        '$insert_in_store_module_initializer/1'(B).
module_initializers(A) :-
        'module_initializers/1__0'(A, _).
'module_initializers/1__0'(B, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:module_initializer/1', C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F),
        E=mutable(active), !,
        '$chr_translate__remove_constraint_internal'(D, _, G),
        (   G==yes ->
            '$delete_from_store_module_initializer/1'(D)
        ;   true
        ),
        B=(F,A),
        module_initializers(A).
'module_initializers/1__0'(A, _) :- !,
        A=true.
prolog_global_variable(A) :-
        'prolog_global_variable/1__0'(A, _).
'prolog_global_variable/1__0'(C, D) :-
        'chr via_1'(C, A),
        get_attr(A, chr_translate, B),
        B=v(E,_,F,_,_,_),
        E/\2=:=2,
        (   'chr sbag_member'(G, F),
            G=suspension(_,J,_,_,_,_,K),
            J=mutable(active),
            K==C ->
            true
        ), !,
        (   var(D) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(D, H, I),
            (   I==yes ->
                '$delete_from_store_prolog_global_variable/1'(D),
                'detach_prolog_global_variable/1'(H, D)
            ;   true
            )
        ).
'prolog_global_variable/1__0'(A, B) :-
        (   var(B) ->
            '$chr_translate__insert_constraint_internal'(C, D, B, chr_translate:'prolog_global_variable/1__0'(A,B), prolog_global_variable(A), [A])
        ;   '$chr_translate__activate_constraint'(C, D, B, _)
        ),
        (   C==yes ->
            '$insert_in_store_prolog_global_variable/1'(B),
            'attach_prolog_global_variable/1'(D, B)
        ;   true
        ).
prolog_global_variables(A) :-
        'prolog_global_variables/1__0'(A, _).
'prolog_global_variables/1__0'(D, _) :-
        'chr default_store'(A),
        get_attr(A, chr_translate, B),
        B=v(E,_,F,_,_,_),
        E/\2=:=2,
        'chr sbag_member'(G, F),
        G=suspension(_,H,_,_,_,_,I),
        H=mutable(active), !,
        '$chr_translate__remove_constraint_internal'(G, J, K),
        (   K==yes ->
            '$delete_from_store_prolog_global_variable/1'(G),
            'detach_prolog_global_variable/1'(J, G)
        ;   true
        ),
        D=[I|C],
        prolog_global_variables(C).
'prolog_global_variables/1__0'(A, _) :- !,
        A=[].
prev_guard_list(A, B, C, D, E, F, G) :-
        'prev_guard_list/7__0'(A, B, C, D, E, F, G, _).
'prev_guard_list/7__0'(T, U, V, W, X, Y, Z, _) :-
        '$via1_multi_hash_rule/2-1'(U, A1),
        'chr sbag_member'(B1, A1),
        B1=suspension(_,C1,_,_,_,_,D1,E1),
        C1=mutable(active),
        D1==U,
        E1=pragma(rule(A,B,C,_),_,_,_,U),
        A\==[],
        append(A, B, D),
        make_head_matchings_explicit(D, E, F),
        term_variables(E+V, G),
        find_with_var_identity(H, G, chr_translate:head_subset(E,V,H), I),
        sort(I, J),
        J\=[], !,
        compute_derived_info(F, J, E, D, C, Y, V, Z, K, L),
        append(X, K, M),
        list2conj(M, N),
        conj2list(N, O),
        append(L, Z, P),
        list2conj(P, Q),
        conj2list(Q, R),
        S is U-1,
        prev_guard_list(T, S, V, W, O, Y, R).
'prev_guard_list/7__0'(B, C, D, E, F, G, H, _) :-
        C>0, !,
        A is C-1,
        prev_guard_list(B, A, D, E, F, G, H).
'prev_guard_list/7__0'(G, H, I, J, K, L, M, _) :-
        H==0,
        M\==[], !,
        add_type_information_(I, M, A),
        conj2list(A, B),
        term_variables(I, C),
        append([chr_pp_headvariables(C)|B], K, D),
        list2conj(D, E),
        conj2list(E, F),
        prev_guard_list(G, 0, I, J, F, L, []).
'prev_guard_list/7__0'(J, K, L, M, N, O, P, _) :-
        K==0,
        P==[],
        '$via1_multi_hash_rule/2-1'(J, Q),
        'chr sbag_member'(R, Q),
        R=suspension(_,S,_,_,_,_,T,U),
        S=mutable(active),
        T==J,
        U=pragma(rule(D,E,M,F),A,B,C,J),
        M\==true,
        append(O, N, G),
        simplify_guard(M, F, G, H, I),
        M\==H, !,
        '$chr_translate__remove_constraint_internal'(R, _, V),
        (   V==yes ->
            '$delete_from_store_rule/2'(R)
        ;   true
        ),
        rule(J, pragma(rule(D,E,H,I),A,B,C,J)),
        prev_guard_list(J, 0, L, H, N, O, []).
'prev_guard_list/7__0'(B, C, _, D, E, F, G, _) :-
        C==0,
        G==[],
        chr_pp_flag(check_impossible_rules, on),
        '$via1_multi_hash_rule/2-1'(B, H),
        'chr sbag_member'(I, H),
        I=suspension(_,J,_,_,_,_,K,L),
        J=mutable(active),
        K==B,
        L=pragma(rule(_,_,D,_),_,_,_,B),
        append(F, E, A),
        guard_entailment:entails_guard(A,fail), !,
        chr_warning(weird_program, 'Heads will never match in ~@.\n\tThis rule will never fire!\n', [format_rule(L)]),
        set_all_passive(B).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
        B==0,
        G==[],
        '$via1_multi_hash_rule/2-1'(A, I), !,
        '$chr_translate__allocate_constraint'(chr_translate:'prev_guard_list/7__0'(A,B,C,D,E,F,G,H), H, prev_guard_list(A,B,C,D,E,F,G), [A,B,C,D,E,F,G]),
        'prev_guard_list/7__0__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__0__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__1'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__0__0'([A|B], V, W, X, Y, Z, A1, B1, C1) :-
        (   A=suspension(_,D1,_,_,_,_,E1,G1),
            D1=mutable(active),
            E1==V,
            G1=pragma(rule(H,I,Y,J),C,D,E,V),
            simplify_heads(A1, Z, Y, J, F, G),
            F\==[],
            extract_variables(H, K),
            extract_variables(I, L),
            extract_variables(X, M),
            replace_some_heads(K, L, M, F, N, O, Y, J, P),
            insert_variables(N, H, Q),
            insert_variables(O, I, R),
            append(G, P, S),
            list2conj(S, T),
            U=pragma(rule(Q,R,Y,(T,J)),C,D,E,V),
            (   H\==Q
            ;   I\==R
            ) ->
            '$chr_translate__remove_constraint_internal'(A, _, F1),
            (   F1==yes ->
                '$delete_from_store_rule/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(H1, _, C1, I1),
            (   H1==yes ->
                '$insert_in_store_prev_guard_list/7'(C1)
            ;   true
            ),
            rule(V, U),
            (   C1=suspension(_,J1,_,K1,_,_,_,_,_,_,_,_,_),
                J1=mutable(active),
                K1=mutable(I1) ->
                'chr update_mutable'(inactive, J1),
                'prev_guard_list/7__0__0'(B, V, W, X, Y, Z, A1, B1, C1)
            ;   true
            )
        ;   'prev_guard_list/7__0__0'(B, V, W, X, Y, Z, A1, B1, C1)
        ).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
        '$chr_translate__allocate_constraint'(chr_translate:'prev_guard_list/7__0'(A,B,C,D,E,F,G,H), H, prev_guard_list(A,B,C,D,E,F,G), [A,B,C,D,E,F,G]),
        'prev_guard_list/7__1'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__1'(A, B, C, D, E, F, G, H) :-
        B==0,
        G==[],
        '$via1_multi_hash_rule/2-1'(A, I), !,
        'prev_guard_list/7__1__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__1__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__2'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__1__0'([B|A], D, E, F, G, H, I, J, K) :-
        (   B=suspension(_,M,_,_,_,_,N,O),
            M=mutable(active),
            N==D,
            L=t(96,K,B),
            'chr novel_production'(K, L),
            'chr novel_production'(B, L),
            chr_pp_flag(check_impossible_rules, on),
            O=pragma(rule(_,_,G,_),_,_,_,D),
            conj2list(G, C),
            guard_entailment:entails_guard(C,fail) ->
            'chr extend_history'(K, L),
            '$chr_translate__activate_constraint'(P, _, K, Q),
            (   P==yes ->
                '$insert_in_store_prev_guard_list/7'(K)
            ;   true
            ),
            chr_warning(weird_program, 'Guard will always fail in ~@.\n\tThis rule will never fire!\n', [format_rule(O)]),
            set_all_passive(D),
            (   K=suspension(_,R,_,S,_,_,_,_,_,_,_,_,_),
                R=mutable(active),
                S=mutable(Q) ->
                'chr update_mutable'(inactive, R),
                'prev_guard_list/7__1__0'(A, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'prev_guard_list/7__1__0'(A, D, E, F, G, H, I, J, K)
        ).
'prev_guard_list/7__1'(A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__2'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__2'(A, B, C, D, E, F, G, H) :-
        B==0,
        G==[],
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', I), !,
        'prev_guard_list/7__2__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__2__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__3'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__2__0'([A|B], D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,_,_,_,N),
            L=mutable(active),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(D, O),
            '$via1_multi_hash_rule/2-1'(D, R),
            '$via1_multi_hash_occurrence/4-3'(D, V),
            'chr sbag_member'(X, V),
            X=suspension(_,A1,_,_,_,_,S,B1,C1,_),
            A1=mutable(active),
            C1==D,
            'chr sbag_member'(Z, R),
            Z=suspension(_,E1,_,_,_,_,F1,G1),
            E1=mutable(active),
            F1==D,
            'chr sbag_member'(D1, O),
            D1=suspension(_,H1,_,_,_,_,I1,T,J1,U),
            H1=mutable(active),
            D1\==X,
            I1==S,
            J1==D,
            T<B1,
            G1=pragma(rule(C,_,_,_),_,_,_,D),
            C\==[],
            \+memberchk_eq(S,N) ->
            '$chr_translate__remove_constraint_internal'(A, _, M),
            (   M==yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(P, _, K, Q),
            (   P==yes ->
                '$insert_in_store_prev_guard_list/7'(K)
            ;   true
            ),
            first_occ_in_rule(D, S, T, U),
            multiple_occ_constraints_checked([S|N]),
            (   K=suspension(_,W,_,Y,_,_,_,_,_,_,_,_,_),
                W=mutable(active),
                Y=mutable(Q) ->
                'chr update_mutable'(inactive, W),
                'prev_guard_list/7__2__0'(B, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'prev_guard_list/7__2__0'(B, D, E, F, G, H, I, J, K)
        ).
'prev_guard_list/7__2'(A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__3'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__3'(_, A, _, _, _, _, B, C) :-
        A==0,
        B==[],
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_,_),
        F=mutable(active), !,
        '$chr_translate__remove_constraint_internal'(E, _, G),
        (   G==yes ->
            '$delete_from_store_multiple_occ_constraints_checked/1'(E)
        ;   true
        ),
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, H),
            (   H==yes ->
                '$delete_from_store_prev_guard_list/7'(C)
            ;   true
            )
        ).
'prev_guard_list/7__3'(_, _, _, _, _, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_prev_guard_list/7'(A)
        ;   true
        ).
simplify_guards(A) :-
        'simplify_guards/1__0'(A, _).
'simplify_guards/1__0'(J, _) :-
        '$via1_multi_hash_rule/2-1'(J, K),
        'chr sbag_member'(L, K),
        L=suspension(_,M,_,_,_,_,N,O),
        M=mutable(active),
        N==J, !,
        O=pragma(rule(B,C,D,_),_,_,_,J),
        append(B, C, A),
        make_head_matchings_explicit_not_negated(A, E, F),
        add_guard_to_head(A, D, G),
        H is J-1,
        prev_guard_list(J, H, E, D, [], F, [G]),
        multiple_occ_constraints_checked([]),
        I is J+1,
        simplify_guards(I).
'simplify_guards/1__0'(_, _) :- !.
set_all_passive(A) :-
        'set_all_passive/1__0'(A, _).
'set_all_passive/1__0'(A, B) :-
        '$via1_multi_hash_occurrence/4-3'(A, C), !,
        '$chr_translate__allocate_constraint'(chr_translate:'set_all_passive/1__0'(A,B), B, set_all_passive(A), [A]),
        'set_all_passive/1__0__0'(C, A, B).
'set_all_passive/1__0__0'([], A, B) :-
        'set_all_passive/1__1'(A, B).
'set_all_passive/1__0__0'([B|A], C, D) :-
        (   B=suspension(_,F,_,_,_,_,_,_,G,H),
            F=mutable(active),
            G==C,
            E=t(94,D,B),
            'chr novel_production'(D, E),
            'chr novel_production'(B, E) ->
            'chr extend_history'(D, E),
            '$chr_translate__activate_constraint'(I, _, D, J),
            (   I==yes ->
                '$insert_in_store_set_all_passive/1'(D)
            ;   true
            ),
            passive(C, H),
            (   D=suspension(_,K,_,L,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'set_all_passive/1__0__0'(A, C, D)
            ;   true
            )
        ;   'set_all_passive/1__0__0'(A, C, D)
        ).
'set_all_passive/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'set_all_passive/1__0'(A,B), B, set_all_passive(A), [A]),
        'set_all_passive/1__1'(A, B).
'set_all_passive/1__1'(_, A) :- !,
        (   var(A) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(A, _, B),
            (   B==yes ->
                '$delete_from_store_set_all_passive/1'(A)
            ;   true
            )
        ).
'set_all_passive/1__1'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_set_all_passive/1'(A)
        ;   true
        ).
first_occ_in_rule(A, B, C, D) :-
        'first_occ_in_rule/4__0'(A, B, C, D, _).
'first_occ_in_rule/4__0'(A, B, C, _, _) :-
        '$via1_multi_hash_occurrence/4-3'(A, D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_,G,H,I,J),
        F=mutable(active),
        G==B,
        I==A,
        H<C, !,
        first_occ_in_rule(A, B, H, J).
'first_occ_in_rule/4__0'(D, E, F, G, _) :- !,
        E=A/B,
        functor(C, A, B),
        next_occ_in_rule(D, E, F, G, [], C).
next_occ_in_rule(A, B, C, D, E, F) :-
        'next_occ_in_rule/6__0'(A, B, C, D, E, F, _).
'next_occ_in_rule/6__0'(A, B, C, D, _, E, _) :-
        '$via1_multi_hash_occurrence/4-3'(A, F),
        'chr sbag_member'(G, F),
        G=suspension(_,H,_,_,_,_,I,J,K,L),
        H=mutable(active),
        I==B,
        K==A,
        '$via1_multi_hash_passive/2-12'(k(A,L), M),
        (   'chr sbag_member'(N, M),
            N=suspension(_,O,_,_,_,_,P,Q),
            O=mutable(active),
            P==A,
            Q==L ->
            true
        ),
        J is C+1, !,
        next_occ_in_rule(A, B, J, D, _, E).
'next_occ_in_rule/6__0'(B1, C1, D1, E1, F1, G1, _) :-
        '$via1_multi_hash_occurrence/4-3'(B1, H1),
        '$via1_multi_hash_prev_guard_list/7-1'(B1, I1),
        '$via1_multi_hash_rule/2-1'(B1, J1),
        'chr sbag_member'(K1, J1),
        K1=suspension(_,L1,_,_,_,_,M1,N1),
        L1=mutable(active),
        M1==B1,
        'chr sbag_member'(O1, I1),
        O1=suspension(_,P1,_,_,_,_,Q1,R1,S1,T1,U1,V1,W1),
        P1=mutable(active),
        Q1==B1,
        R1==0,
        W1==[],
        'chr sbag_member'(X1, H1),
        X1=suspension(_,Y1,_,_,_,_,Z1,A2,B2,C2),
        Y1=mutable(active),
        Z1==C1,
        B2==B1,
        A2 is D1+1,
        N1=pragma(rule(A,B,T1,_),ids(_,_),_,_,B1), !,
        append(A, B, C),
        add_failing_occ(N1, C, S1, E1, D, G1, V1, C1, E),
        (   D==[chr_pp_void_info] ->
            next_occ_in_rule(B1, C1, A2, C2, F1, G1)
        ;   append(D, F1, F),
            add_failing_occ(N1, C, S1, C2, G, G1, V1, C1, H),
            copy_term(U1, I),
            variable_replacement(U1, I, J),
            copy_with_variable_replacement(U1, K, E),
            copy_with_variable_replacement(U1, L, H),
            copy_with_variable_replacement(L, M, J),
            append(F, K, N),
            append(N, M, O),
            copy_with_variable_replacement(V1, P, E),
            copy_with_variable_replacement(V1, Q, H),
            append(Q, O, R),
            append([chr_pp_active_constraint(G1)|P], R, S),
            list2conj(G, T),
            copy_term((F,O,S,T,G1), (U,_,X,Z,A1)),
            term_variables(U-A1, V),
            flatten_stuff(X, W),
            flatten_stuff(Z, Y),
            (   T\=chr_pp_void_info,
                unify_stuff(V, W, Y), !,
                (   guard_entailment:entails_guard(X,Z) ->
                    passive(B1, C2)
                ;   true
                )
            ;   true
            ), !,
            next_occ_in_rule(B1, C1, A2, C2, F, G1)
        ).
'next_occ_in_rule/6__0'(_, _, _, _, _, _, _) :- !.
multiple_occ_constraints_checked(A) :-
        'multiple_occ_constraints_checked/1__0'(A, _).
'multiple_occ_constraints_checked/1__0'(B, _) :-
        chr_pp_flag(occurrence_subsumption, on),
        nb_getval('$chr_store_global_ground_chr_translate:rule/2', C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        '$via1_multi_hash_occurrence/4-3'(F, H),
        '$via1_multi_hash_occurrence/4-3'(F, I),
        '$via1_multi_hash_prev_guard_list/7-1'(F, J),
        'chr sbag_member'(K, J),
        K=suspension(_,L,_,_,_,_,M,N,_,_,_,_,O),
        L=mutable(active),
        M==F,
        N==0,
        O==[],
        'chr sbag_member'(P, I),
        P=suspension(_,Q,_,_,_,_,R,S,T,U),
        Q=mutable(active),
        T==F,
        'chr sbag_member'(V, H),
        V=suspension(_,W,_,_,_,_,X,Y,Z,_),
        W=mutable(active),
        V\==P,
        X==R,
        Z==F,
        S<Y,
        G=pragma(rule(A,_,_,_),_,_,_,F),
        A\==[],
        \+memberchk_eq(R,B), !,
        first_occ_in_rule(F, R, S, U),
        multiple_occ_constraints_checked([R|B]).
'multiple_occ_constraints_checked/1__0'(_, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', A),
        'chr sbag_member'(B, A),
        B=suspension(_,C,_,_,_,_,_,D,_,_,_,_,E),
        C=mutable(active),
        D==0,
        E==[], !,
        '$chr_translate__remove_constraint_internal'(B, _, F),
        (   F==yes ->
            '$delete_from_store_prev_guard_list/7'(B)
        ;   true
        ).
'multiple_occ_constraints_checked/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'multiple_occ_constraints_checked/1__0'(A,B), multiple_occ_constraints_checked(A), [A]),
        '$insert_in_store_multiple_occ_constraints_checked/1'(B).
type_definition(A, B) :-
        'type_definition/2__0'(A, B, _).
'type_definition/2__0'(A, B, C) :-
        (   var(C) ->
            '$chr_translate__insert_constraint_internal'(D, E, C, chr_translate:'type_definition/2__0'(A,B,C), type_definition(A,B), [A,B])
        ;   '$chr_translate__activate_constraint'(D, E, C, _)
        ),
        (   D==yes ->
            '$insert_in_store_type_definition/2'(C),
            'attach_type_definition/2'(E, C)
        ;   true
        ).
type_alias(A, B) :-
        'type_alias/2__0'(A, B, _).
'type_alias/2__0'(E, F, G) :-
        nonvar(F),
        nonvar(E),
        functor(E, A, B),
        functor(F, A, B),
        copy_term((E,F), (C,D)),
        oneway_unification(D, C), !,
        (   var(G) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(G, H, I),
            (   I==yes ->
                '$delete_from_store_type_alias/2'(G),
                'detach_type_alias/2'(H, G)
            ;   true
            )
        ),
        chr_error(type_error, 'Cyclic alias definition: "~w".\n', [E==F]).
'type_alias/2__0'(G, H, I) :-
        nonvar(G),
        'chr default_store'(A),
        get_attr(A, chr_translate, B),
        B=v(J,_,_,_,K,_),
        J/\8=:=8,
        'chr sbag_member'(L, K),
        L=suspension(_,M,_,_,_,_,N,O),
        M=mutable(active),
        nonvar(N),
        functor(G, C, D),
        functor(N, C, D),
        \+G\=N, !,
        '$chr_translate__remove_constraint_internal'(L, P, Q),
        (   Q==yes ->
            '$delete_from_store_type_alias/2'(L),
            'detach_type_alias/2'(P, L)
        ;   true
        ),
        (   var(I) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(I, R, S),
            (   S==yes ->
                '$delete_from_store_type_alias/2'(I),
                'detach_type_alias/2'(R, I)
            ;   true
            )
        ),
        copy_term_nat(G, E),
        copy_term_nat(N, F),
        E=F,
        chr_error(type_error, 'Ambiguous type aliases: you have defined \n             "~w"\n             "~w"\n         resulting in two definitions for "~w".\n', [G==H,N==O,E]).
'type_alias/2__0'(G, H, I) :-
        nonvar(G),
        'chr default_store'(A),
        get_attr(A, chr_translate, B),
        B=v(J,_,_,_,K,_),
        J/\8=:=8,
        'chr sbag_member'(L, K),
        L=suspension(_,M,_,_,_,_,N,O),
        M=mutable(active),
        nonvar(N),
        functor(N, C, D),
        functor(G, C, D),
        \+N\=G, !,
        '$chr_translate__remove_constraint_internal'(L, P, Q),
        (   Q==yes ->
            '$delete_from_store_type_alias/2'(L),
            'detach_type_alias/2'(P, L)
        ;   true
        ),
        (   var(I) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(I, R, S),
            (   S==yes ->
                '$delete_from_store_type_alias/2'(I),
                'detach_type_alias/2'(R, I)
            ;   true
            )
        ),
        copy_term_nat(N, E),
        copy_term_nat(G, F),
        E=F,
        chr_error(type_error, 'Ambiguous type aliases: you have defined \n             "~w"\n             "~w"\n         resulting in two definitions for "~w".\n', [N==O,G==H,E]).
'type_alias/2__0'(I, J, K) :-
        nonvar(J),
        'chr default_store'(A),
        get_attr(A, chr_translate, B),
        B=v(L,_,_,_,M,_),
        L/\8=:=8,
        'chr sbag_member'(N, M),
        N=suspension(_,O,_,_,_,_,P,Q),
        O=mutable(active),
        nonvar(P),
        functor(P, C, D),
        functor(J, C, D),
        copy_term_nat((I,J,P,Q), (E,F,G,H)),
        oneway_unification(F, G), !,
        (   var(K) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(K, R, S),
            (   S==yes ->
                '$delete_from_store_type_alias/2'(K),
                'detach_type_alias/2'(R, K)
            ;   true
            )
        ),
        chr_info(type_information, 'Inferring "~w" from "~w" and "~w".\n', [E==H,I==J,P==Q]),
        type_alias(E, H).
'type_alias/2__0'(C, D, E) :-
        'chr default_store'(A),
        get_attr(A, chr_translate, B),
        B=v(F,_,_,_,G,_),
        F/\8=:=8, !,
        (   var(E) ->
            '$chr_translate__allocate_constraint'(chr_translate:'type_alias/2__0'(C,D,E), E, type_alias(C,D), [C,D])
        ;   true
        ),
        'type_alias/2__0__0'(G, C, D, E).
'type_alias/2__0__0'([], A, B, C) :-
        'type_alias/2__1'(A, B, C).
'type_alias/2__0__0'([A|B], I, J, K) :-
        (   A=suspension(_,L,_,_,_,_,P,M),
            L=mutable(active),
            nonvar(M),
            nonvar(I),
            functor(I, C, D),
            functor(M, C, D),
            copy_term_nat((P,M,I,J), (E,F,G,H)),
            oneway_unification(F, G) ->
            '$chr_translate__remove_constraint_internal'(A, N, O),
            (   O==yes ->
                '$delete_from_store_type_alias/2'(A),
                'detach_type_alias/2'(N, A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(Q, R, K, S),
            (   Q==yes ->
                '$insert_in_store_type_alias/2'(K),
                'attach_type_alias/2'(R, K)
            ;   true
            ),
            chr_info(type_information, 'Inferring "~w" from "~w" and "~w".\n', [E==H,P==M,I==J]),
            type_alias(E, H),
            (   K=suspension(_,T,_,U,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'type_alias/2__0__0'(B, I, J, K)
            ;   true
            )
        ;   'type_alias/2__0__0'(B, I, J, K)
        ).
'type_alias/2__0'(A, B, C) :-
        (   var(C) ->
            '$chr_translate__allocate_constraint'(chr_translate:'type_alias/2__0'(A,B,C), C, type_alias(A,B), [A,B])
        ;   true
        ),
        'type_alias/2__1'(A, B, C).
'type_alias/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, C, A, _),
        (   B==yes ->
            '$insert_in_store_type_alias/2'(A),
            'attach_type_alias/2'(C, A)
        ;   true
        ).
constraint_type(A, B) :-
        'constraint_type/2__0'(A, B, _).
'constraint_type/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'constraint_type/2__0'(A,B,C), constraint_type(A,B), [A,B]),
        '$insert_in_store_constraint_type/2'(C).
get_type_definition(A, B) :-
        'get_type_definition/2__0'(A, B, _).
'get_type_definition/2__0'(A, _, _) :-
        \+ground(A), !,
        chr_error(type_error, 'Non-ground type in constraint definition: "~w".\n', [A]).
'get_type_definition/2__0'(G, H, _) :-
        nonvar(G),
        'chr default_store'(A),
        get_attr(A, chr_translate, B),
        B=v(I,_,_,_,J,_),
        I/\8=:=8,
        'chr sbag_member'(K, J),
        K=suspension(_,L,_,_,_,_,M,N),
        L=mutable(active),
        nonvar(M),
        functor(M, C, D),
        functor(G, C, D),
        copy_term_nat((M,N), (E,F)),
        E=G, !,
        (   get_type_definition(F, H) ->
            true
        ;   chr_error(type_error, 'Could not find type definition for "~w" (accessed via alias "~w").\n', [F,E]),
            fail
        ).
'get_type_definition/2__0'(G, H, _) :-
        nonvar(G),
        'chr default_store'(A),
        get_attr(A, chr_translate, B),
        B=v(I,_,_,J,_,_),
        I/\4=:=4,
        'chr sbag_member'(K, J),
        K=suspension(_,L,_,_,_,_,M,N),
        L=mutable(active),
        nonvar(M),
        functor(M, C, D),
        functor(G, C, D),
        copy_term_nat((M,N), (E,F)),
        E=G, !,
        H=F.
'get_type_definition/2__0'(A, B, _) :-
        builtin_type(A, _, _), !,
        B=[A].
'get_type_definition/2__0'(_, _, _) :- !,
        fail.
get_constraint_type(A, B) :-
        'get_constraint_type/2__0'(A, B, _).
'get_constraint_type/2__0'(A, B, _) :-
        '$via1_multi_hash_constraint_type/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        B=G.
'get_constraint_type/2__0'(_, _, _) :- !,
        fail.
add_type_information(A, B, C) :-
        'add_type_information/3__0'(A, B, C, _).
'add_type_information/3__0'(A, B, C, _) :-
        A==[],
        B==[], !,
        C=true.
'add_type_information/3__0'(O, P, Q, _) :-
        nonvar(O),
        O=[A|B],
        nonvar(P),
        P=[C|D],
        nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', R),
        'chr sbag_member'(S, R),
        S=suspension(_,T,_,_,_,_,U,V),
        T=mutable(active),
        nonvar(U),
        U=E/F,
        functor(A, E, F), !,
        A=..[_|G],
        C=..[_|H],
        add_mode_info(V, G, I),
        Q=(I,J),
        (   get_constraint_type(E/F, K) ->
            types2condition(K, G, H, V, L),
            list2conj(L, M),
            J=(M,N),
            add_type_information(B, D, N)
        ;   add_type_information(B, D, J)
        ).
'add_type_information/3__0'(D, _, _, _) :-
        nonvar(D),
        D=[A|_], !,
        functor(A, B, C),
        chr_error(internal, 'Mode information missing for ~w.\n', [B/C]).
'add_type_information/3__0'(A, B, C, D) :-
        '$chr_translate__insert_constraint_internal'(_, _, D, chr_translate:'add_type_information/3__0'(A,B,C,D), add_type_information(A,B,C), [A,B,C]),
        '$insert_in_store_add_type_information/3'(D).
stored(A, B, C) :-
        'stored/3__0'(A, B, C, _).
'stored/3__0'(B, C, D, _) :-
        D==yes,
        '$via1_multi_hash_stored_complete/3-1'(B, E),
        '$via1_multi_hash_occurrence/4-2'(C, F),
        'chr sbag_member'(G, F),
        G=suspension(_,H,_,_,_,_,I,J,K,L),
        H=mutable(active),
        I==B,
        J==C,
        '$via1_multi_hash_passive/2-12'(k(K,L), M),
        (   'chr sbag_member'(O, M),
            O=suspension(_,T,_,_,_,_,U,V),
            T=mutable(active),
            U==K,
            V==L ->
            true
        ),
        'chr sbag_member'(N, E),
        N=suspension(_,P,_,_,_,_,Q,R,S),
        P=mutable(active),
        Q==B,
        C<R, !,
        '$chr_translate__remove_constraint_internal'(N, _, W),
        (   W==yes ->
            '$delete_from_store_stored_complete/3'(N)
        ;   true
        ),
        A is S-1,
        stored(B, C, maybe),
        stored_complete(B, R, A).
'stored/3__0'(B, C, D, _) :-
        D==yes,
        '$via1_multi_hash_ai_not_observed/2-12'(k(B,C), E),
        '$via1_multi_hash_stored_complete/3-1'(B, F),
        'chr sbag_member'(G, F),
        G=suspension(_,H,_,_,_,_,I,J,K),
        H=mutable(active),
        I==B,
        C<J,
        'chr sbag_member'(L, E),
        L=suspension(_,M,_,_,_,_,N,O),
        M=mutable(active),
        N==B,
        O==C, !,
        '$chr_translate__remove_constraint_internal'(G, _, P),
        (   P==yes ->
            '$delete_from_store_stored_complete/3'(G)
        ;   true
        ),
        A is K-1,
        stored(B, C, maybe),
        stored_complete(B, J, A).
'stored/3__0'(A, B, C, D) :-
        '$chr_translate__insert_constraint_internal'(_, _, D, chr_translate:'stored/3__0'(A,B,C,D), stored(A,B,C), [A,B,C]),
        '$insert_in_store_stored/3'(D).
stored_completing(A, B, C) :-
        'stored_completing/3__0'(A, B, C, _).
'stored_completing/3__0'(C, D, E, _) :-
        '$via1_multi_hash_stored/3-2'(D, F),
        'chr sbag_member'(G, F),
        G=suspension(_,H,_,_,_,_,I,J,K),
        H=mutable(active),
        I==C,
        J==D,
        K==yes, !,
        A is D+1,
        B is E+1,
        stored_completing(C, A, B).
'stored_completing/3__0'(B, C, D, _) :-
        '$via1_multi_hash_stored/3-2'(C, E),
        'chr sbag_member'(F, E),
        F=suspension(_,G,_,_,_,_,H,I,J),
        G=mutable(active),
        H==B,
        I==C,
        J==maybe, !,
        A is C+1,
        stored_completing(B, A, D).
'stored_completing/3__0'(A, B, C, _) :-
        '$via1_multi_hash_stored/3-2'(B, D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_,G,H,I),
        F=mutable(active),
        G==A,
        H==B,
        I==no, !,
        stored_complete(A, B, C).
'stored_completing/3__0'(A, B, C, _) :- !,
        stored_complete(A, B, C).
stored_complete(A, B, C) :-
        'stored_complete/3__0'(A, B, C, _).
'stored_complete/3__0'(B, C, D, _) :-
        '$via1_multi_hash_occurrence/4-1'(B, E),
        'chr sbag_member'(F, E),
        F=suspension(_,G,_,_,_,_,H,I,J,K),
        G=mutable(active),
        H==B,
        I<C,
        '$via1_multi_hash_stored/3-2'(I, L),
        '$via1_multi_hash_passive/2-12'(k(J,K), M),
        (   'chr sbag_member'(O, M),
            O=suspension(_,T,_,_,_,_,U,V),
            T=mutable(active),
            U==J,
            V==K ->
            true
        ),
        'chr sbag_member'(N, L),
        N=suspension(_,P,_,_,_,_,Q,R,S),
        P=mutable(active),
        Q==B,
        R==I,
        S==yes, !,
        '$chr_translate__remove_constraint_internal'(N, _, W),
        (   W==yes ->
            '$delete_from_store_stored/3'(N)
        ;   true
        ),
        A is D-1,
        stored(B, I, maybe),
        stored_complete(B, C, A).
'stored_complete/3__0'(B, C, D, _) :-
        '$via1_multi_hash_stored/3-1'(B, E),
        'chr sbag_member'(F, E),
        F=suspension(_,G,_,_,_,_,H,I,J),
        G=mutable(active),
        H==B,
        J==yes,
        I<C,
        '$via1_multi_hash_ai_not_observed/2-12'(k(B,I), K),
        'chr sbag_member'(L, K),
        L=suspension(_,M,_,_,_,_,N,O),
        M=mutable(active),
        N==B,
        O==I, !,
        '$chr_translate__remove_constraint_internal'(F, _, P),
        (   P==yes ->
            '$delete_from_store_stored/3'(F)
        ;   true
        ),
        A is D-1,
        stored(B, I, maybe),
        stored_complete(B, C, A).
'stored_complete/3__0'(A, B, C, D) :-
        C==0,
        '$via1_multi_hash_max_occurrence/2-1'(A, E), !,
        '$chr_translate__allocate_constraint'(chr_translate:'stored_complete/3__0'(A,B,C,D), D, stored_complete(A,B,C), [A,B,C]),
        'stored_complete/3__0__0'(E, A, B, C, D).
'stored_complete/3__0__0'([], A, B, C, D) :-
        'stored_complete/3__1'(A, B, C, D).
'stored_complete/3__0__0'([F|A], B, C, D, E) :-
        (   F=suspension(_,I,_,_,_,_,J,H),
            I=mutable(active),
            J==B,
            '$via1_multi_hash_occurrence/4-1'(B, G) ->
            'stored_complete/3__0__1'(G, H, F, A, B, C, D, E)
        ;   'stored_complete/3__0__0'(A, B, C, D, E)
        ).
'stored_complete/3__0__1'([], _, _, A, B, C, D, E) :-
        'stored_complete/3__0__0'(A, B, C, D, E).
'stored_complete/3__0__1'([I|A], B, C, D, E, F, G, H) :-
        (   I=suspension(_,L,_,_,_,_,M,_,K,_),
            L=mutable(active),
            M==E,
            '$via1_multi_hash_occurrence/4-3'(K, J) ->
            'stored_complete/3__0__2'(J, K, I, A, B, C, D, E, F, G, H)
        ;   'stored_complete/3__0__1'(A, B, C, D, E, F, G, H)
        ).
'stored_complete/3__0__2'([], _, _, A, B, C, D, E, F, G, H) :-
        'stored_complete/3__0__1'(A, B, C, D, E, F, G, H).
'stored_complete/3__0__2'([B|A], C, D, E, F, G, H, I, J, K, L) :-
        (   B=suspension(_,N,_,_,_,_,_,_,O,P),
            N=mutable(active),
            B\==D,
            O==C,
            M=t(119,G,D,L,B),
            'chr novel_production'(G, M),
            'chr novel_production'(D, M),
            'chr novel_production'(L, M),
            'chr novel_production'(B, M),
            J=<F ->
            'chr extend_history'(L, M),
            '$chr_translate__activate_constraint'(Q, _, L, R),
            (   Q==yes ->
                '$insert_in_store_stored_complete/3'(L)
            ;   true
            ),
            passive(C, P),
            (   L=suspension(_,S,_,T,_,_,_,_,_),
                S=mutable(active),
                T=mutable(R) ->
                'chr update_mutable'(inactive, S),
                'stored_complete/3__0__2'(A, C, D, E, F, G, H, I, J, K, L)
            ;   true
            )
        ;   'stored_complete/3__0__2'(A, C, D, E, F, G, H, I, J, K, L)
        ).
'stored_complete/3__0'(A, B, C, D) :-
        '$chr_translate__allocate_constraint'(chr_translate:'stored_complete/3__0'(A,B,C,D), D, stored_complete(A,B,C), [A,B,C]),
        'stored_complete/3__1'(A, B, C, D).
'stored_complete/3__1'(A, B, C, D) :-
        '$via1_multi_hash_occurrence/4-1'(A, E), !,
        'stored_complete/3__1__0'(E, A, B, C, D).
'stored_complete/3__1__0'([], A, B, C, D) :-
        'stored_complete/3__2'(A, B, C, D).
'stored_complete/3__1__0'([B|A], C, D, E, F) :-
        (   B=suspension(_,H,_,_,_,_,I,J,K,L),
            H=mutable(active),
            I==C,
            G=t(128,F,B),
            'chr novel_production'(F, G),
            'chr novel_production'(B, G),
            J>D ->
            'chr extend_history'(F, G),
            '$chr_translate__activate_constraint'(M, _, F, N),
            (   M==yes ->
                '$insert_in_store_stored_complete/3'(F)
            ;   true
            ),
            passive(K, L),
            (   F=suspension(_,O,_,P,_,_,_,_,_),
                O=mutable(active),
                P=mutable(N) ->
                'chr update_mutable'(inactive, O),
                'stored_complete/3__1__0'(A, C, D, E, F)
            ;   true
            )
        ;   'stored_complete/3__1__0'(A, C, D, E, F)
        ).
'stored_complete/3__1'(A, B, C, D) :-
        'stored_complete/3__2'(A, B, C, D).
'stored_complete/3__2'(_, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_stored_complete/3'(A)
        ;   true
        ).
is_stored(A) :-
        'is_stored/1__0'(A, _).
'is_stored/1__0'(A, _) :-
        '$via1_multi_hash_stored_complete/3-1'(A, B),
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        (   'chr sbag_member'(E, C),
            E=suspension(_,J,_,_,_,_,K,L),
            J=mutable(active),
            K==A ->
            true
        ),
        'chr sbag_member'(D, B),
        D=suspension(_,F,_,_,_,_,G,H,I),
        F=mutable(active),
        G==A,
        I==0,
        H=<L, !,
        fail.
'is_stored/1__0'(_, _) :- !.
is_finally_stored(A) :-
        'is_finally_stored/1__0'(A, _).
'is_finally_stored/1__0'(A, _) :-
        '$via1_multi_hash_stored_complete/3-1'(A, B),
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        (   'chr sbag_member'(E, C),
            E=suspension(_,I,_,_,_,_,J,K),
            I=mutable(active),
            J==A ->
            true
        ),
        'chr sbag_member'(D, B),
        D=suspension(_,F,_,_,_,_,G,H,_),
        F=mutable(active),
        G==A,
        H=<K, !,
        fail.
'is_finally_stored/1__0'(_, _) :- !.
check_all_passive(A, B) :-
        'check_all_passive/2__0'(A, B, _).
'check_all_passive/2__0'(C, D, _) :-
        nonvar(D),
        D=[A|B],
        '$via1_multi_hash_passive/2-12'(k(C,A), E),
        (   'chr sbag_member'(F, E),
            F=suspension(_,G,_,_,_,_,H,I),
            G=mutable(active),
            H==C,
            I==A ->
            true
        ), !,
        check_all_passive(C, B).
'check_all_passive/2__0'(A, B, _) :-
        B==[],
        '$via1_multi_hash_rule/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A, !,
        chr_warning(weird_program, 'All heads passive in ~@.\n\tThis rule never fires. Please check your program.\n', [format_rule(G)]).
'check_all_passive/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'check_all_passive/2__0'(A,B,C), check_all_passive(A,B), [A,B]),
        '$insert_in_store_check_all_passive/2'(C).
constraints_code1(A, B, C) :-
        'constraints_code1/3__0'(A, B, C, _).
'constraints_code1/3__0'(A, B, C, _) :-
        A==[], !,
        B=C.
'constraints_code1/3__0'(D, E, F, _) :-
        nonvar(D),
        D=[A|B], !,
        constraint_code(A, E, C),
        constraints_code1(B, C, F).
'constraints_code1/3__0'(A, B, C, D) :-
        '$chr_translate__insert_constraint_internal'(_, _, D, chr_translate:'constraints_code1/3__0'(A,B,C,D), constraints_code1(A,B,C), [A,B,C]),
        '$insert_in_store_constraints_code1/3'(D).
constraint_code(A, B, C) :-
        'constraint_code/3__0'(A, B, C, _).
'constraint_code/3__0'(H, I, J, _) :- !,
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(H),
                (   has_active_occurrence(H)
                ;   chr_pp_flag(late_allocation, off)
                ),
                (   may_trigger(H)
                ;   get_allocation_occurrence(H, F),
                    get_max_occurrence(H, G),
                    G>=F
                )
            ) ->
            constraint_prelude(H, D),
            I=[D|E]
        ;   I=E
        ),
        A=[0],
        occurrences_code(H, 1, A, B, E, C),
        gen_cond_attach_clause(H, B, C, J).
has_active_occurrence(A) :-
        'has_active_occurrence/1__0'(A, _).
'has_active_occurrence/1__0'(A, _) :- !,
        has_active_occurrence(A, 1).
has_active_occurrence(A, B) :-
        'has_active_occurrence/2__0'(A, B, _).
'has_active_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        (   'chr sbag_member'(E, C),
            E=suspension(_,F,_,_,_,_,G,D),
            F=mutable(active),
            G==A ->
            true
        ),
        B>D, !,
        fail.
'has_active_occurrence/2__0'(B, C, _) :-
        '$via1_multi_hash_occurrence/4-2'(C, D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_,G,H,I,J),
        F=mutable(active),
        G==B,
        H==C,
        '$via1_multi_hash_passive/2-12'(k(I,J), K),
        (   'chr sbag_member'(L, K),
            L=suspension(_,M,_,_,_,_,N,O),
            M=mutable(active),
            N==I,
            O==J ->
            true
        ), !,
        A is C+1,
        has_active_occurrence(B, A).
'has_active_occurrence/2__0'(_, _, _) :- !.
use_auxiliary_predicate(A) :-
        'use_auxiliary_predicate/1__0'(A, _).
'use_auxiliary_predicate/1__0'(A, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B),
        (   'chr sbag_member'(C, B),
            C=suspension(_,D,_,_,_,_,E),
            D=mutable(active),
            E==A ->
            true
        ), !.
'use_auxiliary_predicate/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'use_auxiliary_predicate/1__0'(A,B), use_auxiliary_predicate(A), [A]),
        '$insert_in_store_use_auxiliary_predicate/1'(B).
use_auxiliary_predicate(A, B) :-
        'use_auxiliary_predicate/2__0'(A, B, _).
'use_auxiliary_predicate/2__0'(A, B, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'use_auxiliary_predicate/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'use_auxiliary_predicate/2__0'(A,B,C), use_auxiliary_predicate(A,B), [A,B]),
        '$insert_in_store_use_auxiliary_predicate/2'(C).
is_used_auxiliary_predicate(A) :-
        'is_used_auxiliary_predicate/1__0'(A, _).
'is_used_auxiliary_predicate/1__0'(A, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B),
        (   'chr sbag_member'(C, B),
            C=suspension(_,D,_,_,_,_,E),
            D=mutable(active),
            E==A ->
            true
        ), !.
'is_used_auxiliary_predicate/1__0'(A, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-1'(A, B),
        'chr sbag_member'(C, B),
        C=suspension(_,D,_,_,_,_,E,_),
        D=mutable(active),
        E==A, !.
'is_used_auxiliary_predicate/1__0'(_, _) :- !,
        fail.
is_used_auxiliary_predicate(A, B) :-
        'is_used_auxiliary_predicate/2__0'(A, B, _).
'is_used_auxiliary_predicate/2__0'(A, _, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B),
        (   'chr sbag_member'(C, B),
            C=suspension(_,D,_,_,_,_,E),
            D=mutable(active),
            E==A ->
            true
        ), !.
'is_used_auxiliary_predicate/2__0'(A, B, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'is_used_auxiliary_predicate/2__0'(_, _, _) :- !,
        fail.
occurrences_code(A, B, C, D, E, F) :-
        'occurrences_code/6__0'(A, B, C, D, E, F, _).
'occurrences_code/6__0'(A, B, C, D, E, F, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, G),
        (   'chr sbag_member'(I, G),
            I=suspension(_,J,_,_,_,_,K,H),
            J=mutable(active),
            K==A ->
            true
        ),
        B>H, !,
        D=C,
        E=F.
'occurrences_code/6__0'(D, E, F, G, H, I, _) :- !,
        occurrence_code(D, E, F, A, H, B),
        C is E+1,
        occurrences_code(D, C, A, G, B, I).
occurrence_code(A, B, C, D, E, F) :-
        'occurrence_code/6__0'(A, B, C, D, E, F, _).
'occurrence_code/6__0'(A, B, C, D, E, F, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, G),
        'chr sbag_member'(H, G),
        H=suspension(_,I,_,_,_,_,J,K,L,M),
        I=mutable(active),
        J==A,
        K==B,
        '$via1_multi_hash_passive/2-12'(k(L,M), N),
        (   'chr sbag_member'(O, N),
            O=suspension(_,P,_,_,_,_,Q,R),
            P=mutable(active),
            Q==L,
            R==M ->
            true
        ), !,
        D=C,
        E=F.
'occurrence_code/6__0'(L, M, N, O, P, Q, _) :-
        '$via1_multi_hash_occurrence/4-2'(M, R),
        'chr sbag_member'(S, R),
        S=suspension(_,T,_,_,_,_,U,V,W,X),
        T=mutable(active),
        U==L,
        V==M,
        '$via1_multi_hash_rule/2-1'(W, Y),
        'chr sbag_member'(Z, Y),
        Z=suspension(_,A1,_,_,_,_,B1,C1),
        A1=mutable(active),
        B1==W, !,
        C1=pragma(rule(A,B,_,_),ids(C,D),_,_,_),
        (   select2(X, E, C, A, F, G) ->
            O=N,
            head1_code(E, G, F, C1, L, M, N, P, Q)
        ;   select2(X, H, D, B, I, J) ->
            head2_code(H, J, I, C1, L, M, N, P, K),
            inc_id(N, O),
            (   unconditional_occurrence(L, M) ->
                K=Q
            ;   gen_alloc_inc_clause(L, M, N, K, Q)
            )
        ).
'occurrence_code/6__0'(A, B, _, _, _, _, _) :- !,
        chr_error(internal, 'occurrence_code/6: missing information to compile ~w:~w\n', [A,B]).
functional_dependency(A, B, C, D) :-
        'functional_dependency/4__0'(A, B, C, D, _).
'functional_dependency/4__0'(A, B, C, D, _) :-
        B>1,
        '$via1_multi_hash_occurrence/4-3'(B, E),
        '$via1_multi_hash_allocation_occurrence/2-1'(A, F),
        'chr sbag_member'(G, F),
        G=suspension(_,H,_,_,_,_,I,J),
        H=mutable(active),
        I==A,
        'chr sbag_member'(K, E),
        K=suspension(_,L,_,_,_,_,M,N,O,_),
        L=mutable(active),
        M==A,
        O==B,
        J>N, !,
        functional_dependency(A, 1, C, D).
'functional_dependency/4__0'(A, B, C, D, E) :-
        '$chr_translate__insert_constraint_internal'(_, _, E, chr_translate:'functional_dependency/4__0'(A,B,C,D,E), functional_dependency(A,B,C,D), [A,B,C,D]),
        '$insert_in_store_functional_dependency/4'(E).
get_functional_dependency(A, B, C, D) :-
        'get_functional_dependency/4__0'(A, B, C, D, _).
'get_functional_dependency/4__0'(A, B, C, D, _) :-
        '$via1_multi_hash_functional_dependency/4-1'(A, E),
        'chr sbag_member'(F, E),
        F=suspension(_,G,_,_,_,_,H,I,J,K),
        G=mutable(active),
        H==A,
        B>=I, !,
        C=J,
        D=K.
'get_functional_dependency/4__0'(_, _, _, _, _) :- !,
        fail.
initial_call_pattern(A) :-
        'initial_call_pattern/1__0'(A, _).
'initial_call_pattern/1__0'(A, _) :-
        '$via1_multi_hash_initial_call_pattern/1-1'(A, B),
        (   'chr sbag_member'(C, B),
            C=suspension(_,D,_,_,_,_,E),
            D=mutable(active),
            E==A ->
            true
        ), !.
'initial_call_pattern/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'initial_call_pattern/1__0'(A,B), B, initial_call_pattern(A), [A]),
        'chr novel_production'(B, 166), !,
        'chr extend_history'(B, 166),
        '$chr_translate__activate_constraint'(C, _, B, D),
        (   C==yes ->
            '$insert_in_store_initial_call_pattern/1'(B)
        ;   true
        ),
        call_pattern(A),
        (   B=suspension(_,E,_,F,_,_,_),
            E=mutable(active),
            F=mutable(D) ->
            'chr update_mutable'(inactive, E),
            'initial_call_pattern/1__1'(A, B)
        ;   true
        ).
'initial_call_pattern/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'initial_call_pattern/1__0'(A,B), B, initial_call_pattern(A), [A]),
        'initial_call_pattern/1__1'(A, B).
'initial_call_pattern/1__1'(A, B) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, C), !,
        'initial_call_pattern/1__1__0'(C, A, B).
'initial_call_pattern/1__1__0'([], A, B) :-
        'initial_call_pattern/1__2'(A, B).
'initial_call_pattern/1__1__0'([D|A], B, C) :-
        (   D=suspension(_,G,_,_,_,_,H,F),
            G=mutable(active),
            H==B,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', E) ->
            'initial_call_pattern/1__1__1'(E, F, D, A, B, C)
        ;   'initial_call_pattern/1__1__0'(A, B, C)
        ).
'initial_call_pattern/1__1__1'([], _, _, A, B, C) :-
        'initial_call_pattern/1__1__0'(A, B, C).
'initial_call_pattern/1__1__1'([B|A], C, D, E, F, G) :-
        (   B=suspension(_,I,_,_,_,_,J),
            I=mutable(active),
            H=t(167,G,D,B),
            'chr novel_production'(G, H),
            'chr novel_production'(D, H),
            'chr novel_production'(B, H) ->
            'chr extend_history'(G, H),
            '$chr_translate__activate_constraint'(K, _, G, L),
            (   K==yes ->
                '$insert_in_store_initial_call_pattern/1'(G)
            ;   true
            ),
            ai_observation_schedule_new_calls(J, C),
            (   G=suspension(_,M,_,N,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'initial_call_pattern/1__1__1'(A, C, D, E, F, G)
            ;   true
            )
        ;   'initial_call_pattern/1__1__1'(A, C, D, E, F, G)
        ).
'initial_call_pattern/1__1'(A, B) :-
        'initial_call_pattern/1__2'(A, B).
'initial_call_pattern/1__2'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_initial_call_pattern/1'(A)
        ;   true
        ).
call_pattern(A) :-
        'call_pattern/1__0'(A, _).
'call_pattern/1__0'(A, _) :-
        '$via1_multi_hash_call_pattern/1-1'(A, B),
        (   'chr sbag_member'(C, B),
            C=suspension(_,D,_,_,_,_,E),
            D=mutable(active),
            E==A ->
            true
        ), !.
'call_pattern/1__0'(C, D) :-
        nonvar(C),
        C=odom(A,B),
        A==[],
        '$chr_translate__allocate_constraint'(chr_translate:'call_pattern/1__0'(C,D), D, call_pattern(C), [C]),
        'chr novel_production'(D, 170), !,
        'chr extend_history'(D, 170),
        '$chr_translate__activate_constraint'(E, _, D, F),
        (   E==yes ->
            '$insert_in_store_call_pattern/1'(D)
        ;   true
        ),
        final_answer_pattern(odom([],B), odom([],B)),
        (   D=suspension(_,G,_,H,_,_,_),
            G=mutable(active),
            H=mutable(F) ->
            'chr update_mutable'(inactive, G),
            'call_pattern/1__1'(C, D)
        ;   true
        ).
'call_pattern/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'call_pattern/1__0'(A,B), B, call_pattern(A), [A]),
        'call_pattern/1__1'(A, B).
'call_pattern/1__1'(F, G) :-
        nonvar(F),
        F=odom(A,B),
        nonvar(A),
        A=[C|D],
        'chr novel_production'(G, 171), !,
        'chr extend_history'(G, 171),
        '$chr_translate__activate_constraint'(H, _, G, I),
        (   H==yes ->
            '$insert_in_store_call_pattern/1'(G)
        ;   true
        ),
        E=odom(C,B),
        depends_on_goal(odom([C|D],B), E),
        call_pattern(E),
        (   G=suspension(_,J,_,K,_,_,_),
            J=mutable(active),
            K=mutable(I) ->
            'chr update_mutable'(inactive, J),
            'call_pattern/1__2'(F, G)
        ;   true
        ).
'call_pattern/1__1'(A, B) :-
        'call_pattern/1__2'(A, B).
'call_pattern/1__2'(D, E) :-
        nonvar(D),
        D=odom(A,B),
        A==builtin,
        'chr novel_production'(E, 174), !,
        'chr extend_history'(E, 174),
        '$chr_translate__activate_constraint'(F, _, E, G),
        (   F==yes ->
            '$insert_in_store_call_pattern/1'(E)
        ;   true
        ),
        ord_empty(C),
        final_answer_pattern(odom(builtin,B), odom([],C)),
        (   E=suspension(_,H,_,I,_,_,_),
            H=mutable(active),
            I=mutable(G) ->
            'chr update_mutable'(inactive, H),
            'call_pattern/1__3'(D, E)
        ;   true
        ).
'call_pattern/1__2'(A, B) :-
        'call_pattern/1__3'(A, B).
'call_pattern/1__3'(E, F) :-
        nonvar(E),
        E=odom(A,B),
        nonvar(A),
        A=occ(C,D),
        '$via1_multi_hash_max_occurrence/2-1'(C, G), !,
        'call_pattern/1__3__0'(G, E, F, C, D, B).
'call_pattern/1__3__0'([], A, B, _, _, _) :-
        'call_pattern/1__4'(A, B).
'call_pattern/1__3__0'([B|A], C, D, E, F, G) :-
        (   B=suspension(_,I,_,_,_,_,J,K),
            I=mutable(active),
            J==E,
            H=t(175,D,B),
            'chr novel_production'(D, H),
            'chr novel_production'(B, H),
            F>K ->
            'chr extend_history'(D, H),
            '$chr_translate__activate_constraint'(L, _, D, M),
            (   L==yes ->
                '$insert_in_store_call_pattern/1'(D)
            ;   true
            ),
            final_answer_pattern(odom(occ(E,F),G), odom([],G)),
            (   D=suspension(_,N,_,O,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'call_pattern/1__3__0'(A, C, D, E, F, G)
            ;   true
            )
        ;   'call_pattern/1__3__0'(A, C, D, E, F, G)
        ).
'call_pattern/1__3'(A, B) :-
        'call_pattern/1__4'(A, B).
'call_pattern/1__4'(C, D) :-
        nonvar(C),
        C=odom(A,B),
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', E), !,
        'call_pattern/1__4__0'(E, C, D, A, B).
'call_pattern/1__4__0'([], A, B, _, _) :-
        'call_pattern/1__5'(A, B).
'call_pattern/1__4__0'([B|A], D, E, F, G) :-
        (   B=suspension(_,I,_,_,_,_,J),
            I=mutable(active),
            H=t(176,E,B),
            'chr novel_production'(E, H),
            'chr novel_production'(B, H),
            memberchk_eq(F, J) ->
            'chr extend_history'(E, H),
            '$chr_translate__activate_constraint'(K, _, E, L),
            (   K==yes ->
                '$insert_in_store_call_pattern/1'(E)
            ;   true
            ),
            C=odom(occ(F,1),G),
            call_pattern(C),
            depends_on(odom(F,G), C),
            (   E=suspension(_,M,_,N,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'call_pattern/1__4__0'(A, D, E, F, G)
            ;   true
            )
        ;   'call_pattern/1__4__0'(A, D, E, F, G)
        ).
'call_pattern/1__4'(A, B) :-
        'call_pattern/1__5'(A, B).
'call_pattern/1__5'(E, F) :-
        nonvar(E),
        E=odom(A,B),
        nonvar(A),
        A=occ(C,D),
        '$via1_multi_hash_occurrence/4-2'(D, G), !,
        'call_pattern/1__5__0'(G, E, F, C, D, B).
'call_pattern/1__5__0'([], A, B, _, _, _) :-
        'call_pattern/1__6'(A, B).
'call_pattern/1__5__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,K,_,_,_,_,L,M,I,J),
            K=mutable(active),
            L==D,
            M==E,
            '$via1_multi_hash_rule/2-1'(I, H) ->
            'call_pattern/1__5__1'(H, I, J, G, A, B, C, D, E, F)
        ;   'call_pattern/1__5__0'(A, B, C, D, E, F)
        ).
'call_pattern/1__5__1'([], _, _, _, A, B, C, D, E, F) :-
        'call_pattern/1__5__0'(A, B, C, D, E, F).
'call_pattern/1__5__1'([K|A], B, C, D, E, F, G, H, I, J) :-
        (   K=suspension(_,N,_,_,_,_,O,M),
            N=mutable(active),
            O==B,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', L) ->
            'call_pattern/1__5__2'(L, M, K, A, B, C, D, E, F, G, H, I, J)
        ;   'call_pattern/1__5__1'(A, B, C, D, E, F, G, H, I, J)
        ).
'call_pattern/1__5__2'([], _, _, A, B, C, D, E, F, G, H, I, J) :-
        'call_pattern/1__5__1'(A, B, C, D, E, F, G, H, I, J).
'call_pattern/1__5__2'([B|A], F, G, H, I, J, K, L, M, N, O, P, Q) :-
        (   B=suspension(_,S,_,_,_,_,_),
            S=mutable(active),
            R=t(177,N,K,G,B),
            'chr novel_production'(N, R),
            'chr novel_production'(K, R),
            'chr novel_production'(G, R),
            'chr novel_production'(B, R),
            F=pragma(rule(_,_,_,_),ids(E,_),_,_,_),
            memberchk_eq(J, E),
            is_passive(I, J) ->
            'chr extend_history'(N, R),
            '$chr_translate__activate_constraint'(T, _, N, U),
            (   T==yes ->
                '$insert_in_store_call_pattern/1'(N)
            ;   true
            ),
            C is P+1,
            D=odom(occ(O,C),Q),
            call_pattern(D),
            depends_on(odom(occ(O,P),Q), D),
            (   N=suspension(_,V,_,W,_,_,_),
                V=mutable(active),
                W=mutable(U) ->
                'chr update_mutable'(inactive, V),
                'call_pattern/1__5__2'(A, F, G, H, I, J, K, L, M, N, O, P, Q)
            ;   true
            )
        ;   'call_pattern/1__5__2'(A, F, G, H, I, J, K, L, M, N, O, P, Q)
        ).
'call_pattern/1__5'(A, B) :-
        'call_pattern/1__6'(A, B).
'call_pattern/1__6'(E, F) :-
        nonvar(E),
        E=odom(A,B),
        nonvar(A),
        A=occ(C,D),
        '$via1_multi_hash_occurrence/4-2'(D, G), !,
        'call_pattern/1__6__0'(G, E, F, C, D, B).
'call_pattern/1__6__0'([], A, B, _, _, _) :-
        'call_pattern/1__7'(A, B).
'call_pattern/1__6__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,K,_,_,_,_,L,M,I,J),
            K=mutable(active),
            L==D,
            M==E,
            '$via1_multi_hash_rule/2-1'(I, H) ->
            'call_pattern/1__6__1'(H, I, J, G, A, B, C, D, E, F)
        ;   'call_pattern/1__6__0'(A, B, C, D, E, F)
        ).
'call_pattern/1__6__1'([], _, _, _, A, B, C, D, E, F) :-
        'call_pattern/1__6__0'(A, B, C, D, E, F).
'call_pattern/1__6__1'([K|A], B, C, D, E, F, G, H, I, J) :-
        (   K=suspension(_,N,_,_,_,_,O,M),
            N=mutable(active),
            O==B,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', L) ->
            'call_pattern/1__6__2'(L, M, K, A, B, C, D, E, F, G, H, I, J)
        ;   'call_pattern/1__6__1'(A, B, C, D, E, F, G, H, I, J)
        ).
'call_pattern/1__6__2'([], _, _, A, B, C, D, E, F, G, H, I, J) :-
        'call_pattern/1__6__1'(A, B, C, D, E, F, G, H, I, J).
'call_pattern/1__6__2'([B|A], P, Q, R, S, T, U, V, W, X, Y, Z, A1) :-
        (   B=suspension(_,C1,_,_,_,_,D1),
            C1=mutable(active),
            B1=t(178,X,U,Q,B),
            'chr novel_production'(X, B1),
            'chr novel_production'(U, B1),
            'chr novel_production'(Q, B1),
            'chr novel_production'(B, B1),
            P=pragma(rule(E,F,G,H),ids(I,_),_,_,_),
            memberchk_eq(T, I),
            \+is_passive(S,T) ->
            'chr extend_history'(X, B1),
            '$chr_translate__activate_constraint'(E1, _, X, F1),
            (   E1==yes ->
                '$insert_in_store_call_pattern/1'(X)
            ;   true
            ),
            once(select2(T,_,I,E,_,C)),
            ai_observation_abstract_constraints(C, D1, D),
            ai_observation_observe_list(odom([],A1), D, odom([],J)),
            ai_observation_abstract_constraints(F, D1, K),
            ai_observation_observe_list(odom([],J), K, odom([],L)),
            ai_observation_abstract_goal_(E, F, G, H, D1, M),
            call_pattern(odom(M,L)),
            N is Z+1,
            O=odom(occ(Y,N),A1),
            call_pattern(O),
            depends_on_as(odom(occ(Y,Z),A1), odom(M,L), O),
            final_answer_pattern(odom(occ(Y,Z),A1), odom([],A1)),
            (   X=suspension(_,G1,_,H1,_,_,_),
                G1=mutable(active),
                H1=mutable(F1) ->
                'chr update_mutable'(inactive, G1),
                'call_pattern/1__6__2'(A, P, Q, R, S, T, U, V, W, X, Y, Z, A1)
            ;   true
            )
        ;   'call_pattern/1__6__2'(A, P, Q, R, S, T, U, V, W, X, Y, Z, A1)
        ).
'call_pattern/1__6'(A, B) :-
        'call_pattern/1__7'(A, B).
'call_pattern/1__7'(E, F) :-
        nonvar(E),
        E=odom(A,B),
        nonvar(A),
        A=occ(C,D),
        '$via1_multi_hash_occurrence/4-2'(D, G), !,
        'call_pattern/1__7__0'(G, E, F, C, D, B).
'call_pattern/1__7__0'([], A, B, _, _, _) :-
        'call_pattern/1__8'(A, B).
'call_pattern/1__7__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,K,_,_,_,_,L,M,I,J),
            K=mutable(active),
            L==D,
            M==E,
            '$via1_multi_hash_rule/2-1'(I, H) ->
            'call_pattern/1__7__1'(H, I, J, G, A, B, C, D, E, F)
        ;   'call_pattern/1__7__0'(A, B, C, D, E, F)
        ).
'call_pattern/1__7__1'([], _, _, _, A, B, C, D, E, F) :-
        'call_pattern/1__7__0'(A, B, C, D, E, F).
'call_pattern/1__7__1'([K|A], B, C, D, E, F, G, H, I, J) :-
        (   K=suspension(_,N,_,_,_,_,O,M),
            N=mutable(active),
            O==B,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', L) ->
            'call_pattern/1__7__2'(L, M, K, A, B, C, D, E, F, G, H, I, J)
        ;   'call_pattern/1__7__1'(A, B, C, D, E, F, G, H, I, J)
        ).
'call_pattern/1__7__2'([], _, _, A, B, C, D, E, F, G, H, I, J) :-
        'call_pattern/1__7__1'(A, B, C, D, E, F, G, H, I, J).
'call_pattern/1__7__2'([B|A], F, G, H, I, J, K, L, M, N, O, P, Q) :-
        (   B=suspension(_,S,_,_,_,_,_),
            S=mutable(active),
            R=t(180,N,K,G,B),
            'chr novel_production'(N, R),
            'chr novel_production'(K, R),
            'chr novel_production'(G, R),
            'chr novel_production'(B, R),
            F=pragma(rule(_,_,_,_),ids(_,E),_,_,_),
            memberchk_eq(J, E),
            is_passive(I, J) ->
            'chr extend_history'(N, R),
            '$chr_translate__activate_constraint'(T, _, N, U),
            (   T==yes ->
                '$insert_in_store_call_pattern/1'(N)
            ;   true
            ),
            C is P+1,
            D=odom(occ(O,C),Q),
            call_pattern(D),
            final_answer_pattern(odom(occ(O,P),Q), odom([],Q)),
            depends_on(odom(occ(O,P),Q), D),
            (   N=suspension(_,V,_,W,_,_,_),
                V=mutable(active),
                W=mutable(U) ->
                'chr update_mutable'(inactive, V),
                'call_pattern/1__7__2'(A, F, G, H, I, J, K, L, M, N, O, P, Q)
            ;   true
            )
        ;   'call_pattern/1__7__2'(A, F, G, H, I, J, K, L, M, N, O, P, Q)
        ).
'call_pattern/1__7'(A, B) :-
        'call_pattern/1__8'(A, B).
'call_pattern/1__8'(E, F) :-
        nonvar(E),
        E=odom(A,B),
        nonvar(A),
        A=occ(C,D),
        '$via1_multi_hash_occurrence/4-2'(D, G), !,
        'call_pattern/1__8__0'(G, E, F, C, D, B).
'call_pattern/1__8__0'([], A, B, _, _, _) :-
        'call_pattern/1__9'(A, B).
'call_pattern/1__8__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,K,_,_,_,_,L,M,I,J),
            K=mutable(active),
            L==D,
            M==E,
            '$via1_multi_hash_rule/2-1'(I, H) ->
            'call_pattern/1__8__1'(H, I, J, G, A, B, C, D, E, F)
        ;   'call_pattern/1__8__0'(A, B, C, D, E, F)
        ).
'call_pattern/1__8__1'([], _, _, _, A, B, C, D, E, F) :-
        'call_pattern/1__8__0'(A, B, C, D, E, F).
'call_pattern/1__8__1'([K|A], B, C, D, E, F, G, H, I, J) :-
        (   K=suspension(_,N,_,_,_,_,O,M),
            N=mutable(active),
            O==B,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', L) ->
            'call_pattern/1__8__2'(L, M, K, A, B, C, D, E, F, G, H, I, J)
        ;   'call_pattern/1__8__1'(A, B, C, D, E, F, G, H, I, J)
        ).
'call_pattern/1__8__2'([], _, _, A, B, C, D, E, F, G, H, I, J) :-
        'call_pattern/1__8__1'(A, B, C, D, E, F, G, H, I, J).
'call_pattern/1__8__2'([B|A], R, S, T, U, V, W, X, Y, Z, A1, B1, C1) :-
        (   B=suspension(_,E1,_,_,_,_,F1),
            E1=mutable(active),
            D1=t(181,Z,W,S,B),
            'chr novel_production'(Z, D1),
            'chr novel_production'(W, D1),
            'chr novel_production'(S, D1),
            'chr novel_production'(B, D1),
            R=pragma(rule(E,F,G,H),ids(_,I),_,_,_),
            memberchk_eq(V, I),
            \+is_passive(U,V) ->
            'chr extend_history'(Z, D1),
            '$chr_translate__activate_constraint'(G1, _, Z, H1),
            (   G1==yes ->
                '$insert_in_store_call_pattern/1'(Z)
            ;   true
            ),
            once(select2(V,_,I,F,_,C)),
            ai_observation_abstract_constraints(C, F1, D),
            ai_observation_observe_list(odom([],C1), D, odom([],J)),
            ai_observation_abstract_constraints(E, F1, K),
            ai_observation_observe_list(odom([],J), K, odom([],L)),
            ord_add_element(L, A1, M),
            ai_observation_abstract_goal_(E, F, G, H, F1, N),
            call_pattern(odom(N,M)),
            (   ord_memberchk(A1, L) ->
                P=no
            ;   P=yes
            ),
            O is B1+1,
            Q=odom(occ(A1,O),C1),
            call_pattern(Q),
            depends_on_ap(odom(occ(A1,B1),C1), odom(N,M), Q, P),
            (   Z=suspension(_,I1,_,J1,_,_,_),
                I1=mutable(active),
                J1=mutable(H1) ->
                'chr update_mutable'(inactive, I1),
                'call_pattern/1__8__2'(A, R, S, T, U, V, W, X, Y, Z, A1, B1, C1)
            ;   true
            )
        ;   'call_pattern/1__8__2'(A, R, S, T, U, V, W, X, Y, Z, A1, B1, C1)
        ).
'call_pattern/1__8'(A, B) :-
        'call_pattern/1__9'(A, B).
'call_pattern/1__9'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_call_pattern/1'(A)
        ;   true
        ).
final_answer_pattern(A, B) :-
        'final_answer_pattern/2__0'(A, B, _).
'final_answer_pattern/2__0'(A, B, _) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A,
        ai_observation_leq(B, G), !.
'final_answer_pattern/2__0'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'final_answer_pattern/2__0'(A,B,C), C, final_answer_pattern(A,B), [A,B]),
        'final_answer_pattern/2__0__0'(D, A, B, C).
'final_answer_pattern/2__0__0'([], A, B, C) :-
        'final_answer_pattern/2__1'(A, B, C).
'final_answer_pattern/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,G,H),
            F=mutable(active),
            G==C,
            ai_observation_leq(H, D) ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_final_answer_pattern/2'(A)
            ;   true
            ),
            'final_answer_pattern/2__0__0'(B, C, D, E)
        ;   'final_answer_pattern/2__0__0'(B, C, D, E)
        ).
'final_answer_pattern/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'final_answer_pattern/2__0'(A,B,C), C, final_answer_pattern(A,B), [A,B]),
        'final_answer_pattern/2__1'(A, B, C).
'final_answer_pattern/2__1'(A, B, C) :-
        '$via1_multi_hash_initial_call_pattern/1-1'(A, D), !,
        'final_answer_pattern/2__1__0'(D, A, B, C).
'final_answer_pattern/2__1__0'([], A, B, C) :-
        'final_answer_pattern/2__2'(A, B, C).
'final_answer_pattern/2__1__0'([E|A], B, C, D) :-
        (   E=suspension(_,G,_,_,_,_,H),
            G=mutable(active),
            H==B,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F) ->
            'final_answer_pattern/2__1__1'(F, E, A, B, C, D)
        ;   'final_answer_pattern/2__1__0'(A, B, C, D)
        ).
'final_answer_pattern/2__1__1'([], _, A, B, C, D) :-
        'final_answer_pattern/2__1__0'(A, B, C, D).
'final_answer_pattern/2__1__1'([B|A], C, D, E, F, G) :-
        (   B=suspension(_,I,_,_,_,_,J),
            I=mutable(active),
            H=t(167,C,G,B),
            'chr novel_production'(C, H),
            'chr novel_production'(G, H),
            'chr novel_production'(B, H) ->
            'chr extend_history'(G, H),
            '$chr_translate__activate_constraint'(K, _, G, L),
            (   K==yes ->
                '$insert_in_store_final_answer_pattern/2'(G)
            ;   true
            ),
            ai_observation_schedule_new_calls(J, F),
            (   G=suspension(_,M,_,N,_,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'final_answer_pattern/2__1__1'(A, C, D, E, F, G)
            ;   true
            )
        ;   'final_answer_pattern/2__1__1'(A, C, D, E, F, G)
        ).
'final_answer_pattern/2__1'(A, B, C) :-
        'final_answer_pattern/2__2'(A, B, C).
'final_answer_pattern/2__2'(A, B, C) :-
        '$via1_multi_hash_depends_on/2-2'(A, D), !,
        'final_answer_pattern/2__2__0'(D, A, B, C).
'final_answer_pattern/2__2__0'([], A, B, C) :-
        'final_answer_pattern/2__3'(A, B, C).
'final_answer_pattern/2__2__0'([B|A], C, D, E) :-
        (   B=suspension(_,G,_,_,_,_,I,H),
            G=mutable(active),
            H==C,
            F=t(169,B,E),
            'chr novel_production'(B, F),
            'chr novel_production'(E, F) ->
            'chr extend_history'(E, F),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_final_answer_pattern/2'(E)
            ;   true
            ),
            final_answer_pattern(I, D),
            (   E=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'final_answer_pattern/2__2__0'(A, C, D, E)
            ;   true
            )
        ;   'final_answer_pattern/2__2__0'(A, C, D, E)
        ).
'final_answer_pattern/2__2'(A, B, C) :-
        'final_answer_pattern/2__3'(A, B, C).
'final_answer_pattern/2__3'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D), !,
        'final_answer_pattern/2__3__0'(D, A, B, C).
'final_answer_pattern/2__3__0'([], A, B, C) :-
        'final_answer_pattern/2__4'(A, B, C).
'final_answer_pattern/2__3__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,I,_),
            F=mutable(active),
            '$via1_multi_hash_depends_on_goal/2-12'(k(I,C), G),
            'chr sbag_member'(J, G),
            J=suspension(_,K,_,_,_,_,L,M),
            K=mutable(active),
            L==I,
            M==C ->
            '$chr_translate__remove_constraint_internal'(A, _, H),
            (   H==yes ->
                '$delete_from_store_depends_on/2'(A)
            ;   true
            ),
            'final_answer_pattern/2__3__0'(B, C, D, E)
        ;   'final_answer_pattern/2__3__0'(B, C, D, E)
        ).
'final_answer_pattern/2__3'(A, B, C) :-
        'final_answer_pattern/2__4'(A, B, C).
'final_answer_pattern/2__4'(A, B, C) :-
        '$via1_multi_hash_depends_on_goal/2-2'(A, D), !,
        'final_answer_pattern/2__4__0'(D, A, B, C).
'final_answer_pattern/2__4__0'([], A, B, C) :-
        'final_answer_pattern/2__5'(A, B, C).
'final_answer_pattern/2__4__0'([B|A], F, G, H) :-
        (   B=suspension(_,J,_,_,_,_,L,K),
            J=mutable(active),
            K==F,
            I=t(173,B,H),
            'chr novel_production'(B, I),
            'chr novel_production'(H, I) ->
            'chr extend_history'(H, I),
            '$chr_translate__activate_constraint'(M, _, H, N),
            (   M==yes ->
                '$insert_in_store_final_answer_pattern/2'(H)
            ;   true
            ),
            L=odom([_|C],_),
            G=odom([],D),
            E=odom(C,D),
            call_pattern(E),
            depends_on(L, E),
            (   H=suspension(_,O,_,P,_,_,_,_),
                O=mutable(active),
                P=mutable(N) ->
                'chr update_mutable'(inactive, O),
                'final_answer_pattern/2__4__0'(A, F, G, H)
            ;   true
            )
        ;   'final_answer_pattern/2__4__0'(A, F, G, H)
        ).
'final_answer_pattern/2__4'(A, B, C) :-
        'final_answer_pattern/2__5'(A, B, C).
'final_answer_pattern/2__5'(A, B, C) :-
        '$via1_multi_hash_depends_on_as/3-2'(A, D), !,
        'final_answer_pattern/2__5__0'(D, A, B, C).
'final_answer_pattern/2__5__0'([], A, B, C) :-
        'final_answer_pattern/2__6'(A, B, C).
'final_answer_pattern/2__5__0'([E|A], B, C, D) :-
        (   E=suspension(_,I,_,_,_,_,G,J,H),
            I=mutable(active),
            J==B,
            '$via1_multi_hash_final_answer_pattern/2-1'(H, F) ->
            'final_answer_pattern/2__5__1'(F, G, H, E, A, B, C, D)
        ;   'final_answer_pattern/2__5__0'(A, B, C, D)
        ).
'final_answer_pattern/2__5__1'([], _, _, _, A, B, C, D) :-
        'final_answer_pattern/2__5__0'(A, B, C, D).
'final_answer_pattern/2__5__1'([B|A], D, E, F, G, H, I, J) :-
        (   B=suspension(_,L,_,_,_,_,M,N),
            L=mutable(active),
            M==E,
            K=t(179,F,J,B),
            'chr novel_production'(F, K),
            'chr novel_production'(J, K),
            'chr novel_production'(B, K) ->
            'chr extend_history'(J, K),
            '$chr_translate__activate_constraint'(O, _, J, P),
            (   O==yes ->
                '$insert_in_store_final_answer_pattern/2'(J)
            ;   true
            ),
            ai_observation_lub(I, N, C),
            final_answer_pattern(D, C),
            (   J=suspension(_,Q,_,R,_,_,_,_),
                Q=mutable(active),
                R=mutable(P) ->
                'chr update_mutable'(inactive, Q),
                'final_answer_pattern/2__5__1'(A, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'final_answer_pattern/2__5__1'(A, D, E, F, G, H, I, J)
        ).
'final_answer_pattern/2__5'(A, B, C) :-
        'final_answer_pattern/2__6'(A, B, C).
'final_answer_pattern/2__6'(A, B, C) :-
        '$via1_multi_hash_depends_on_as/3-3'(A, D), !,
        'final_answer_pattern/2__6__0'(D, A, B, C).
'final_answer_pattern/2__6__0'([], A, B, C) :-
        'final_answer_pattern/2__7'(A, B, C).
'final_answer_pattern/2__6__0'([E|A], B, C, D) :-
        (   E=suspension(_,I,_,_,_,_,G,H,J),
            I=mutable(active),
            J==B,
            '$via1_multi_hash_final_answer_pattern/2-1'(H, F) ->
            'final_answer_pattern/2__6__1'(F, G, H, E, A, B, C, D)
        ;   'final_answer_pattern/2__6__0'(A, B, C, D)
        ).
'final_answer_pattern/2__6__1'([], _, _, _, A, B, C, D) :-
        'final_answer_pattern/2__6__0'(A, B, C, D).
'final_answer_pattern/2__6__1'([B|A], D, E, F, G, H, I, J) :-
        (   B=suspension(_,L,_,_,_,_,M,N),
            L=mutable(active),
            M==E,
            K=t(179,F,B,J),
            'chr novel_production'(F, K),
            'chr novel_production'(B, K),
            'chr novel_production'(J, K) ->
            'chr extend_history'(J, K),
            '$chr_translate__activate_constraint'(O, _, J, P),
            (   O==yes ->
                '$insert_in_store_final_answer_pattern/2'(J)
            ;   true
            ),
            ai_observation_lub(N, I, C),
            final_answer_pattern(D, C),
            (   J=suspension(_,Q,_,R,_,_,_,_),
                Q=mutable(active),
                R=mutable(P) ->
                'chr update_mutable'(inactive, Q),
                'final_answer_pattern/2__6__1'(A, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'final_answer_pattern/2__6__1'(A, D, E, F, G, H, I, J)
        ).
'final_answer_pattern/2__6'(A, B, C) :-
        'final_answer_pattern/2__7'(A, B, C).
'final_answer_pattern/2__7'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-3'(A, D), !,
        'final_answer_pattern/2__7__0'(D, A, B, C).
'final_answer_pattern/2__7__0'([], A, B, C) :-
        'final_answer_pattern/2__8'(A, B, C).
'final_answer_pattern/2__7__0'([B|A], C, D, E) :-
        (   B=suspension(_,G,_,_,_,_,I,_,H,_),
            G=mutable(active),
            H==C,
            F=t(182,B,E),
            'chr novel_production'(B, F),
            'chr novel_production'(E, F) ->
            'chr extend_history'(E, F),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_final_answer_pattern/2'(E)
            ;   true
            ),
            final_answer_pattern(I, D),
            (   E=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'final_answer_pattern/2__7__0'(A, C, D, E)
            ;   true
            )
        ;   'final_answer_pattern/2__7__0'(A, C, D, E)
        ).
'final_answer_pattern/2__7'(A, B, C) :-
        'final_answer_pattern/2__8'(A, B, C).
'final_answer_pattern/2__8'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-2'(A, D), !,
        'final_answer_pattern/2__8__0'(D, A, B, C).
'final_answer_pattern/2__8__0'([], A, B, C) :-
        'final_answer_pattern/2__9'(A, B, C).
'final_answer_pattern/2__8__0'([E|A], B, C, D) :-
        (   E=suspension(_,J,_,_,_,_,G,K,H,I),
            J=mutable(active),
            K==B,
            '$via1_multi_hash_final_answer_pattern/2-1'(H, F) ->
            'final_answer_pattern/2__8__1'(F, G, H, I, E, A, B, C, D)
        ;   'final_answer_pattern/2__8__0'(A, B, C, D)
        ).
'final_answer_pattern/2__8__1'([], _, _, _, _, A, B, C, D) :-
        'final_answer_pattern/2__8__0'(A, B, C, D).
'final_answer_pattern/2__8__1'([B|A], I, J, K, L, M, N, O, P) :-
        (   B=suspension(_,R,_,_,_,_,S,T),
            R=mutable(active),
            S==J,
            Q=t(183,L,P,B),
            'chr novel_production'(L, Q),
            'chr novel_production'(P, Q),
            'chr novel_production'(B, Q) ->
            'chr extend_history'(P, Q),
            '$chr_translate__activate_constraint'(U, _, P, V),
            (   U==yes ->
                '$insert_in_store_final_answer_pattern/2'(P)
            ;   true
            ),
            I=odom(occ(C,D),_),
            (   ai_observation_is_observed(O, C) ->
                ai_observed_internal(C, D)
            ;   ai_not_observed_internal(C, D)
            ),
            (   K==yes ->
                O=odom([],F),
                ord_del_element(F, C, G),
                H=odom([],G)
            ;   H=O
            ),
            ai_observation_lub(H, T, E),
            final_answer_pattern(I, E),
            (   P=suspension(_,W,_,X,_,_,_,_),
                W=mutable(active),
                X=mutable(V) ->
                'chr update_mutable'(inactive, W),
                'final_answer_pattern/2__8__1'(A, I, J, K, L, M, N, O, P)
            ;   true
            )
        ;   'final_answer_pattern/2__8__1'(A, I, J, K, L, M, N, O, P)
        ).
'final_answer_pattern/2__8'(A, B, C) :-
        'final_answer_pattern/2__9'(A, B, C).
'final_answer_pattern/2__9'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-3'(A, D), !,
        'final_answer_pattern/2__9__0'(D, A, B, C).
'final_answer_pattern/2__9__0'([], A, B, C) :-
        'final_answer_pattern/2__10'(A, B, C).
'final_answer_pattern/2__9__0'([E|A], B, C, D) :-
        (   E=suspension(_,J,_,_,_,_,G,H,K,I),
            J=mutable(active),
            K==B,
            '$via1_multi_hash_final_answer_pattern/2-1'(H, F) ->
            'final_answer_pattern/2__9__1'(F, G, H, I, E, A, B, C, D)
        ;   'final_answer_pattern/2__9__0'(A, B, C, D)
        ).
'final_answer_pattern/2__9__1'([], _, _, _, _, A, B, C, D) :-
        'final_answer_pattern/2__9__0'(A, B, C, D).
'final_answer_pattern/2__9__1'([B|A], I, J, K, L, M, N, O, P) :-
        (   B=suspension(_,R,_,_,_,_,S,T),
            R=mutable(active),
            S==J,
            Q=t(183,L,B,P),
            'chr novel_production'(L, Q),
            'chr novel_production'(B, Q),
            'chr novel_production'(P, Q) ->
            'chr extend_history'(P, Q),
            '$chr_translate__activate_constraint'(U, _, P, V),
            (   U==yes ->
                '$insert_in_store_final_answer_pattern/2'(P)
            ;   true
            ),
            I=odom(occ(C,D),_),
            (   ai_observation_is_observed(T, C) ->
                ai_observed_internal(C, D)
            ;   ai_not_observed_internal(C, D)
            ),
            (   K==yes ->
                T=odom([],F),
                ord_del_element(F, C, G),
                H=odom([],G)
            ;   H=T
            ),
            ai_observation_lub(H, O, E),
            final_answer_pattern(I, E),
            (   P=suspension(_,W,_,X,_,_,_,_),
                W=mutable(active),
                X=mutable(V) ->
                'chr update_mutable'(inactive, W),
                'final_answer_pattern/2__9__1'(A, I, J, K, L, M, N, O, P)
            ;   true
            )
        ;   'final_answer_pattern/2__9__1'(A, I, J, K, L, M, N, O, P)
        ).
'final_answer_pattern/2__9'(A, B, C) :-
        'final_answer_pattern/2__10'(A, B, C).
'final_answer_pattern/2__10'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_final_answer_pattern/2'(A)
        ;   true
        ).
abstract_constraints(A) :-
        'abstract_constraints/1__0'(A, _).
'abstract_constraints/1__0'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', C), !,
        '$chr_translate__allocate_constraint'(chr_translate:'abstract_constraints/1__0'(A,B), B, abstract_constraints(A), [A]),
        'abstract_constraints/1__0__0'(C, A, B).
'abstract_constraints/1__0__0'([], A, B) :-
        'abstract_constraints/1__1'(A, B).
'abstract_constraints/1__0__0'([D|A], B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            '$via1_multi_hash_initial_call_pattern/1-1'(F, E) ->
            'abstract_constraints/1__0__1'(E, F, G, D, A, B, C)
        ;   'abstract_constraints/1__0__0'(A, B, C)
        ).
'abstract_constraints/1__0__1'([], _, _, _, A, B, C) :-
        'abstract_constraints/1__0__0'(A, B, C).
'abstract_constraints/1__0__1'([B|A], C, D, E, F, G, H) :-
        (   B=suspension(_,J,_,_,_,_,K),
            J=mutable(active),
            K==C,
            I=t(167,E,B,H),
            'chr novel_production'(E, I),
            'chr novel_production'(B, I),
            'chr novel_production'(H, I) ->
            'chr extend_history'(H, I),
            '$chr_translate__activate_constraint'(L, _, H, M),
            (   L==yes ->
                '$insert_in_store_abstract_constraints/1'(H)
            ;   true
            ),
            ai_observation_schedule_new_calls(G, D),
            (   H=suspension(_,N,_,O,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'abstract_constraints/1__0__1'(A, C, D, E, F, G, H)
            ;   true
            )
        ;   'abstract_constraints/1__0__1'(A, C, D, E, F, G, H)
        ).
'abstract_constraints/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'abstract_constraints/1__0'(A,B), B, abstract_constraints(A), [A]),
        'abstract_constraints/1__1'(A, B).
'abstract_constraints/1__1'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__1__0'(C, A, B).
'abstract_constraints/1__1__0'([], A, B) :-
        'abstract_constraints/1__2'(A, B).
'abstract_constraints/1__1__0'([B|A], F, G) :-
        (   B=suspension(_,I,_,_,_,_,J),
            I=mutable(active),
            nonvar(J),
            J=odom(C,D),
            H=t(176,B,G),
            'chr novel_production'(B, H),
            'chr novel_production'(G, H),
            memberchk_eq(C, F) ->
            'chr extend_history'(G, H),
            '$chr_translate__activate_constraint'(K, _, G, L),
            (   K==yes ->
                '$insert_in_store_abstract_constraints/1'(G)
            ;   true
            ),
            E=odom(occ(C,1),D),
            call_pattern(E),
            depends_on(odom(C,D), E),
            (   G=suspension(_,M,_,N,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'abstract_constraints/1__1__0'(A, F, G)
            ;   true
            )
        ;   'abstract_constraints/1__1__0'(A, F, G)
        ).
'abstract_constraints/1__1'(A, B) :-
        'abstract_constraints/1__2'(A, B).
'abstract_constraints/1__2'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__2__0'(C, A, B).
'abstract_constraints/1__2__0'([], A, B) :-
        'abstract_constraints/1__3'(A, B).
'abstract_constraints/1__2__0'([H|A], F, G) :-
        (   H=suspension(_,J,_,_,_,_,K),
            J=mutable(active),
            nonvar(K),
            K=odom(B,C),
            nonvar(B),
            B=occ(D,E),
            '$via1_multi_hash_occurrence/4-2'(E, I) ->
            'abstract_constraints/1__2__1'(I, D, E, C, H, A, F, G)
        ;   'abstract_constraints/1__2__0'(A, F, G)
        ).
'abstract_constraints/1__2__1'([], _, _, _, _, A, B, C) :-
        'abstract_constraints/1__2__0'(A, B, C).
'abstract_constraints/1__2__1'([I|A], B, C, D, E, F, G, H) :-
        (   I=suspension(_,M,_,_,_,_,N,O,K,L),
            M=mutable(active),
            N==B,
            O==C,
            '$via1_multi_hash_rule/2-1'(K, J) ->
            'abstract_constraints/1__2__2'(J, K, L, I, A, B, C, D, E, F, G, H)
        ;   'abstract_constraints/1__2__1'(A, B, C, D, E, F, G, H)
        ).
'abstract_constraints/1__2__2'([], _, _, _, A, B, C, D, E, F, G, H) :-
        'abstract_constraints/1__2__1'(A, B, C, D, E, F, G, H).
'abstract_constraints/1__2__2'([B|A], F, G, H, I, J, K, L, M, N, O, P) :-
        (   B=suspension(_,R,_,_,_,_,S,T),
            R=mutable(active),
            S==F,
            Q=t(177,M,P,H,B),
            'chr novel_production'(M, Q),
            'chr novel_production'(P, Q),
            'chr novel_production'(H, Q),
            'chr novel_production'(B, Q),
            T=pragma(rule(_,_,_,_),ids(E,_),_,_,_),
            memberchk_eq(G, E),
            is_passive(F, G) ->
            'chr extend_history'(P, Q),
            '$chr_translate__activate_constraint'(U, _, P, V),
            (   U==yes ->
                '$insert_in_store_abstract_constraints/1'(P)
            ;   true
            ),
            C is K+1,
            D=odom(occ(J,C),L),
            call_pattern(D),
            depends_on(odom(occ(J,K),L), D),
            (   P=suspension(_,W,_,X,_,_,_),
                W=mutable(active),
                X=mutable(V) ->
                'chr update_mutable'(inactive, W),
                'abstract_constraints/1__2__2'(A, F, G, H, I, J, K, L, M, N, O, P)
            ;   true
            )
        ;   'abstract_constraints/1__2__2'(A, F, G, H, I, J, K, L, M, N, O, P)
        ).
'abstract_constraints/1__2'(A, B) :-
        'abstract_constraints/1__3'(A, B).
'abstract_constraints/1__3'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__3__0'(C, A, B).
'abstract_constraints/1__3__0'([], A, B) :-
        'abstract_constraints/1__4'(A, B).
'abstract_constraints/1__3__0'([H|A], F, G) :-
        (   H=suspension(_,J,_,_,_,_,K),
            J=mutable(active),
            nonvar(K),
            K=odom(B,C),
            nonvar(B),
            B=occ(D,E),
            '$via1_multi_hash_occurrence/4-2'(E, I) ->
            'abstract_constraints/1__3__1'(I, D, E, C, H, A, F, G)
        ;   'abstract_constraints/1__3__0'(A, F, G)
        ).
'abstract_constraints/1__3__1'([], _, _, _, _, A, B, C) :-
        'abstract_constraints/1__3__0'(A, B, C).
'abstract_constraints/1__3__1'([I|A], B, C, D, E, F, G, H) :-
        (   I=suspension(_,M,_,_,_,_,N,O,K,L),
            M=mutable(active),
            N==B,
            O==C,
            '$via1_multi_hash_rule/2-1'(K, J) ->
            'abstract_constraints/1__3__2'(J, K, L, I, A, B, C, D, E, F, G, H)
        ;   'abstract_constraints/1__3__1'(A, B, C, D, E, F, G, H)
        ).
'abstract_constraints/1__3__2'([], _, _, _, A, B, C, D, E, F, G, H) :-
        'abstract_constraints/1__3__1'(A, B, C, D, E, F, G, H).
'abstract_constraints/1__3__2'([B|A], P, Q, R, S, T, U, V, W, X, Y, Z) :-
        (   B=suspension(_,B1,_,_,_,_,C1,D1),
            B1=mutable(active),
            C1==P,
            A1=t(178,W,Z,R,B),
            'chr novel_production'(W, A1),
            'chr novel_production'(Z, A1),
            'chr novel_production'(R, A1),
            'chr novel_production'(B, A1),
            D1=pragma(rule(E,F,G,H),ids(I,_),_,_,_),
            memberchk_eq(Q, I),
            \+is_passive(P,Q) ->
            'chr extend_history'(Z, A1),
            '$chr_translate__activate_constraint'(E1, _, Z, F1),
            (   E1==yes ->
                '$insert_in_store_abstract_constraints/1'(Z)
            ;   true
            ),
            once(select2(Q,_,I,E,_,C)),
            ai_observation_abstract_constraints(C, Y, D),
            ai_observation_observe_list(odom([],V), D, odom([],J)),
            ai_observation_abstract_constraints(F, Y, K),
            ai_observation_observe_list(odom([],J), K, odom([],L)),
            ai_observation_abstract_goal_(E, F, G, H, Y, M),
            call_pattern(odom(M,L)),
            N is U+1,
            O=odom(occ(T,N),V),
            call_pattern(O),
            depends_on_as(odom(occ(T,U),V), odom(M,L), O),
            final_answer_pattern(odom(occ(T,U),V), odom([],V)),
            (   Z=suspension(_,G1,_,H1,_,_,_),
                G1=mutable(active),
                H1=mutable(F1) ->
                'chr update_mutable'(inactive, G1),
                'abstract_constraints/1__3__2'(A, P, Q, R, S, T, U, V, W, X, Y, Z)
            ;   true
            )
        ;   'abstract_constraints/1__3__2'(A, P, Q, R, S, T, U, V, W, X, Y, Z)
        ).
'abstract_constraints/1__3'(A, B) :-
        'abstract_constraints/1__4'(A, B).
'abstract_constraints/1__4'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__4__0'(C, A, B).
'abstract_constraints/1__4__0'([], A, B) :-
        'abstract_constraints/1__5'(A, B).
'abstract_constraints/1__4__0'([H|A], F, G) :-
        (   H=suspension(_,J,_,_,_,_,K),
            J=mutable(active),
            nonvar(K),
            K=odom(B,C),
            nonvar(B),
            B=occ(D,E),
            '$via1_multi_hash_occurrence/4-2'(E, I) ->
            'abstract_constraints/1__4__1'(I, D, E, C, H, A, F, G)
        ;   'abstract_constraints/1__4__0'(A, F, G)
        ).
'abstract_constraints/1__4__1'([], _, _, _, _, A, B, C) :-
        'abstract_constraints/1__4__0'(A, B, C).
'abstract_constraints/1__4__1'([I|A], B, C, D, E, F, G, H) :-
        (   I=suspension(_,M,_,_,_,_,N,O,K,L),
            M=mutable(active),
            N==B,
            O==C,
            '$via1_multi_hash_rule/2-1'(K, J) ->
            'abstract_constraints/1__4__2'(J, K, L, I, A, B, C, D, E, F, G, H)
        ;   'abstract_constraints/1__4__1'(A, B, C, D, E, F, G, H)
        ).
'abstract_constraints/1__4__2'([], _, _, _, A, B, C, D, E, F, G, H) :-
        'abstract_constraints/1__4__1'(A, B, C, D, E, F, G, H).
'abstract_constraints/1__4__2'([B|A], F, G, H, I, J, K, L, M, N, O, P) :-
        (   B=suspension(_,R,_,_,_,_,S,T),
            R=mutable(active),
            S==F,
            Q=t(180,M,P,H,B),
            'chr novel_production'(M, Q),
            'chr novel_production'(P, Q),
            'chr novel_production'(H, Q),
            'chr novel_production'(B, Q),
            T=pragma(rule(_,_,_,_),ids(_,E),_,_,_),
            memberchk_eq(G, E),
            is_passive(F, G) ->
            'chr extend_history'(P, Q),
            '$chr_translate__activate_constraint'(U, _, P, V),
            (   U==yes ->
                '$insert_in_store_abstract_constraints/1'(P)
            ;   true
            ),
            C is K+1,
            D=odom(occ(J,C),L),
            call_pattern(D),
            final_answer_pattern(odom(occ(J,K),L), odom([],L)),
            depends_on(odom(occ(J,K),L), D),
            (   P=suspension(_,W,_,X,_,_,_),
                W=mutable(active),
                X=mutable(V) ->
                'chr update_mutable'(inactive, W),
                'abstract_constraints/1__4__2'(A, F, G, H, I, J, K, L, M, N, O, P)
            ;   true
            )
        ;   'abstract_constraints/1__4__2'(A, F, G, H, I, J, K, L, M, N, O, P)
        ).
'abstract_constraints/1__4'(A, B) :-
        'abstract_constraints/1__5'(A, B).
'abstract_constraints/1__5'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__5__0'(C, A, B).
'abstract_constraints/1__5__0'([], A, B) :-
        'abstract_constraints/1__6'(A, B).
'abstract_constraints/1__5__0'([H|A], F, G) :-
        (   H=suspension(_,J,_,_,_,_,K),
            J=mutable(active),
            nonvar(K),
            K=odom(B,C),
            nonvar(B),
            B=occ(D,E),
            '$via1_multi_hash_occurrence/4-2'(E, I) ->
            'abstract_constraints/1__5__1'(I, D, E, C, H, A, F, G)
        ;   'abstract_constraints/1__5__0'(A, F, G)
        ).
'abstract_constraints/1__5__1'([], _, _, _, _, A, B, C) :-
        'abstract_constraints/1__5__0'(A, B, C).
'abstract_constraints/1__5__1'([I|A], B, C, D, E, F, G, H) :-
        (   I=suspension(_,M,_,_,_,_,N,O,K,L),
            M=mutable(active),
            N==B,
            O==C,
            '$via1_multi_hash_rule/2-1'(K, J) ->
            'abstract_constraints/1__5__2'(J, K, L, I, A, B, C, D, E, F, G, H)
        ;   'abstract_constraints/1__5__1'(A, B, C, D, E, F, G, H)
        ).
'abstract_constraints/1__5__2'([], _, _, _, A, B, C, D, E, F, G, H) :-
        'abstract_constraints/1__5__1'(A, B, C, D, E, F, G, H).
'abstract_constraints/1__5__2'([B|A], R, S, T, U, V, W, X, Y, Z, A1, B1) :-
        (   B=suspension(_,D1,_,_,_,_,E1,F1),
            D1=mutable(active),
            E1==R,
            C1=t(181,Y,B1,T,B),
            'chr novel_production'(Y, C1),
            'chr novel_production'(B1, C1),
            'chr novel_production'(T, C1),
            'chr novel_production'(B, C1),
            F1=pragma(rule(E,F,G,H),ids(_,I),_,_,_),
            memberchk_eq(S, I),
            \+is_passive(R,S) ->
            'chr extend_history'(B1, C1),
            '$chr_translate__activate_constraint'(G1, _, B1, H1),
            (   G1==yes ->
                '$insert_in_store_abstract_constraints/1'(B1)
            ;   true
            ),
            once(select2(S,_,I,F,_,C)),
            ai_observation_abstract_constraints(C, A1, D),
            ai_observation_observe_list(odom([],X), D, odom([],J)),
            ai_observation_abstract_constraints(E, A1, K),
            ai_observation_observe_list(odom([],J), K, odom([],L)),
            ord_add_element(L, V, M),
            ai_observation_abstract_goal_(E, F, G, H, A1, N),
            call_pattern(odom(N,M)),
            (   ord_memberchk(V, L) ->
                P=no
            ;   P=yes
            ),
            O is W+1,
            Q=odom(occ(V,O),X),
            call_pattern(Q),
            depends_on_ap(odom(occ(V,W),X), odom(N,M), Q, P),
            (   B1=suspension(_,I1,_,J1,_,_,_),
                I1=mutable(active),
                J1=mutable(H1) ->
                'chr update_mutable'(inactive, I1),
                'abstract_constraints/1__5__2'(A, R, S, T, U, V, W, X, Y, Z, A1, B1)
            ;   true
            )
        ;   'abstract_constraints/1__5__2'(A, R, S, T, U, V, W, X, Y, Z, A1, B1)
        ).
'abstract_constraints/1__5'(A, B) :-
        'abstract_constraints/1__6'(A, B).
'abstract_constraints/1__6'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_abstract_constraints/1'(A)
        ;   true
        ).
depends_on(A, B) :-
        'depends_on/2__0'(A, B, _).
'depends_on/2__0'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on/2__0'(A,B,C), C, depends_on(A,B), [A,B]),
        'depends_on/2__0__0'(D, A, B, C).
'depends_on/2__0__0'([], A, B, C) :-
        'depends_on/2__1'(A, B, C).
'depends_on/2__0__0'([B|A], C, D, E) :-
        (   B=suspension(_,G,_,_,_,_,H,I),
            G=mutable(active),
            H==D,
            F=t(169,E,B),
            'chr novel_production'(E, F),
            'chr novel_production'(B, F) ->
            'chr extend_history'(E, F),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_depends_on/2'(E)
            ;   true
            ),
            final_answer_pattern(C, I),
            (   E=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'depends_on/2__0__0'(A, C, D, E)
            ;   true
            )
        ;   'depends_on/2__0__0'(A, C, D, E)
        ).
'depends_on/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on/2__0'(A,B,C), C, depends_on(A,B), [A,B]),
        'depends_on/2__1'(A, B, C).
'depends_on/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_depends_on/2'(A)
        ;   true
        ).
depends_on_ap(A, B, C, D) :-
        'depends_on_ap/4__0'(A, B, C, D, _).
'depends_on_ap/4__0'(A, B, C, D, E) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(C, F), !,
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_ap/4__0'(A,B,C,D,E), E, depends_on_ap(A,B,C,D), [A,B,C,D]),
        'depends_on_ap/4__0__0'(F, A, B, C, D, E).
'depends_on_ap/4__0__0'([], A, B, C, D, E) :-
        'depends_on_ap/4__1'(A, B, C, D, E).
'depends_on_ap/4__0__0'([B|A], C, D, E, F, G) :-
        (   B=suspension(_,I,_,_,_,_,J,K),
            I=mutable(active),
            J==E,
            H=t(182,G,B),
            'chr novel_production'(G, H),
            'chr novel_production'(B, H) ->
            'chr extend_history'(G, H),
            '$chr_translate__activate_constraint'(L, _, G, M),
            (   L==yes ->
                '$insert_in_store_depends_on_ap/4'(G)
            ;   true
            ),
            final_answer_pattern(C, K),
            (   G=suspension(_,N,_,O,_,_,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'depends_on_ap/4__0__0'(A, C, D, E, F, G)
            ;   true
            )
        ;   'depends_on_ap/4__0__0'(A, C, D, E, F, G)
        ).
'depends_on_ap/4__0'(A, B, C, D, E) :-
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_ap/4__0'(A,B,C,D,E), E, depends_on_ap(A,B,C,D), [A,B,C,D]),
        'depends_on_ap/4__1'(A, B, C, D, E).
'depends_on_ap/4__1'(A, B, C, D, E) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, F), !,
        'depends_on_ap/4__1__0'(F, A, B, C, D, E).
'depends_on_ap/4__1__0'([], A, B, C, D, E) :-
        'depends_on_ap/4__2'(A, B, C, D, E).
'depends_on_ap/4__1__0'([G|A], B, C, D, E, F) :-
        (   G=suspension(_,J,_,_,_,_,K,I),
            J=mutable(active),
            K==C,
            '$via1_multi_hash_final_answer_pattern/2-1'(D, H) ->
            'depends_on_ap/4__1__1'(H, I, G, A, B, C, D, E, F)
        ;   'depends_on_ap/4__1__0'(A, B, C, D, E, F)
        ).
'depends_on_ap/4__1__1'([], _, _, A, B, C, D, E, F) :-
        'depends_on_ap/4__1__0'(A, B, C, D, E, F).
'depends_on_ap/4__1__1'([B|A], I, J, K, L, M, N, O, P) :-
        (   B=suspension(_,R,_,_,_,_,S,T),
            R=mutable(active),
            B\==J,
            S==N,
            Q=t(183,P,J,B),
            'chr novel_production'(P, Q),
            'chr novel_production'(J, Q),
            'chr novel_production'(B, Q) ->
            'chr extend_history'(P, Q),
            '$chr_translate__activate_constraint'(U, _, P, V),
            (   U==yes ->
                '$insert_in_store_depends_on_ap/4'(P)
            ;   true
            ),
            L=odom(occ(C,D),_),
            (   ai_observation_is_observed(I, C) ->
                ai_observed_internal(C, D)
            ;   ai_not_observed_internal(C, D)
            ),
            (   O==yes ->
                I=odom([],F),
                ord_del_element(F, C, G),
                H=odom([],G)
            ;   H=I
            ),
            ai_observation_lub(H, T, E),
            final_answer_pattern(L, E),
            (   P=suspension(_,W,_,X,_,_,_,_,_,_),
                W=mutable(active),
                X=mutable(V) ->
                'chr update_mutable'(inactive, W),
                'depends_on_ap/4__1__1'(A, I, J, K, L, M, N, O, P)
            ;   true
            )
        ;   'depends_on_ap/4__1__1'(A, I, J, K, L, M, N, O, P)
        ).
'depends_on_ap/4__1'(A, B, C, D, E) :-
        'depends_on_ap/4__2'(A, B, C, D, E).
'depends_on_ap/4__2'(_, _, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_depends_on_ap/4'(A)
        ;   true
        ).
depends_on_goal(A, B) :-
        'depends_on_goal/2__0'(A, B, _).
'depends_on_goal/2__0'(A, B, C) :-
        '$via1_multi_hash_depends_on/2-1'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_goal/2__0'(A,B,C), C, depends_on_goal(A,B), [A,B]),
        'depends_on_goal/2__0__0'(D, A, B, C).
'depends_on_goal/2__0__0'([], A, B, C) :-
        'depends_on_goal/2__1'(A, B, C).
'depends_on_goal/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,G,_),
            F=mutable(active),
            G==C,
            '$via1_multi_hash_final_answer_pattern/2-1'(D, I),
            'chr sbag_member'(J, I),
            J=suspension(_,K,_,_,_,_,L,_),
            K=mutable(active),
            L==D ->
            '$chr_translate__remove_constraint_internal'(A, _, H),
            (   H==yes ->
                '$delete_from_store_depends_on/2'(A)
            ;   true
            ),
            'depends_on_goal/2__0__0'(B, C, D, E)
        ;   'depends_on_goal/2__0__0'(B, C, D, E)
        ).
'depends_on_goal/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_goal/2__0'(A,B,C), C, depends_on_goal(A,B), [A,B]),
        'depends_on_goal/2__1'(A, B, C).
'depends_on_goal/2__1'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, D), !,
        'depends_on_goal/2__1__0'(D, A, B, C).
'depends_on_goal/2__1__0'([], A, B, C) :-
        'depends_on_goal/2__2'(A, B, C).
'depends_on_goal/2__1__0'([B|A], F, G, H) :-
        (   B=suspension(_,J,_,_,_,_,K,L),
            J=mutable(active),
            K==G,
            I=t(173,H,B),
            'chr novel_production'(H, I),
            'chr novel_production'(B, I) ->
            'chr extend_history'(H, I),
            '$chr_translate__activate_constraint'(M, _, H, N),
            (   M==yes ->
                '$insert_in_store_depends_on_goal/2'(H)
            ;   true
            ),
            F=odom([_|C],_),
            L=odom([],D),
            E=odom(C,D),
            call_pattern(E),
            depends_on(F, E),
            (   H=suspension(_,O,_,P,_,_,_,_),
                O=mutable(active),
                P=mutable(N) ->
                'chr update_mutable'(inactive, O),
                'depends_on_goal/2__1__0'(A, F, G, H)
            ;   true
            )
        ;   'depends_on_goal/2__1__0'(A, F, G, H)
        ).
'depends_on_goal/2__1'(A, B, C) :-
        'depends_on_goal/2__2'(A, B, C).
'depends_on_goal/2__2'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_depends_on_goal/2'(A)
        ;   true
        ).
ai_observed_internal(A, B) :-
        'ai_observed_internal/2__0'(A, B, _).
'ai_observed_internal/2__0'(A, B, C) :-
        '$via1_multi_hash_ai_not_observed_internal/2-12'(k(A,B), D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'ai_observed_internal/2__0'(A,B,C), C, ai_observed_internal(A,B), [A,B]),
        'ai_observed_internal/2__0__0'(D, A, B, C).
'ai_observed_internal/2__0__0'([], A, B, C) :-
        'ai_observed_internal/2__1'(A, B, C).
'ai_observed_internal/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,G,H),
            F=mutable(active),
            G==C,
            H==D ->
            '$chr_translate__remove_constraint_internal'(A, _, I),
            (   I==yes ->
                '$delete_from_store_ai_not_observed_internal/2'(A)
            ;   true
            ),
            'ai_observed_internal/2__0__0'(B, C, D, E)
        ;   'ai_observed_internal/2__0__0'(B, C, D, E)
        ).
'ai_observed_internal/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'ai_observed_internal/2__0'(A,B,C), C, ai_observed_internal(A,B), [A,B]),
        'ai_observed_internal/2__1'(A, B, C).
'ai_observed_internal/2__1'(A, B, C) :-
        '$via1_multi_hash_ai_observed_internal/2-12'(k(A,B), D),
        (   'chr sbag_member'(E, D),
            E=suspension(_,G,_,_,_,_,H,I),
            G=mutable(active),
            H==A,
            I==B ->
            true
        ), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, F),
            (   F==yes ->
                '$delete_from_store_ai_observed_internal/2'(C)
            ;   true
            )
        ).
'ai_observed_internal/2__1'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', D),
        'chr sbag_member'(E, D),
        E=suspension(_,F,_,_,_,_),
        F=mutable(active), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, G),
            (   G==yes ->
                '$delete_from_store_ai_observed_internal/2'(C)
            ;   true
            )
        ),
        ai_observed(A, B).
'ai_observed_internal/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_ai_observed_internal/2'(A)
        ;   true
        ).
ai_observed(A, B) :-
        'ai_observed/2__0'(A, B, _).
'ai_observed/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'ai_observed/2__0'(A,B,C), ai_observed(A,B), [A,B]),
        '$insert_in_store_ai_observed/2'(C).
ai_not_observed_internal(A, B) :-
        'ai_not_observed_internal/2__0'(A, B, _).
'ai_not_observed_internal/2__0'(A, B, _) :-
        '$via1_multi_hash_ai_observed_internal/2-12'(k(A,B), C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A,
        G==B, !.
'ai_not_observed_internal/2__0'(A, B, _) :-
        '$via1_multi_hash_ai_not_observed_internal/2-12'(k(A,B), C),
        (   'chr sbag_member'(D, C),
            D=suspension(_,E,_,_,_,_,F,G),
            E=mutable(active),
            F==A,
            G==B ->
            true
        ), !.
'ai_not_observed_internal/2__0'(A, B, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_),
        E=mutable(active), !,
        ai_not_observed(A, B).
'ai_not_observed_internal/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'ai_not_observed_internal/2__0'(A,B,C), ai_not_observed_internal(A,B), [A,B]),
        '$insert_in_store_ai_not_observed_internal/2'(C).
ai_not_observed(A, B) :-
        'ai_not_observed/2__0'(A, B, _).
'ai_not_observed/2__0'(A, B, C) :-
        '$via1_multi_hash_stored_complete/3-1'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'ai_not_observed/2__0'(A,B,C), C, ai_not_observed(A,B), [A,B]),
        'ai_not_observed/2__0__0'(D, A, B, C).
'ai_not_observed/2__0__0'([], A, B, C) :-
        'ai_not_observed/2__1'(A, B, C).
'ai_not_observed/2__0__0'([A|B], D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H,I,J),
            G=mutable(active),
            H==D,
            E<I,
            '$via1_multi_hash_stored/3-2'(E, P),
            'chr sbag_member'(L, P),
            L=suspension(_,R,_,_,_,_,S,T,U),
            R=mutable(active),
            S==D,
            T==E,
            U==yes ->
            '$chr_translate__remove_constraint_internal'(A, _, K),
            (   K==yes ->
                '$delete_from_store_stored_complete/3'(A)
            ;   true
            ),
            '$chr_translate__remove_constraint_internal'(L, _, M),
            (   M==yes ->
                '$delete_from_store_stored/3'(L)
            ;   true
            ),
            '$chr_translate__activate_constraint'(N, _, F, O),
            (   N==yes ->
                '$insert_in_store_ai_not_observed/2'(F)
            ;   true
            ),
            C is J-1,
            stored(D, E, maybe),
            stored_complete(D, I, C),
            (   F=suspension(_,Q,_,V,_,_,_,_),
                Q=mutable(active),
                V=mutable(O) ->
                'chr update_mutable'(inactive, Q),
                'ai_not_observed/2__0__0'(B, D, E, F)
            ;   true
            )
        ;   'ai_not_observed/2__0__0'(B, D, E, F)
        ).
'ai_not_observed/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'ai_not_observed/2__0'(A,B,C), C, ai_not_observed(A,B), [A,B]),
        'ai_not_observed/2__1'(A, B, C).
'ai_not_observed/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_ai_not_observed/2'(A)
        ;   true
        ).
ai_is_observed(A, B) :-
        'ai_is_observed/2__0'(A, B, _).
'ai_is_observed/2__0'(A, B, _) :-
        '$via1_multi_hash_ai_not_observed/2-12'(k(A,B), C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        E=mutable(active),
        F==A,
        G==B, !,
        fail.
'ai_is_observed/2__0'(_, _, _) :- !.
depends_on_as(A, B, C) :-
        'depends_on_as/3__0'(A, B, C, _).
'depends_on_as/3__0'(A, B, C, D) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, E), !,
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_as/3__0'(A,B,C,D), D, depends_on_as(A,B,C), [A,B,C]),
        'depends_on_as/3__0__0'(E, A, B, C, D).
'depends_on_as/3__0__0'([], A, B, C, D) :-
        'depends_on_as/3__1'(A, B, C, D).
'depends_on_as/3__0__0'([F|A], B, C, D, E) :-
        (   F=suspension(_,I,_,_,_,_,J,H),
            I=mutable(active),
            J==C,
            '$via1_multi_hash_final_answer_pattern/2-1'(D, G) ->
            'depends_on_as/3__0__1'(G, H, F, A, B, C, D, E)
        ;   'depends_on_as/3__0__0'(A, B, C, D, E)
        ).
'depends_on_as/3__0__1'([], _, _, A, B, C, D, E) :-
        'depends_on_as/3__0__0'(A, B, C, D, E).
'depends_on_as/3__0__1'([B|A], D, E, F, G, H, I, J) :-
        (   B=suspension(_,L,_,_,_,_,M,N),
            L=mutable(active),
            B\==E,
            M==I,
            K=t(179,J,E,B),
            'chr novel_production'(J, K),
            'chr novel_production'(E, K),
            'chr novel_production'(B, K) ->
            'chr extend_history'(J, K),
            '$chr_translate__activate_constraint'(O, _, J, P),
            (   O==yes ->
                '$insert_in_store_depends_on_as/3'(J)
            ;   true
            ),
            ai_observation_lub(D, N, C),
            final_answer_pattern(G, C),
            (   J=suspension(_,Q,_,R,_,_,_,_,_),
                Q=mutable(active),
                R=mutable(P) ->
                'chr update_mutable'(inactive, Q),
                'depends_on_as/3__0__1'(A, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'depends_on_as/3__0__1'(A, D, E, F, G, H, I, J)
        ).
'depends_on_as/3__0'(A, B, C, D) :-
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_as/3__0'(A,B,C,D), D, depends_on_as(A,B,C), [A,B,C]),
        'depends_on_as/3__1'(A, B, C, D).
'depends_on_as/3__1'(_, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_depends_on_as/3'(A)
        ;   true
        ).
ai_observation_gather_results :-
        'ai_observation_gather_results/0__0'(_).
'ai_observation_gather_results/0__0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', B), !,
        '$chr_translate__allocate_constraint'(chr_translate:'ai_observation_gather_results/0__0'(A), A, ai_observation_gather_results, []),
        'ai_observation_gather_results/0__0__0'(B, A).
'ai_observation_gather_results/0__0__0'([], A) :-
        'ai_observation_gather_results/0__1'(A).
'ai_observation_gather_results/0__0__0'([A|B], C) :-
        (   A=suspension(_,D,_,_,_,_,E,F),
            D=mutable(active) ->
            '$chr_translate__remove_constraint_internal'(A, _, G),
            (   G==yes ->
                '$delete_from_store_ai_observed_internal/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(H, _, C, I),
            (   H==yes ->
                '$insert_in_store_ai_observation_gather_results/0'(C)
            ;   true
            ),
            ai_observed(E, F),
            (   C=suspension(_,J,_,K,_,_),
                J=mutable(active),
                K=mutable(I) ->
                'chr update_mutable'(inactive, J),
                'ai_observation_gather_results/0__0__0'(B, C)
            ;   true
            )
        ;   'ai_observation_gather_results/0__0__0'(B, C)
        ).
'ai_observation_gather_results/0__0'(A) :-
        '$chr_translate__allocate_constraint'(chr_translate:'ai_observation_gather_results/0__0'(A), A, ai_observation_gather_results, []),
        'ai_observation_gather_results/0__1'(A).
'ai_observation_gather_results/0__1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', B), !,
        'ai_observation_gather_results/0__1__0'(B, A).
'ai_observation_gather_results/0__1__0'([], A) :-
        'ai_observation_gather_results/0__2'(A).
'ai_observation_gather_results/0__1__0'([A|B], C) :-
        (   A=suspension(_,D,_,_,_,_,E,F),
            D=mutable(active) ->
            '$chr_translate__remove_constraint_internal'(A, _, G),
            (   G==yes ->
                '$delete_from_store_ai_not_observed_internal/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(H, _, C, I),
            (   H==yes ->
                '$insert_in_store_ai_observation_gather_results/0'(C)
            ;   true
            ),
            ai_not_observed(E, F),
            (   C=suspension(_,J,_,K,_,_),
                J=mutable(active),
                K=mutable(I) ->
                'chr update_mutable'(inactive, J),
                'ai_observation_gather_results/0__1__0'(B, C)
            ;   true
            )
        ;   'ai_observation_gather_results/0__1__0'(B, C)
        ).
'ai_observation_gather_results/0__1'(A) :-
        'ai_observation_gather_results/0__2'(A).
'ai_observation_gather_results/0__2'(A) :- !,
        (   var(A) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(A, _, B),
            (   B==yes ->
                '$delete_from_store_ai_observation_gather_results/0'(A)
            ;   true
            )
        ).
'ai_observation_gather_results/0__2'(A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_ai_observation_gather_results/0'(A)
        ;   true
        ).
phase_end(A) :-
        'phase_end/1__0'(A, _).
'phase_end/1__0'(A, B) :-
        '$via1_multi_hash_delay_phase_end/2-1'(A, C), !,
        '$chr_translate__allocate_constraint'(chr_translate:'phase_end/1__0'(A,B), B, phase_end(A), [A]),
        'phase_end/1__0__0'(C, A, B).
'phase_end/1__0__0'([], A, B) :-
        'phase_end/1__1'(A, B).
'phase_end/1__0__0'([A|B], C, D) :-
        (   A=suspension(_,F,_,_,_,_,E,H),
            F=mutable(active),
            E==C ->
            '$chr_translate__remove_constraint_internal'(A, _, G),
            (   G==yes ->
                '$delete_from_store_delay_phase_end/2'(A)
            ;   true
            ),
            '$chr_translate__activate_constraint'(I, _, D, J),
            (   I==yes ->
                '$insert_in_store_phase_end/1'(D)
            ;   true
            ),
            call(H),
            (   D=suspension(_,K,_,L,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'phase_end/1__0__0'(B, C, D)
            ;   true
            )
        ;   'phase_end/1__0__0'(B, C, D)
        ).
'phase_end/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'phase_end/1__0'(A,B), B, phase_end(A), [A]),
        'phase_end/1__1'(A, B).
'phase_end/1__1'(_, A) :- !,
        (   var(A) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(A, _, B),
            (   B==yes ->
                '$delete_from_store_phase_end/1'(A)
            ;   true
            )
        ).
'phase_end/1__1'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_phase_end/1'(A)
        ;   true
        ).
delay_phase_end(A, B) :-
        'delay_phase_end/2__0'(A, B, _).
'delay_phase_end/2__0'(A, B, _) :-
        '$via1_multi_hash_phase_end/1-1'(A, C),
        'chr sbag_member'(D, C),
        D=suspension(_,E,_,_,_,_,F),
        E=mutable(active),
        F==A, !,
        call(B).
'delay_phase_end/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'delay_phase_end/2__0'(A,B,C), delay_phase_end(A,B), [A,B]),
        '$insert_in_store_delay_phase_end/2'(C).
does_use_history(A) :-
        'does_use_history/1__0'(A, _).
'does_use_history/1__0'(C, D) :-
        'chr via_1'(C, A),
        get_attr(A, chr_translate, B),
        B=v(E,_,_,_,_,F),
        E/\16=:=16,
        (   'chr sbag_member'(G, F),
            G=suspension(_,J,_,_,_,_,K),
            J=mutable(active),
            K==C ->
            true
        ), !,
        (   var(D) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(D, H, I),
            (   I==yes ->
                '$delete_from_store_does_use_history/1'(D),
                'detach_does_use_history/1'(H, D)
            ;   true
            )
        ).
'does_use_history/1__0'(A, B) :-
        (   var(B) ->
            '$chr_translate__insert_constraint_internal'(C, D, B, chr_translate:'does_use_history/1__0'(A,B), does_use_history(A), [A])
        ;   '$chr_translate__activate_constraint'(C, D, B, _)
        ),
        (   C==yes ->
            '$insert_in_store_does_use_history/1'(B),
            'attach_does_use_history/1'(D, B)
        ;   true
        ).
uses_history(A) :-
        'uses_history/1__0'(A, _).
'uses_history/1__0'(C, _) :-
        'chr via_1'(C, A),
        get_attr(A, chr_translate, B),
        B=v(D,_,_,_,_,E),
        D/\16=:=16,
        (   'chr sbag_member'(F, E),
            F=suspension(_,G,_,_,_,_,H),
            G=mutable(active),
            H==C ->
            true
        ), !.
'uses_history/1__0'(_, _) :- !,
        fail.
novel_production_call(A, B, C) :-
        'novel_production_call/3__0'(A, B, C, _).
'novel_production_call/3__0'(C, D, E, _) :-
        'chr via_1'(C, A),
        get_attr(A, chr_translate, B),
        B=v(F,_,_,_,_,G),
        F/\16=:=16,
        (   'chr sbag_member'(H, G),
            H=suspension(_,I,_,_,_,_,J),
            I=mutable(active),
            J==C ->
            true
        ), !,
        E=D.
'novel_production_call/3__0'(_, _, A, _) :- !,
        A=true.
