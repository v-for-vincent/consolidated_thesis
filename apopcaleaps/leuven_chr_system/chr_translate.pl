/*  Generated by CHR bootstrap compiler
    From: chr_translate.chr
    Date: 16-4-2013 15:53:56

    DO NOT EDIT.  EDIT THE CHR FILE INSTEAD
*/

(:-module(chr_translate,[chr_translate/2])).
(:-use_module(chr_runtime)).
(:-use_module(chr_hashtable_store)).
(:-style_check(-(discontiguous))).
(:-use_module(chr_runtime)).
(:-use_module(chr_hashtable_store)).
(:-style_check(-(discontiguous))).
(:-use_module(library(lists),[member/2,append/3,reverse/2,permutation/2,last/2])).
(:-use_module(hprolog)).
(:-use_module(pairlist)).
(:-use_module(library(ordsets))).
(:-use_module(a_star)).
(:-use_module(listmap)).
(:-use_module(clean_code)).
(:-use_module(builtins)).
(:-use_module(find)).
(:-use_module(guard_entailment)).
(:-use_module(chr_compiler_options)).
(:-use_module(chr_compiler_utility)).
(:-use_module(chr_compiler_errors)).
(:-include(chr_op)).
(:-op(1150,fx,chr_type)).
(:-op(1130,xfx,--->)).
(:-op(980,fx,+)).
(:-op(980,fx,-)).
(:-op(980,fx,?)).
(:-op(1150,fx,constraints)).
(:-op(1150,fx,chr_constraint)).
not_all_ground([?|_]).
not_all_ground([-|_]).
not_all_ground([+|A]) :-
        not_all_ground(A).
set_constraint_indices(A) :-
        set_constraint_indices(A, 1).
set_constraint_indices([], A) :-
        B is A-1,
        max_constraint_index(B).
set_constraint_indices([A|B], C) :-
        (   (   chr_pp_flag(debugable, on)
            ;   \+only_ground_indexed_arguments(A),
                is_stored(A)
            ;   is_stored(A),
                get_store_type(A, default)
            ) ->
            constraint_index(A, C),
            D is C+1,
            set_constraint_indices(B, D)
        ;   set_constraint_indices(B, C)
        ).
chr_translate(A, B) :-
        chr_info(banner, '\tThe K.U.Leuven CHR System\t\n\t\tContributors:\tTom Schrijvers, Jon Sneyers, Bart Demoen,\n\t\t\t\tJan Wielemaker\n\t\tCopyright:\tK.U.Leuven, Belgium\n\t\tURL:\t\thttp://www.cs.kuleuven.be/~~toms/CHR/\n', []),
        init_chr_pp_flags,
        partition_clauses(A, C, D, E),
        check_declared_constraints(C),
        generate_show_constraint(C, F, D, G),
        add_constraints(F),
        add_rules(G),
        check_rules(G, F),
        add_occurrences(G),
        time(fd_analysis, chr_translate:functional_dependency_analysis(G)),
        time(set_semantics_rules, chr_translate:set_semantics_rules(G)),
        time(symmetry_analysis, chr_translate:symmetry_analysis(G)),
        time(guard_simplification, chr_translate:guard_simplification),
        time(storage_analysis, chr_translate:storage_analysis(F)),
        time(observation_analysis, chr_translate:observation_analysis(F)),
        time(ai_observation_analysis, chr_translate:ai_observation_analysis(F)),
        time(late_allocation_analysis, chr_translate:late_allocation_analysis(F)),
        time(assume_constraint_stores, chr_translate:assume_constraint_stores(F)),
        time(set_constraint_indices, chr_translate:set_constraint_indices(F)),
        time(constraints_code, chr_translate:constraints_code(F,H)),
        time(validate_store_type_assumptions, chr_translate:validate_store_type_assumptions(F)),
        phase_end(validate_store_type_assumptions),
        time(store_management_preds, chr_translate:store_management_preds(F,I)),
        insert_declarations(E, J),
        chr_module_declaration(K),
        append([J,I,H,K,[end_of_file]], B).
store_management_preds(A, B) :-
        generate_attach_detach_a_constraint_all(A, C),
        generate_attach_increment(D),
        generate_attr_unify_hook(E),
        generate_extra_clauses(A, F),
        generate_insert_delete_constraints(A, G),
        generate_attach_code(A, H),
        generate_counter_code(I),
        append([C,_,D,E,F,G,H,I], B).
extra_declaration([(:-use_module(chr(chr_runtime))),(:-use_module(chr(chr_hashtable_store)))]).
insert_declarations(A, B) :-
        extra_declaration(C),
        append(A, C, B).
generate_counter_code(A) :-
        (   chr_pp_flag(store_counter, on) ->
            A=[('$counter_init'(B):-nb_setval(B,0)),('$counter'(C,D):-nb_getval(C,D)),('$counter_inc'(E):-nb_getval(E,F),G is F+1,nb_setval(E,G)),(:-'$counter_init'('$insert_counter')),(:-'$counter_init'('$delete_counter')),('$insert_counter_inc':-'$counter_inc'('$insert_counter')),('$delete_counter_inc':-'$counter_inc'('$delete_counter')),(counter_stats(H,I):-'$counter'('$insert_counter',H),'$counter'('$delete_counter',I))]
        ;   A= []
        ).
chr_module_declaration([]).
partition_clauses([], [], [], []).
partition_clauses([A|B], C, D, E) :-
        (   parse_rule(A, F) ->
            C=G,
            D=[F|H],
            E=I
        ;   is_declaration(A, J) ->
            append(J, G, C),
            D=H,
            E=I
        ;   is_module_declaration(A, K) ->
            target_module(K),
            C=G,
            D=H,
            E=[A|I]
        ;   is_type_definition(A) ->
            C=G,
            D=H,
            E=I
        ;   A=(handler _) ->
            chr_warning(deprecated(A), 'Backward compatibility: ignoring handler/1 declaration.\n', []),
            C=G,
            D=H,
            E=I
        ;   A=(rules _) ->
            chr_warning(deprecated(A), 'Backward compatibility: ignoring rules/1 declaration.\n', []),
            C=G,
            D=H,
            E=I
        ;   A=option(L,M) ->
            chr_warning(deprecated(A), 'Instead use :- chr_option(~w,~w).\n', [L,M]),
            handle_option(L, M),
            C=G,
            D=H,
            E=I
        ;   A=(:-chr_option(L,M)) ->
            handle_option(L, M),
            C=G,
            D=H,
            E=I
        ;   C=G,
            D=H,
            E=[A|I]
        ),
        partition_clauses(B, G, H, I).
is_declaration(A, B) :-
        (   A=(:-C),
            C=..[D,E],
            D==(chr_constraint) ->
            conj2list(E, F)
        ;   (   A=(:-C) ->
                C=..[constraints,E]
            ;   A=..[constraints,E]
            ),
            conj2list(E, F),
            chr_warning(deprecated(A), 'Instead use :- chr_constraint ~w.\n', [E])
        ),
        extract_type_mode(F, B).
extract_type_mode([], []).
extract_type_mode([A/B|C], [A/B|D]) :- !,
        extract_type_mode(C, D).
extract_type_mode([A|B], [C|D]) :-
        functor(A, E, F),
        C=E/F,
        A=..[_|G],
        extract_types_and_modes(G, H, I),
        constraint_type(E/F, H),
        constraint_mode(E/F, I),
        extract_type_mode(B, D).
extract_types_and_modes([], [], []).
extract_types_and_modes([+A|B], [A|C], [+|D]) :- !,
        extract_types_and_modes(B, C, D).
extract_types_and_modes([?A|B], [A|C], [?|D]) :- !,
        extract_types_and_modes(B, C, D).
extract_types_and_modes([-A|B], [A|C], [?|D]) :- !,
        extract_types_and_modes(B, C, D).
extract_types_and_modes([+|A], [any|B], [+|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes([?|A], [any|B], [?|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes([-|A], [any|B], [?|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes([A|_], _, _) :-
        chr_error(syntax(A), 'Illegal mode/type declaration.\n\tCorrect syntax is +type, -type or ?type\n\tor +, - or ?.\n', []).
is_type_definition(A) :-
        (   A=(:-B) ->
            true
        ;   A=B
        ),
        B=..[chr_type,C],
        (   C=(D--->E) ->
            tdisj2list(E, F),
            type_definition(D, F)
        ;   C=(G==D) ->
            type_alias(G, D)
        ;   chr_warning(syntax, 'Illegal type definition "~w".\n\tIgnoring this malformed type definition.\n', [C])
        ).
tdisj2list(A, B) :-
        tdisj2list(A, B, []).
tdisj2list(A, B, C) :-
        A=(D ;  E), !,
        tdisj2list(D, B, F),
        tdisj2list(E, F, C).
tdisj2list(A, [A|B], B).
parse_rule(A, B) :-
        A=(C@D), !,
        rule(D, yes(C), B).
parse_rule(A, B) :-
        rule(A, no, B).
rule(A, B, C) :-
        A=(D pragma E), !,
        (   var(E) ->
            F=[_]
        ;   conj2list(E, F)
        ),
        inc_rule_count(G),
        C=pragma(H,I,F,B,G),
        is_rule(D, H, I, C).
rule(A, B, C) :-
        inc_rule_count(D),
        C=pragma(E,F,[],B,D),
        is_rule(A, E, F, C).
is_rule(A, B, C, D) :-
        A=(E==>F), !,
        conj2list(E, G),
        get_ids(G, H, I, D),
        C=ids([],H),
        (   F=(J|K) ->
            B=rule([],I,J,K)
        ;   B=rule([],I,true,F)
        ).
is_rule(A, B, C, D) :-
        A=(E<=>F), !,
        (   F=(G|H) ->
            I=G,
            J=H
        ;   I=true,
            J=F
        ),
        (   E=(K\L) ->
            conj2list(K, M),
            conj2list(L, N),
            get_ids(M, O, P, 0, Q, D),
            get_ids(N, R, S, Q, _, D),
            C=ids(R,O)
        ;   conj2list(E, N),
            P= [],
            get_ids(N, R, S, D),
            C=ids(R,[])
        ),
        B=rule(S,P,I,J).
get_ids(A, B, C, D) :-
        get_ids(A, B, C, 0, _, D).
get_ids([], [], [], A, A, _).
get_ids([A|B], [C|D], [E|F], C, G, H) :-
        (   A=I#J ->
            (   var(J) ->
                J=C
            ;   J=susp(K) ->
                H=pragma(_,_,_,_,L),
                head_name(L, C, E, K)
            ;   check_direct_pragma(J, C, H)
            ),
            get_ids([I|B], [C|D], [E|F], C, G, H)
        ;   (   E=A ->
                true
            ;   writeln(major_problem(E,A)),
                halt
            ),
            M is C+1,
            get_ids(B, D, F, M, G, H)
        ).
replace_explicit_removes(A, B, (C,D), E, F) :- !,
        replace_explicit_removes(A, B, C, E, G),
        replace_explicit_removes(A, B, D, E, H),
        F=(G,H).
replace_explicit_removes(A, B, (C ;  D), E, F) :- !,
        replace_explicit_removes(A, B, C, E, G),
        replace_explicit_removes(A, B, D, E, H),
        F=(G ;  H).
replace_explicit_removes(A, B, (C->D), E, F) :- !,
        replace_explicit_removes(A, B, C, E, G),
        replace_explicit_removes(A, B, D, E, H),
        F=(G->H).
replace_explicit_removes(A, B, remove_chr_constraint(C), D, E) :-
        find_head_name(D, C, F, G), !,
        nth(H, B, F),
        nth(H, A, I),
        gen_uncond_susp_detachment(I, G, J),
        E=J.
replace_explicit_removes(_, _, A, _, A).
direct_pragma(passive).
check_direct_pragma(passive, A, B) :-
        B=pragma(_,ids(_,_),_,_,C),
        passive(C, A).
check_direct_pragma(A, _, B) :-
        (   direct_pragma(C),
            atom_concat(A, _, C) ->
            chr_warning(problem_pragma(A,B), 'completed "~w" to "~w"\n', [A,C])
        ;   chr_warning(unsupported_pragma(A,B), '', [])
        ).
is_module_declaration((:-module(A)), A).
is_module_declaration((:-module(A,_)), A).
add_constraints([]).
add_constraints([A|B]) :-
        max_occurrence(A, 0),
        A=_/C,
        length(D, C),
        (   chr_pp_flag(all_ground, on) ->
            set_elems(D, +)
        ;   set_elems(D, ?)
        ),
        constraint_mode(A, D),
        add_constraints(B).
add_rules([]).
add_rules([A|B]) :-
        A=pragma(_,_,_,_,C),
        rule(C, A),
        add_rules(B).
check_declared_constraints(A) :-
        check_declared_constraints(A, []).
check_declared_constraints([], _).
check_declared_constraints([A|B], C) :-
        (   memberchk_eq(A, C) ->
            chr_error(syntax(A), 'Constraint ~w multiply defined.\n\tRemove redundant declaration!\n', [A])
        ;   true
        ),
        check_declared_constraints(B, [A|C]).
check_rules([], _).
check_rules([A|B], C) :-
        check_rule(A, C),
        check_rules(B, C).
check_rule(A, B) :-
        check_rule_indexing(A),
        A=pragma(C,_,D,_,_),
        C=rule(E,F,_,_),
        append(E, F, G),
        check_head_constraints(G, B, A),
        check_pragmas(D, A).
check_head_constraints([], _, _).
check_head_constraints([A|B], C, D) :-
        functor(A, E, F),
        (   member(E/F, C) ->
            check_head_constraints(B, C, D)
        ;   chr_error(syntax(A), 'Undeclared constraint ~w in head of ~@.\n\tConstraint should be one of ~w.\n', [E/F,format_rule(D),C])
        ).
check_pragmas([], _).
check_pragmas([A|B], C) :-
        check_pragma(A, C),
        check_pragmas(B, C).
check_pragma(A, B) :-
        var(A), !,
        chr_error(syntax(A), 'Invalid pragma ~w in ~@.\n\tPragma should not be a variable!\n', [A,format_rule(B)]).
check_pragma(passive(A), B) :- !,
        B=pragma(_,ids(C,D),_,_,E),
        (   memberchk_eq(A, C) ->
            true
        ;   memberchk_eq(A, D) ->
            true
        ;   chr_error(syntax(A), 'Invalid identifier ~w in pragma passive in ~@.\n', [A,format_rule(B)])
        ),
        passive(E, A).
check_pragma(A, B) :-
        A=already_in_heads, !,
        chr_warning(unsupported_pragma(A,B), 'Termination and correctness may be affected.\n', []).
check_pragma(A, B) :-
        A=already_in_head(_), !,
        chr_warning(unsupported_pragma(A,B), 'Termination and correctness may be affected.\n', []).
check_pragma(A, B) :-
        A=no_history, !,
        chr_warning(experimental, 'Experimental pragma no_history. Use with care!\n', []),
        B=pragma(_,_,_,_,C),
        no_history(C).
check_pragma(A, B) :-
        chr_error(syntax(A), 'Invalid pragma ~w in ~@.\n', [A,format_rule(B)]).
format_rule(A) :-
        A=pragma(_,_,_,B,C),
        (   B=yes(D) ->
            write('rule '),
            write(D)
        ;   write('rule number '),
            write(C)
        ).
check_rule_indexing(A) :-
        A=pragma(B,_,_,_,_),
        B=rule(C,D,E,_),
        term_variables(C-D, F),
        remove_anti_monotonic_guards(E, F, G),
        check_indexing(C, G-D),
        check_indexing(D, G-C),
        (   chr_pp_flag(term_indexing, on) ->
            term_variables(G, H),
            append(C, D, I),
            check_specs_indexing(I, H, _)
        ;   true
        ).
remove_anti_monotonic_guards(A, B, C) :-
        conj2list(A, D),
        remove_anti_monotonic_guard_list(D, B, E),
        list2conj(E, C).
remove_anti_monotonic_guard_list([], _, []).
remove_anti_monotonic_guard_list([A|B], C, D) :-
        (   A=var(E),
            memberchk_eq(E, C) ->
            D=F
        ;   A=functor(_,G,H),
            \+memberchk_eq(G,C),
            \+memberchk_eq(H,C) ->
            D=F
        ;   D=[A|F]
        ),
        remove_anti_monotonic_guard_list(B, C, F).
check_indexing([], _).
check_indexing([A|B], C) :-
        functor(A, D, E),
        A=..[_|F],
        term_variables(B-C, G),
        check_indexing(F, 1, D/E, G),
        check_indexing(B, [A|C]).
check_indexing([], _, _, _).
check_indexing([A|B], C, D, E) :-
        (   is_indexed_argument(D, C) ->
            true
        ;   nonvar(A) ->
            indexed_argument(D, C)
        ;   term_variables(B, F),
            append(F, E, G),
            (   memberchk_eq(A, G) ->
                indexed_argument(D, C)
            ;   true
            )
        ),
        H is C+1,
        term_variables(A, I),
        append(I, E, J),
        check_indexing(B, H, D, J).
check_specs_indexing([], _, []).
check_specs_indexing([A|B], C, D) :-
        D=[E|F],
        term_variables(B, G, C),
        check_spec_indexing(A, G, E),
        term_variables(A, H, C),
        check_specs_indexing(B, H, F).
check_spec_indexing(A, B, C) :-
        functor(A, D, E),
        C=spec(D,E,F),
        A=..[_|G],
        check_args_spec_indexing(G, 1, B, F),
        indexing_spec(D/E, [F]).
check_args_spec_indexing([], _, _, []).
check_args_spec_indexing([A|B], C, D, E) :-
        term_variables(B, F, D),
        (   check_arg_spec_indexing(A, C, F, G) ->
            E=[G|H]
        ;   E=H
        ),
        I is C+1,
        term_variables(A, J, D),
        check_args_spec_indexing(B, I, J, H).
check_arg_spec_indexing(A, B, C, D) :-
        (   var(A) ->
            memberchk_eq(A, C),
            D=specinfo(B,any,[])
        ;   functor(A, E, F),
            D=specinfo(B,E/F,[G]),
            A=..[_|H],
            check_args_spec_indexing(H, 1, C, G)
        ).
add_occurrences([]).
add_occurrences([A|B]) :-
        A=pragma(rule(C,D,_,_),ids(E,F),_,_,G),
        add_occurrences(C, E, G),
        add_occurrences(D, F, G),
        add_occurrences(B).
add_occurrences([], [], _).
add_occurrences([A|B], [C|D], E) :-
        functor(A, F, G),
        H=F/G,
        new_occurrence(H, E, C),
        add_occurrences(B, D, E).
is_observed(A, B) :-
        is_self_observer(A),
        ai_is_observed(A, B).
observation_analysis(A) :-
        (   chr_pp_flag(observation_analysis, on) ->
            observation_analysis(A, A)
        ;   true
        ).
observation_analysis([], _).
observation_analysis([A|B], C) :-
        get_max_occurrence(A, D),
        observation_analysis_occurrences(A, 1, D, C),
        observation_analysis(B, C).
observation_analysis_occurrences(A, B, C, D) :-
        (   B>C ->
            true
        ;   observation_analysis_occurrence(A, B, D),
            E is B+1,
            observation_analysis_occurrences(A, E, C, D)
        ).
observation_analysis_occurrence(A, B, C) :-
        get_occurrence(A, B, D, E),
        (   is_passive(D, E) ->
            true
        ;   get_rule(D, F),
            F=pragma(rule(G,H,_,I),ids(J,K),_,_,_),
            (   select2(E, L, J, G, _, M) ->
                append(M, H, N)
            ;   select2(E, L, K, H, _, O) ->
                append(O, G, N)
            ),
            observe_heads(A, N),
            observe_body(A, I, C)
        ).
observe_heads(A, B) :-
        findall(C/D, (member(E,B),functor(E,C,D)), F),
        observe_all(A, F).
observe_all(A, B) :-
        (   B=[C|D] ->
            observes(A, C),
            observe_all(A, D)
        ;   true
        ).
spawn_all(A, B) :-
        (   B=[C|D] ->
            spawns_observer(A, C),
            spawn_all(A, D)
        ;   true
        ).
spawn_all_triggers(A, B) :-
        (   B=[C|D] ->
            (   may_trigger(C) ->
                spawns_observer(A, C)
            ;   true
            ),
            spawn_all_triggers(A, D)
        ;   true
        ).
observe_body(A, B, C) :-
        (   var(B) ->
            spawn_all(A, C)
        ;   B=true ->
            true
        ;   B=fail ->
            true
        ;   B=(D,E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   B=(D ;  E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   B=(D->E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   functor(B, F, G),
            member(F/G, C) ->
            spawns_observer(A, F/G)
        ;   B=(_=_) ->
            spawn_all_triggers(A, C)
        ;   B=(_ is _) ->
            spawn_all_triggers(A, C)
        ;   binds_b(B, H) ->
            (   H== [] ->
                true
            ;   spawn_all_triggers(A, C)
            )
        ;   spawn_all(A, C)
        ).
late_allocation_analysis(A) :-
        (   chr_pp_flag(late_allocation, on) ->
            late_allocation(A)
        ;   true
        ).
late_allocation([]).
late_allocation([A|B]) :-
        allocation_occurrence(A, 1),
        late_allocation(B).
generate_attach_detach_a_constraint_all([], []).
generate_attach_detach_a_constraint_all([A|B], C) :-
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(A),
                \+only_ground_indexed_arguments(A)
            ) ->
            generate_attach_a_constraint(A, D),
            generate_detach_a_constraint(A, E)
        ;   D= [],
            E= []
        ),
        generate_attach_detach_a_constraint_all(B, F),
        append([D,E,F], C).
generate_attach_a_constraint(A, [B,C]) :-
        generate_attach_a_constraint_empty_list(A, B),
        get_max_constraint_index(D),
        (   D==1 ->
            generate_attach_a_constraint_1_1(A, C)
        ;   generate_attach_a_constraint_t_p(A, C)
        ).
generate_attach_a_constraint_skeleton(A, B, C, D) :-
        make_name(attach_, A, E),
        F=..[E|B],
        D=(F:-C).
generate_attach_a_constraint_empty_list(A, B) :-
        generate_attach_a_constraint_skeleton(A, [[],_], true, B).
generate_attach_a_constraint_1_1(A, B) :-
        C=[[D|E],F],
        generate_attach_a_constraint_skeleton(A, C, G, B),
        generate_attach_body_1(A, D, F, H),
        make_name(attach_, A, I),
        J=..[I,E,F],
        chr_pp_flag(solver_events, K),
        (   K\==none ->
            C=[[D|_],F],
            get_target_module(L),
            use_auxiliary_predicate(run_suspensions),
            M=clp_events:subscribe(D,K,L,L:'$run_suspensions'([F]))
        ;   M=true
        ),
        G=(H,M,J).
generate_attach_body_1(_, A, B, C) :-
        get_target_module(D),
        C=(get_attr(A,D,E)->F=[B|E],put_attr(A,D,F) ;  put_attr(A,D,[B])).
generate_attach_a_constraint_t_p(A, B) :-
        C=[[D|E],F],
        generate_attach_a_constraint_skeleton(A, C, G, B),
        make_name(attach_, A, H),
        I=..[H,E,F],
        generate_attach_body_n(A, D, F, J),
        chr_pp_flag(solver_events, K),
        (   K\==none ->
            C=[[D|_],F],
            get_target_module(L),
            use_auxiliary_predicate(run_suspensions),
            M=clp_events:subscribe(D,K,L,L:'$run_suspensions'([F]))
        ;   M=true
        ),
        G=(J,M,I).
generate_attach_body_n(A/B, C, D, E) :-
        get_constraint_index(A/B, F),
        or_pattern(F, G),
        get_max_constraint_index(H),
        make_attr(H, I, J, K),
        nth1(F, J, L),
        substitute(L, J, [D|L], M),
        make_attr(H, I, M, N),
        substitute(L, J, [D], O),
        make_attr(H, P, O, Q),
        copy_term(J, R),
        nth1(F, R, [D]),
        chr_delete(R, [D], S),
        set_elems(S, []),
        make_attr(H, G, R, T),
        get_target_module(U),
        E=(get_attr(C,U,V)->V=K,(I/\G=:=G->put_attr(C,U,N) ;  P is I\/G,put_attr(C,U,Q)) ;  put_attr(C,U,T)).
generate_detach_a_constraint(A, [B,C]) :-
        generate_detach_a_constraint_empty_list(A, B),
        get_max_constraint_index(D),
        (   D==1 ->
            generate_detach_a_constraint_1_1(A, C)
        ;   generate_detach_a_constraint_t_p(A, C)
        ).
generate_detach_a_constraint_empty_list(A, B) :-
        make_name(detach_, A, C),
        D=[[],_],
        E=..[C|D],
        B=(E:-true).
generate_detach_a_constraint_1_1(A, B) :-
        make_name(detach_, A, C),
        D=[[E|F],G],
        H=..[C|D],
        I=..[C,F,G],
        generate_detach_body_1(A, E, G, J),
        K=(J,I),
        B=(H:-K).
generate_detach_body_1(_, A, B, C) :-
        get_target_module(D),
        C=(get_attr(A,D,E)->'chr sbag_del_element'(E,B,F),(F== [] ->del_attr(A,D) ;  put_attr(A,D,F)) ;  true).
generate_detach_a_constraint_t_p(A, B) :-
        make_name(detach_, A, C),
        D=[[E|F],G],
        H=..[C|D],
        I=..[C,F,G],
        generate_detach_body_n(A, E, G, J),
        K=(J,I),
        B=(H:-K).
generate_detach_body_n(A/B, C, D, E) :-
        get_constraint_index(A/B, F),
        or_pattern(F, G),
        and_pattern(F, H),
        get_max_constraint_index(I),
        make_attr(I, J, K, L),
        nth1(F, K, M),
        substitute(M, K, [], N),
        make_attr(I, O, N, P),
        substitute(M, K, Q, R),
        make_attr(I, J, R, S),
        get_target_module(T),
        E=(get_attr(C,T,U)->U=L,(J/\G=:=G->'chr sbag_del_element'(M,D,Q),(Q== [] ->O is J/\H,(O==0->del_attr(C,T) ;  put_attr(C,T,P)) ;  put_attr(C,T,S)) ;  true) ;  true).
create_indexed_variables_body([], [], _, _, _, empty, 0).
create_indexed_variables_body([A|B], [C|D], E, F, G, H, I) :-
        J is F+1,
        create_indexed_variables_body(B, D, K, J, G, L, M),
        (   C\==(+),
            is_indexed_argument(G, F) ->
            (   L==empty ->
                H=term_variables(A,E)
            ;   H=(term_variables(A,E,K),L)
            ),
            I=M
        ;   E=K,
            H=L,
            I is M+1
        ).
spectermvars(A, B, C, D, E, F) :-
        spectermvars(B, 1, A, C, D, F, [], E).
spectermvars([], A, _, _, B, C, C, true) :-
        A>B, !.
spectermvars([A|B], C, D, E, F, G, H, I) :-
        I=(J,K),
        argspecs(D, C, L, M),
        merge_argspecs(L, N),
        arggoal(N, A, J, G, O),
        P is C+1,
        spectermvars(B, P, M, E, F, O, H, K).
argspecs([], _, [], []).
argspecs([[]|A], B, C, D) :-
        argspecs(A, B, C, D).
argspecs([[specinfo(A,B,C)|D]|E], F, G, H) :-
        (   F==A ->
            G=[specinfo(A,B,C)|I],
            (   D= [] ->
                J=H
            ;   H=[D|J]
            )
        ;   G=I,
            H=[[specinfo(A,B,C)|D]|J]
        ),
        argspecs(E, F, I, J).
merge_argspecs(A, B) :-
        sort(A, C),
        merge_argspecs_(C, B).
merge_argspecs_([], []).
merge_argspecs_([A], B) :- !,
        B=[A].
merge_argspecs_([specinfo(A,B,C),specinfo(A,D,E)|F], G) :-
        (   (   B==any
            ;   D==any
            ) ->
            merge_argspecs_([specinfo(A,any,[])|F], G)
        ;   B==D ->
            append(C, E, H),
            merge_argspecs_([specinfo(A,B,H)|F], G)
        ;   G=[specinfo(A,B,C)|I],
            merge_argspecs_([specinfo(A,D,E)|F], I)
        ).
arggoal(A, B, C, D, E) :-
        (   A== [] ->
            D=E,
            C=true
        ;   A=[specinfo(_,any,_)] ->
            C=term_variables(B,D,E)
        ;   C=(var(B)->D=[B|E] ;  F),
            arggoal_cases(A, B, D, E, F)
        ).
arggoal_cases([], _, A, B, A=B).
arggoal_cases([specinfo(_,A,B)|C], D, E, F, G) :-
        (   B== [] ->
            G=H
        ;   B==[[]] ->
            G=H
        ;   A=I/J ->
            G=(K ;  H),
            functor(L, I, J),
            L=..[_|M],
            K=(D=L->N),
            spectermvars(M, 1, B, I, J, E, F, N)
        ),
        arggoal_cases(C, D, E, F, H).
generate_extra_clauses(A, B) :-
        generate_activate_clauses(A, B, C),
        generate_remove_clauses(A, C, D),
        generate_allocate_clauses(A, D, E),
        generate_insert_constraint_internal_clauses(A, E, F),
        generate_novel_production(F, G),
        generate_extend_history(G, H),
        generate_run_suspensions(H, I),
        generate_semimetacalls2(A, I, J),
        generate_semimetacalls1(A, J, K),
        generate_semimetacalls(A, K, L),
        generate_wrapper_preds(A, L, []).
generate_semimetacalls1([], A, A).
generate_semimetacalls1([A|B], C, D) :-
        generate_semimetacall1(A, C, E),
        generate_semimetacalls1(B, E, D).
generate_semimetacall1(A, B, C) :-
        B=[chr_constraint_predicate(A)|C].
generate_semimetacalls2([], A, A).
generate_semimetacalls2([A|B], C, D) :-
        generate_semimetacall2(A, C, E),
        generate_semimetacalls2(B, E, D).
generate_semimetacall2(_, A, B) :-
        A=B.
generate_semimetacalls([], A, A).
generate_semimetacalls([A|B], C, D) :-
        generate_semimetacall(A, C, E),
        generate_semimetacalls(B, E, D).
generate_semimetacall(A, B, C) :-
        A=D/E,
        functor(F, D, E),
        wrapper_pred(F, G),
        H=(chr_semimetacall(F):-G),
        B=[H|C].
generate_wrapper_preds([], A, A).
generate_wrapper_preds([A|B], C, D) :-
        generate_wrapper_pred(A, C, E),
        generate_wrapper_preds(B, E, D).
generate_wrapper_pred(A, B, C) :-
        A=D/E,
        functor(F, D, E),
        wrapper_pred(F, G),
        H=(G:-F),
        B=[H|C].
wrapper_pred(A, B) :-
        A=..[C|D],
        atom_concat(chr_wrapped_, C, E),
        B=..[E|D].
generate_remove_clauses([], A, A).
generate_remove_clauses([A|B], C, D) :-
        generate_remove_clause(A, C, E),
        generate_remove_clauses(B, E, D).
remove_constraint_goal(A, B, C, D, E) :-
        remove_constraint_name(A, F),
        (   chr_pp_flag(debugable, off),
            only_ground_indexed_arguments(A) ->
            E=..[F,B,D]
        ;   E=..[F,B,C,D]
        ).
remove_constraint_name(A, B) :-
        make_name('$remove_constraint_internal_', A, B).
generate_remove_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(remove_constraint_internal, A) ->
            B=[D|C],
            remove_constraint_goal(A, E, F, G, H),
            static_suspension_term(A, E),
            get_static_suspension_term_field(state, A, E, I),
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                D=(H:-var(I)->G=no ;  'chr get_mutable'(J,I),'chr update_mutable'(removed,I),(J=not_stored_yet->G=no ;  G=yes))
            ;   get_static_suspension_term_field(arguments, A, E, K),
                generate_indexed_variables_body(A, K, L, F),
                (   chr_pp_flag(debugable, on) ->
                    A=M/_,
                    get_static_suspension_term_field(functor, A, E, M)
                ;   true
                ),
                D=(H:-var(I)->G=no ;  'chr get_mutable'(J,I),'chr update_mutable'(removed,I),(J=not_stored_yet->F= [],G=no ;  G=yes,L))
            )
        ;   B=C
        ).
generate_activate_clauses([], A, A).
generate_activate_clauses([A|B], C, D) :-
        generate_activate_clause(A, C, E),
        generate_activate_clauses(B, E, D).
activate_constraint_goal(A, B, C, D, E, F) :-
        activate_constraint_name(A, G),
        (   chr_pp_flag(debugable, off),
            only_ground_indexed_arguments(A) ->
            F=..[G,B,D]
        ;   chr_pp_flag(debugable, off),
            may_trigger(A) ->
            F=..[G,B,C,D,E]
        ;   F=..[G,B,C,D]
        ).
activate_constraint_name(A, B) :-
        make_name('$activate_constraint_', A, B).
generate_activate_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(activate_constraint, A) ->
            B=[D|C],
            get_dynamic_suspension_term_field(state, A, E, F, G),
            activate_constraint_goal(A, H, I, E, J, K),
            (   chr_pp_flag(debugable, off),
                may_trigger(A) ->
                get_dynamic_suspension_term_field(generation, A, E, L, M),
                N=(M,'chr get_mutable'(O,L),J is O+1,'chr update_mutable'(J,L))
            ;   N=true
            ),
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                P=(Q==not_stored_yet->H=yes ;  H=no)
            ;   get_dynamic_suspension_term_field(arguments, A, E, R, S),
                generate_indexed_variables_body(A, R, T, I),
                P=(Q==not_stored_yet->H=yes,S,T,'chr none_locked'(I) ;  I= [],H=no)
            ),
            D=(K:-G,'chr get_mutable'(Q,F),'chr update_mutable'(active,F),N,P)
        ;   B=C
        ).
generate_allocate_clauses([], A, A).
generate_allocate_clauses([A|B], C, D) :-
        generate_allocate_clause(A, C, E),
        generate_allocate_clauses(B, E, D).
allocate_constraint_goal(A, B, C, _, D, E) :-
        allocate_constraint_name(A, F),
        (   chr_pp_flag(debugable, off),
            may_trigger(A) ->
            E=..[F,B,C|D]
        ;   E=..[F,C|D]
        ).
allocate_constraint_name(A, B) :-
        make_name('$allocate_constraint_', A, B).
generate_allocate_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(allocate_constraint, A) ->
            B=[D|C],
            A=E/F,
            length(G, F),
            allocate_constraint_goal(A, H, I, E, G, J),
            static_suspension_term(A, K),
            get_static_suspension_term_field(id, A, K, L),
            get_static_suspension_term_field(state, A, K, M),
            (   chr_pp_flag(debugable, on)
            ;   may_trigger(A) ->
                get_static_suspension_term_field(continuation, A, K, H),
                get_static_suspension_term_field(generation, A, K, N),
                O='chr create_mutable'(0,N)
            ;   O=true
            ),
            (   chr_pp_flag(debugable, on) ->
                A=P/_,
                get_static_suspension_term_field(functor, A, K, P)
            ;   true
            ),
            Q=t,
            get_static_suspension_term_field(history, A, K, R),
            get_static_suspension_term_field(arguments, A, K, G),
            I=K,
            D=(J:-O,'chr create_mutable'(Q,R),'chr create_mutable'(not_stored_yet,M),'chr gen_id'(L))
        ;   B=C
        ).
generate_insert_constraint_internal_clauses([], A, A).
generate_insert_constraint_internal_clauses([A|B], C, D) :-
        generate_insert_constraint_internal_clause(A, C, E),
        generate_insert_constraint_internal_clauses(B, E, D).
insert_constraint_internal_constraint_goal(A, B, C, D, E, _, F, G) :-
        insert_constraint_internal_constraint_name(A, H),
        (   (   chr_pp_flag(debugable, on)
            ;   may_trigger(A)
            ) ->
            G=..[H,B,C,D,E|F]
        ;   only_ground_indexed_arguments(A) ->
            G=..[H,D|F]
        ;   G=..[H,B,C,D|F]
        ).
insert_constraint_internal_constraint_name(A, B) :-
        make_name('$insert_constraint_internal_', A, B).
generate_insert_constraint_internal_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(insert_constraint_internal, A) ->
            A=D/E,
            length(F, E),
            G=t,
            insert_constraint_internal_constraint_goal(A, yes, H, I, J, D, F, K),
            static_suspension_term(A, L),
            get_static_suspension_term_field(id, A, L, M),
            get_static_suspension_term_field(state, A, L, N),
            (   (   chr_pp_flag(debugable, on)
                ;   may_trigger(A)
                ) ->
                get_static_suspension_term_field(continuation, A, L, J),
                get_static_suspension_term_field(generation, A, L, O),
                P='chr create_mutable'(0,O)
            ;   P=true
            ),
            (   chr_pp_flag(debugable, on) ->
                A=Q/_,
                get_static_suspension_term_field(functor, A, L, Q)
            ;   true
            ),
            G=t,
            get_static_suspension_term_field(history, A, L, R),
            get_static_suspension_term_field(arguments, A, L, F),
            I=L,
            B=[S|C],
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                J=true,
                S=(K:-'chr create_mutable'(active,N),P,'chr create_mutable'(G,R),'chr gen_id'(M))
            ;   generate_indexed_variables_body(A, F, T, H),
                S=(K:-T,'chr none_locked'(H),'chr create_mutable'(active,N),'chr create_mutable'(0,O),'chr create_mutable'(G,R),'chr gen_id'(M))
            )
        ;   B=C
        ).
generate_novel_production(A, B) :-
        (   is_used_auxiliary_predicate(novel_production) ->
            A=[C|B],
            C=('$novel_production'(D,E):-arg(3,D,F),'chr get_mutable'(G,F),(get_ds(E,G,_)->fail ;  true))
        ;   A=B
        ).
generate_extend_history(A, B) :-
        (   is_used_auxiliary_predicate(extend_history) ->
            A=[C|B],
            C=('$extend_history'(D,E):-arg(3,D,F),'chr get_mutable'(G,F),put_ds(E,G,x,H),'chr update_mutable'(H,F))
        ;   A=B
        ).
generate_run_suspensions(A, B) :-
        (   is_used_auxiliary_predicate(run_suspensions) ->
            A=[C,D|B],
            C='$run_suspensions'([]),
            (   chr_pp_flag(debugable, on) ->
                D=('$run_suspensions'([E|F]):-arg(2,E,G),'chr get_mutable'(H,G),(H==active->'chr update_mutable'(triggered,G),arg(4,E,I),'chr get_mutable'(J,I),K is J+1,'chr update_mutable'(K,I),arg(5,E,L),('chr debug_event'(wake(E)),call(L) ;  'chr debug_event'(fail(E)),!,fail),('chr debug_event'(exit(E)) ;  'chr debug_event'(redo(E)),fail),'chr get_mutable'(M,G),(M==triggered->'chr update_mutable'(active,G) ;  true) ;  true),'$run_suspensions'(F))
            ;   D=('$run_suspensions'([E|F]):-arg(2,E,G),'chr get_mutable'(H,G),(H==active->'chr update_mutable'(triggered,G),arg(4,E,I),'chr get_mutable'(J,I),K is J+1,'chr update_mutable'(K,I),arg(5,E,L),call(L),'chr get_mutable'(M,G),(M==triggered->'chr update_mutable'(active,G) ;  true) ;  true),'$run_suspensions'(F))
            )
        ;   A=B
        ), !.
generate_run_suspensions(_, _) :-
        chr_error(internal, 'generate_run_suspensions fails', []).
generate_attach_increment(A) :-
        get_max_constraint_index(B),
        (   B>0 ->
            A=[C,D],
            generate_attach_increment_empty(C),
            (   B==1 ->
                generate_attach_increment_one(D)
            ;   generate_attach_increment_many(B, D)
            )
        ;   A= []
        ).
generate_attach_increment_empty((attach_increment([],_):-true)).
generate_attach_increment_one(A) :-
        B=attach_increment([C|D],E),
        get_target_module(F),
        G=('chr not_locked'(C),(get_attr(C,F,H)->sort(H,I),'chr merge_attributes'(E,I,J),put_attr(C,F,J) ;  put_attr(C,F,E)),attach_increment(D,E)),
        A=(B:-G).
generate_attach_increment_many(A, B) :-
        make_attr(A, C, D, E),
        make_attr(A, F, G, H),
        I=attach_increment([J|K],E),
        bagof(L, M^N^O^P^(member2(D,G,M-N),L=(sort(N,O),'chr merge_attributes'(M,O,P))), Q),
        list2conj(Q, R),
        bagof(S, T^U^V^member((T,'chr merge_attributes'(U,V,S)),Q), W),
        make_attr(A, X, W, Y),
        get_target_module(Z),
        A1=('chr not_locked'(J),(get_attr(J,Z,B1)->B1=H,R,X is C\/F,put_attr(J,Z,Y) ;  put_attr(J,Z,E)),attach_increment(K,E)),
        B=(I:-A1).
generate_attr_unify_hook(A) :-
        get_max_constraint_index(B),
        (   B==0 ->
            A= []
        ;   A=[C],
            (   B==1 ->
                generate_attr_unify_hook_one(C)
            ;   generate_attr_unify_hook_many(B, C)
            )
        ).
generate_attr_unify_hook_one(A) :-
        B=attr_unify_hook(C,D),
        get_target_module(E),
        make_run_suspensions(F, G),
        make_run_suspensions(C, H),
        I=(sort(C,J),(var(D)->(get_attr(D,E,K)->true ;  K= []),sort(K,L),'chr merge_attributes'(J,L,F),put_attr(D,E,F),G ; (compound(D)->term_variables(D,M),attach_increment(M,J) ;  true),H)),
        A=(B:-I).
generate_attr_unify_hook_many(A, B) :-
        make_attr(A, C, D, E),
        make_attr(A, F, G, H),
        bagof(I, J^K^(member(J,D),I=sort(J,K)), L),
        list2conj(L, M),
        bagof(K, J^member(sort(J,K),L), N),
        bagof(O, P^Q^R^S^(member2(N,G,P-Q),O=(sort(Q,R),'chr merge_attributes'(P,R,S))), T),
        bagof(S, P^R^U^member((U,'chr merge_attributes'(P,R,S)),T), V),
        list2conj(T, W),
        make_attr(A, X, V, Y),
        make_attr(A, C, N, Z),
        A1=attr_unify_hook(E,B1),
        get_target_module(C1),
        make_run_suspensions_loop(V, D1),
        make_run_suspensions_loop(N, E1),
        F1=(M,(var(B1)->(get_attr(B1,C1,G1)->G1=H,W,X is C\/F,put_attr(B1,C1,Y),D1 ;  put_attr(B1,C1,Z),E1) ; (compound(B1)->term_variables(B1,H1),attach_increment(H1,Z) ;  true),E1)),
        B=(A1:-F1).
make_run_suspensions(A, B) :-
        make_run_suspensions(1, A, B).
make_run_suspensions(A, B, C) :-
        (   get_indexed_constraint(A, D),
            may_trigger(D) ->
            use_auxiliary_predicate(run_suspensions),
            C='$run_suspensions'(B)
        ;   C=true
        ).
make_run_suspensions_loop(A, B) :-
        make_run_suspensions_loop(A, 1, B).
make_run_suspensions_loop([], _, true).
make_run_suspensions_loop([A|B], C, (D,E)) :-
        make_run_suspensions(C, A, D),
        F is C+1,
        make_run_suspensions_loop(B, F, E).
generate_insert_delete_constraints([], []).
generate_insert_delete_constraints([A|B], C) :-
        (   is_stored(A) ->
            C=[D,E|F],
            generate_insert_delete_constraint(A, D, E)
        ;   C=F
        ),
        generate_insert_delete_constraints(B, F).
generate_insert_delete_constraint(A, B, C) :-
        get_store_type(A, D),
        generate_insert_constraint(D, A, B),
        generate_delete_constraint(D, A, C).
generate_insert_constraint(A, B, C) :-
        make_name('$insert_in_store_', B, D),
        E=..[D,F],
        generate_insert_constraint_body(A, B, F, G),
        (   chr_pp_flag(store_counter, on) ->
            H='$insert_counter_inc'
        ;   H=true
        ),
        C=(E:-H,G).
generate_insert_constraint_body(default, A, B, C) :-
        global_list_store_name(A, D),
        make_get_store_goal(D, E, F),
        make_update_store_goal(D, G, H),
        (   chr_pp_flag(debugable, on) ->
            G=[B|E],
            C=(F,H)
        ;   set_dynamic_suspension_term_field(global_list_prev, A, I, G, J),
            C=(F,G=[B|E],H,(E=[I|_]->J ;  true))
        ).
generate_insert_constraint_body(multi_inthash(A), B, C, D) :-
        generate_multi_inthash_insert_constraint_bodies(A, B, C, D).
generate_insert_constraint_body(multi_hash(A), B, C, D) :-
        generate_multi_hash_insert_constraint_bodies(A, B, C, D).
generate_insert_constraint_body(global_ground, A, B, C) :-
        global_ground_store_name(A, D),
        make_get_store_goal(D, E, F),
        make_update_store_goal(D, G, H),
        (   chr_pp_flag(debugable, on) ->
            G=[B|E],
            C=(F,H)
        ;   set_dynamic_suspension_term_field(global_list_prev, A, I, G, J),
            C=(F,G=[B|E],H,(E=[I|_]->J ;  true))
        ).
generate_insert_constraint_body(global_singleton, A, B, C) :-
        global_singleton_store_name(A, D),
        make_update_store_goal(D, B, E),
        C=E.
generate_insert_constraint_body(multi_store(A), B, C, D) :-
        find_with_var_identity(E, [C], (member(F,A),chr_translate:generate_insert_constraint_body(F,B,C,E)), G),
        list2conj(G, D).
generate_multi_inthash_insert_constraint_bodies([], _, _, true).
generate_multi_inthash_insert_constraint_bodies([A|B], C, D, (E,F)) :-
        multi_hash_store_name(C, A, G),
        multi_hash_key(C, A, D, H, I),
        E=(H,nb_getval(G,J),insert_iht(J,I,D)),
        generate_multi_inthash_insert_constraint_bodies(B, C, D, F).
generate_multi_hash_insert_constraint_bodies([], _, _, true).
generate_multi_hash_insert_constraint_bodies([A|B], C, D, (E,F)) :-
        multi_hash_store_name(C, A, G),
        multi_hash_key(C, A, D, H, I),
        make_get_store_goal(G, J, K),
        E=(H,K,insert_ht(J,I,D)),
        generate_multi_hash_insert_constraint_bodies(B, C, D, F).
generate_delete_constraint(A, B, C) :-
        make_name('$delete_from_store_', B, D),
        E=..[D,F],
        generate_delete_constraint_body(A, B, F, G),
        (   chr_pp_flag(store_counter, on) ->
            H='$delete_counter_inc'
        ;   H=true
        ),
        C=(E:-H,G).
generate_delete_constraint_body(default, A, B, C) :-
        (   chr_pp_flag(debugable, on) ->
            global_list_store_name(A, D),
            make_get_store_goal(D, E, F),
            make_update_store_goal(D, G, H),
            C=(F,'chr sbag_del_element'(E,B,G),H)
        ;   get_dynamic_suspension_term_field(global_list_prev, A, B, I, J),
            global_list_store_name(A, D),
            make_get_store_goal(D, E, F),
            make_update_store_goal(D, K, H),
            set_dynamic_suspension_term_field(global_list_prev, A, L, _, M),
            set_dynamic_suspension_term_field(global_list_prev, A, L, I, N),
            C=(J,(var(I)->F,E=[_|K],H,(K=[L|_]->M ;  true) ;  I=[_,_|K],setarg(2,I,K),(K=[L|_]->N ;  true)))
        ).
generate_delete_constraint_body(multi_inthash(A), B, C, D) :-
        generate_multi_inthash_delete_constraint_bodies(A, B, C, D).
generate_delete_constraint_body(multi_hash(A), B, C, D) :-
        generate_multi_hash_delete_constraint_bodies(A, B, C, D).
generate_delete_constraint_body(global_ground, A, B, C) :-
        (   chr_pp_flag(debugable, on) ->
            global_ground_store_name(A, D),
            make_get_store_goal(D, E, F),
            make_update_store_goal(D, G, H),
            C=(F,'chr sbag_del_element'(E,B,G),H)
        ;   get_dynamic_suspension_term_field(global_list_prev, A, B, I, J),
            global_ground_store_name(A, D),
            make_get_store_goal(D, E, F),
            make_update_store_goal(D, K, H),
            set_dynamic_suspension_term_field(global_list_prev, A, L, _, M),
            set_dynamic_suspension_term_field(global_list_prev, A, L, I, N),
            C=(J,(var(I)->F,E=[_|K],H,(K=[L|_]->M ;  true) ;  I=[_,_|K],setarg(2,I,K),(K=[L|_]->N ;  true)))
        ).
generate_delete_constraint_body(global_singleton, A, _, B) :-
        global_singleton_store_name(A, C),
        make_update_store_goal(C, [], D),
        B=D.
generate_delete_constraint_body(multi_store(A), B, C, D) :-
        find_with_var_identity(E, [C], (member(F,A),chr_translate:generate_delete_constraint_body(F,B,C,E)), G),
        list2conj(G, D).
generate_multi_inthash_delete_constraint_bodies([], _, _, true).
generate_multi_inthash_delete_constraint_bodies([A|B], C, D, (E,F)) :-
        multi_hash_store_name(C, A, G),
        multi_hash_key(C, A, D, H, I),
        E=(H,nb_getval(G,J),delete_iht(J,I,D)),
        generate_multi_inthash_delete_constraint_bodies(B, C, D, F).
generate_multi_hash_delete_constraint_bodies([], _, _, true).
generate_multi_hash_delete_constraint_bodies([A|B], C, D, (E,F)) :-
        multi_hash_store_name(C, A, G),
        multi_hash_key(C, A, D, H, I),
        make_get_store_goal(G, J, K),
        E=(H,K,delete_ht(J,I,D)),
        generate_multi_hash_delete_constraint_bodies(B, C, D, F).
generate_delete_constraint_call(A, B, C) :-
        make_name('$delete_from_store_', A, D),
        C=..[D,B].
generate_insert_constraint_call(A, B, C) :-
        make_name('$insert_in_store_', A, D),
        C=..[D,B].
generate_attach_code(A, [B|C]) :-
        enumerate_stores_code(A, B),
        generate_attach_code(A, C, D),
        module_initializers(E),
        prolog_global_variables_code(F),
        get_target_module(G),
        atom_concat_list([$,G,'__',chr_initialization], H),
        D=[(H:-E),(:-H)|F].
generate_attach_code([], A, A).
generate_attach_code([A|B], C, D) :-
        get_store_type(A, E),
        generate_attach_code(E, A, C, F),
        generate_attach_code(B, F, D).
generate_attach_code(default, A, B, C) :-
        global_list_store_initialisation(A, B, C).
generate_attach_code(multi_inthash(A), B, C, D) :-
        multi_inthash_store_initialisations(A, B, C, E),
        multi_inthash_via_lookups(A, B, E, D).
generate_attach_code(multi_hash(A), B, C, D) :-
        multi_hash_store_initialisations(A, B, C, E),
        multi_hash_via_lookups(A, B, E, D).
generate_attach_code(global_ground, A, B, C) :-
        global_ground_store_initialisation(A, B, C).
generate_attach_code(global_singleton, A, B, C) :-
        global_singleton_store_initialisation(A, B, C).
generate_attach_code(multi_store(A), B, C, D) :-
        multi_store_generate_attach_code(A, B, C, D).
multi_store_generate_attach_code([], _, A, A).
multi_store_generate_attach_code([A|B], C, D, E) :-
        generate_attach_code(A, C, D, F),
        multi_store_generate_attach_code(B, C, F, E).
multi_inthash_store_initialisations([], _, A, A).
multi_inthash_store_initialisations([A|B], C, D, E) :-
        multi_hash_store_name(C, A, F),
        module_initializer((new_iht(G),nb_setval(F,G))),
        H=D,
        multi_inthash_store_initialisations(B, C, H, E).
multi_hash_store_initialisations([], _, A, A).
multi_hash_store_initialisations([A|B], C, D, E) :-
        multi_hash_store_name(C, A, F),
        prolog_global_variable(F),
        make_init_store_goal(F, G, H),
        module_initializer((new_ht(G),H)),
        I=D,
        multi_hash_store_initialisations(B, C, I, E).
global_list_store_initialisation(A, B, C) :-
        global_list_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
global_ground_store_initialisation(A, B, C) :-
        global_ground_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
global_singleton_store_initialisation(A, B, C) :-
        global_singleton_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
multi_inthash_via_lookups([], _, A, A).
multi_inthash_via_lookups([A|B], C, D, E) :-
        multi_hash_via_lookup_name(C, A, F),
        G=..[F,H,I],
        multi_hash_store_name(C, A, J),
        K=(nb_getval(J,L),lookup_iht(L,H,I)),
        D=[(G:-K)|M],
        multi_inthash_via_lookups(B, C, M, E).
multi_hash_via_lookups([], _, A, A).
multi_hash_via_lookups([A|B], C, D, E) :-
        multi_hash_via_lookup_name(C, A, F),
        G=..[F,H,I],
        multi_hash_store_name(C, A, J),
        make_get_store_goal(J, K, L),
        M=(L,lookup_ht(K,H,I)),
        D=[(G:-M)|N],
        multi_hash_via_lookups(B, C, N, E).
multi_hash_via_lookup_name(A/B, C, D) :-
        (   integer(C) ->
            E=C
        ;   is_list(C) ->
            atom_concat_list(C, E)
        ),
        atom_concat_list(['$via1_multi_hash_',A,/,B,-,E], D).
multi_hash_store_name(A/B, C, D) :-
        get_target_module(E),
        (   integer(C) ->
            F=C
        ;   is_list(C) ->
            atom_concat_list(C, F)
        ),
        atom_concat_list(['$chr_store_multi_hash_',E,:,A,/,B,-,F], D).
multi_hash_key(A/B, C, D, E, F) :-
        (   (   integer(C) ->
                G=C
            ;   C=[G]
            ) ->
            get_dynamic_suspension_term_field(argument(G), A/B, D, F, E)
        ;   is_list(C) ->
            sort(C, H),
            find_with_var_identity(I-J, [D], (member(G,H),get_dynamic_suspension_term_field(argument(G),A/B,D,J,I)), K),
            once(pairup(L,M,K)),
            F=..[k|M],
            list2conj(L, E)
        ).
multi_hash_key_args(A, B, C) :-
        (   integer(A) ->
            arg(A, B, D),
            C=[D]
        ;   is_list(A) ->
            sort(A, E),
            term_variables(B, F),
            find_with_var_identity(D, F, (member(G,E),arg(G,B,D)), C)
        ).
global_list_store_name(A/B, C) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_list_',D,:,A,/,B], C).
global_ground_store_name(A/B, C) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_ground_',D,:,A,/,B], C).
global_singleton_store_name(A/B, C) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_singleton_',D,:,A,/,B], C).
prolog_global_variables_code([]).
sbag_member_call(A, B, 'chr sbag_member'(A,B)).
enumerate_stores_code(A, B) :-
        C='$enumerate_constraints'(D),
        enumerate_store_bodies(A, D, E),
        list2disj(E, F),
        B=(C:-F).
enumerate_store_bodies([], _, []).
enumerate_store_bodies([A|B], C, D) :-
        (   is_stored(A) ->
            get_store_type(A, E),
            enumerate_store_body(E, A, F, G),
            get_dynamic_suspension_term_field(arguments, A, F, H, I),
            A=J/_,
            K=(G,I,C=..[J|H]),
            D=[K|L]
        ;   D=L
        ),
        enumerate_store_bodies(B, C, L).
enumerate_store_body(default, A, B, C) :-
        global_list_store_name(A, D),
        sbag_member_call(B, E, F),
        make_get_store_goal(D, E, G),
        C=(G,F).
enumerate_store_body(multi_inthash([A|_]), B, C, D) :-
        multi_inthash_enumerate_store_body(A, B, C, D).
enumerate_store_body(multi_hash([A|_]), B, C, D) :-
        multi_hash_enumerate_store_body(A, B, C, D).
enumerate_store_body(global_ground, A, B, C) :-
        global_ground_store_name(A, D),
        sbag_member_call(B, E, F),
        make_get_store_goal(D, E, G),
        C=(G,F).
enumerate_store_body(global_singleton, A, B, C) :-
        global_singleton_store_name(A, D),
        make_get_store_goal(D, B, E),
        C=(E,B\== []).
enumerate_store_body(multi_store(A), B, C, D) :-
        once((member(E,A),enumerate_store_body(E,B,C,D))).
multi_inthash_enumerate_store_body(A, B, C, D) :-
        multi_hash_store_name(B, A, E),
        D=(nb_getval(E,F),value_iht(F,C)).
multi_hash_enumerate_store_body(A, B, C, D) :-
        multi_hash_store_name(B, A, E),
        make_get_store_goal(E, F, G),
        D=(G,value_ht(F,C)).
guard_simplification :-
        (   chr_pp_flag(guard_simplification, on) ->
            multiple_occ_constraints_checked([]),
            simplify_guards(1)
        ;   true
        ).
add_type_information_(_, [], true) :- !.
add_type_information_(A, [B|C], D) :- !,
        add_type_information(A, B, E),
        D=(E,F),
        add_type_information_(A, C, F).
compute_derived_info(_, [], _, _, _, _, _, _, [], []) :- !.
compute_derived_info(A, [B|C], D, E, F, G, H, I, J, K) :- !,
        copy_term(A-F, L),
        variable_replacement(A-F, L, M),
        append(B, M, N),
        list2conj(A, O),
        negate_b(O, P),
        make_head_matchings_explicit_not_negated2(E, D, Q),
        list2conj(Q, R),
        term_variables(N, S),
        term_variables(A-F-Q, T),
        new_vars(T, S, U),
        append(N, U, V),
        negate_b(F, W),
        (   F==true ->
            X=P
        ;   X=(P ;  R,W)
        ),
        copy_with_variable_replacement(X, Y, V),
        copy_with_variable_replacement(F, Z, V),
        copy_with_variable_replacement(A, A1, V),
        list2conj(A1, B1),
        add_guard_to_head(H, Z, C1),
        add_guard_to_head(C1, B1, D1),
        append([Y], E1, J),
        append([D1], F1, K),
        compute_derived_info(A, C, D, E, F, G, H, I, E1, F1).
simplify_guard(A, B, C, D, E) :-
        conj2list(A, F),
        guard_entailment:simplify_guards(C,B,F,G,E),
        list2conj(G, D).
new_vars([], _, []).
new_vars([A|B], C, D) :-
        (   memberchk_eq(A, C) ->
            new_vars(B, C, D)
        ;   D=[A-E,E-A|F],
            new_vars(B, C, F)
        ).
head_subset(A, B, C) :-
        head_subset(A, B, C, [], _).
head_subset([], A, B, C, D) :- !,
        B=C,
        D=A.
head_subset([A|B], C, D, E, F) :- !,
        head_subset(A, C, G, E, H),
        head_subset(B, H, I, G, J),
        D=I,
        F=J.
head_subset(A, [B|C], D, E, F) :- !,
        (   head_subset(A, B, G, E, _),
            D=G,
            F=C
        ;   head_subset(A, C, H, E, I),
            D=H,
            F=[B|I]
        ).
head_subset(A, B, C, D, E) :-
        variable_replacement(A, B, D, C),
        E= [] .
make_head_matchings_explicit(A, B, C) :-
        extract_variables(A, D),
        make_matchings_explicit(D, E, [], [], _, C),
        insert_variables(E, A, B).
make_head_matchings_explicit_not_negated(A, B, C) :-
        extract_variables(A, D),
        make_matchings_explicit_not_negated(D, E, [], C),
        insert_variables(E, A, B).
make_head_matchings_explicit_not_negated2(A, B, C) :-
        extract_variables(A, D),
        extract_variables(B, E),
        make_matchings_explicit_not_negated(D, E, [], C).
extract_variables([], []).
extract_variables([A|B], C) :-
        A=..[_|D],
        extract_variables(B, E),
        append(D, E, C).
insert_variables([], [], []) :- !.
insert_variables(A, [B|C], [D|E]) :-
        B=..[F|G],
        length(G, H),
        take_first_N(A, H, I, J),
        D=..[F|I],
        insert_variables(J, C, E).
take_first_N(A, 0, [], A) :- !.
take_first_N([A|B], C, [A|D], E) :-
        F is C-1,
        take_first_N(B, F, D, E).
make_matchings_explicit([], [], _, A, A, []).
make_matchings_explicit([A|B], [C|D], E, F, G, H) :-
        (   var(A) ->
            (   memberchk_eq(A, E) ->
                list2disj(F, I),
                H=[(I ;  C==A)|J],
                K=E
            ;   H=J,
                C=A,
                K=[A|E]
            ),
            L=F
        ;   functor(A, M, N),
            A=..[M|O],
            make_matchings_explicit(O, P, E, F, Q, R),
            S=..[M|P],
            (   R== [] ->
                H=[functor(C,M,N)|J]
            ;   list2conj(R, T),
                list2disj(F, I),
                U=(C\=S ;  I ;  T),
                H=[functor(C,M,N),U|J]
            ),
            L=[C\=S|Q],
            term_variables(O, V),
            append(E, V, K)
        ),
        make_matchings_explicit(B, D, K, L, G, J).
make_matchings_explicit_not_negated([], [], _, []).
make_matchings_explicit_not_negated([A|B], [C|D], E, F) :-
        F=[C=A|G],
        H=E,
        make_matchings_explicit_not_negated(B, D, H, G).
add_guard_to_head([], _, []).
add_guard_to_head([A|B], C, [D|E]) :-
        (   var(A) ->
            find_guard_info_for_var(A, C, D)
        ;   functor(A, F, _),
            A=..[F|G],
            add_guard_to_head(G, C, H),
            D=..[F|H]
        ),
        add_guard_to_head(B, C, E).
find_guard_info_for_var(A, (B,C), D) :- !,
        find_guard_info_for_var(A, B, E),
        find_guard_info_for_var(E, C, D).
find_guard_info_for_var(A, B, C) :-
        (   B=(D=E),
            A==D ->
            C=E
        ;   B=functor(F,G,H),
            A==F,
            ground(G),
            ground(H) ->
            length(I, H),
            C=..[G|I]
        ;   C=A
        ).
replace_some_heads(A, B, _, [], A, B, _, _, []) :- !.
replace_some_heads([], [A|B], [C|D], [E|F], [], [G|H], I, J, K) :- !,
        (   C==E ->
            G=E,
            replace_some_heads([], B, D, F, [], H, I, J, K)
        ;   E=functor(L,M,N),
            C==L ->
            length(O, N),
            (   var(A) ->
                P= [],
                G=..[M|O]
            ;   A=..[M|Q],
                use_same_args(Q, O, R, I, J, P),
                G=..[M|R]
            ),
            replace_some_heads([], B, D, F, [], H, I, J, S),
            append(P, S, K)
        ;   G=A,
            replace_some_heads([], B, D, [E|F], [], H, I, J, K)
        ).
replace_some_heads([A|B], C, [D|E], [F|G], [H|I], J, K, L, M) :- !,
        (   D==F ->
            H=F,
            replace_some_heads(B, C, E, G, I, J, K, L, M)
        ;   F=functor(N,O,P),
            D==N ->
            length(Q, P),
            (   var(A) ->
                R= [],
                H=..[O|Q]
            ;   A=..[O|S],
                use_same_args(S, Q, T, K, L, R),
                H=..[O|T]
            ),
            replace_some_heads(B, C, E, G, I, J, K, L, U),
            append(R, U, M)
        ;   H=A,
            replace_some_heads(B, C, E, [F|G], I, J, K, L, M)
        ).
use_same_args([], [], [], _, _, []).
use_same_args([A|B], [_|C], [D|E], F, G, H) :-
        var(A), !,
        D=A,
        use_same_args(B, C, E, F, G, H).
use_same_args([A|B], [C|D], [E|F], G, H, I) :-
        nonvar(A), !,
        (   vars_occur_in(A, H) ->
            I=[C=A|J]
        ;   I=J
        ),
        E=C,
        use_same_args(B, D, F, G, H, J).
simplify_heads([], _, _, _, [], []).
simplify_heads([A|B], C, D, E, F, G) :-
        A=(H=I),
        (   (   nonvar(I)
            ;   vars_occur_in(I, B-C)
            ),
            guard_entailment:entails_guard(C,H=I) ->
            (   vars_occur_in(I, D-B-C) ->
                G=J,
                F=K
            ;   (   vars_occur_in(I, E) ->
                    G=[H=I|J]
                ;   G=J
                ),
                F=[H|K]
            )
        ;   nonvar(I),
            functor(I, L, M),
            guard_entailment:entails_guard([functor(H,L,M)|C],H=I) ->
            G=J,
            (   vars_occur_in(I, D-B-C) ->
                F=K
            ;   F=[functor(H,L,M)|K]
            )
        ;   F=K,
            G=J
        ),
        simplify_heads(B, [A|C], D, E, K, J).
vars_occur_in(A, B) :-
        term_variables(A, C),
        term_variables(B, D),
        intersect_eq(C, D, E),
        E\== [] .
flatten_stuff([A|B], C) :- !,
        flatten_stuff(A, D),
        flatten_stuff(B, E),
        append(D, E, C).
flatten_stuff((A ;  B), C) :- !,
        flatten_stuff(A, D),
        flatten_stuff(B, E),
        append(D, E, C).
flatten_stuff((A,B), C) :- !,
        flatten_stuff(A, D),
        flatten_stuff(B, E),
        append(D, E, C).
flatten_stuff(chr_pp_not_in_store(A), [A]) :- !.
flatten_stuff(_, []).
unify_stuff(_, [], []).
unify_stuff(A, [B|C], [D|E]) :-
        B\==D,
        term_variables(B, F),
        term_variables(D, G),
        intersect_eq(F, G, H),
        check_safe_unif(B, D, H),
        variable_replacement(B, D, I),
        check_replacement(I),
        term_variables(I, J),
        list_difference_eq(J, F, K),
        intersect_eq(A, K, L),
        L== [],
        B=D,
        unify_stuff(A, C, E), !.
unify_stuff(A, B, [_|C]) :-
        unify_stuff(A, B, C).
unify_stuff(A, [_|B], C) :-
        unify_stuff(A, B, C).
check_safe_unif(A, B, C) :-
        var(A), !,
        var(B),
        (   (   memberchk_eq(A, C)
            ;   memberchk_eq(B, C)
            ) ->
            A==B
        ;   true
        ).
check_safe_unif([], [], _) :- !.
check_safe_unif([A|B], [C|D], E) :- !,
        check_safe_unif(A, C, E), !,
        check_safe_unif(B, D, E).
check_safe_unif(A, B, C) :-
        nonvar(A), !,
        nonvar(B),
        A=..[D|E],
        B=..[D|F],
        check_safe_unif(E, F, C).
check_safe_unif2(A, _) :-
        var(A), !.
check_safe_unif2([], []) :- !.
check_safe_unif2([A|B], [C|D]) :- !,
        check_safe_unif2(A, C), !,
        check_safe_unif2(B, D).
check_safe_unif2(A, B) :-
        nonvar(A), !,
        nonvar(B),
        A=..[C|D],
        B=..[C|E],
        check_safe_unif2(D, E).
check_replacement(A) :-
        check_replacement(A, B),
        sort(B, C),
        length(C, D), !,
        length(B, D).
check_replacement([], []).
check_replacement([A-_|B], [A|C]) :-
        check_replacement(B, C).
add_failing_occ(A, B, C, D, E, F, _, G, H) :-
        A=pragma(rule(_,_,I,_),ids(J,K),_,_,_),
        append(K, J, L),
        missing_partner_cond(B, C, L, D, M, N, G),
        copy_term((N,B,C), (O,P,Q)),
        variable_replacement((N,B,C), (O,P,Q), H),
        copy_with_variable_replacement(I, R, H),
        extract_explicit_matchings(R, S),
        negate_b(S, T),
        copy_with_variable_replacement(M, U, H),
        (   check_safe_unif2(F, O),
            F=O ->
            E=[(T ;  U)]
        ;   E=[chr_pp_void_info]
        ).
missing_partner_cond([], [], [], _, fail, _, _).
missing_partner_cond([A|B], [_|C], [D|E], D, F, A, G) :- !,
        missing_partner_cond(B, C, E, D, F, A, G).
missing_partner_cond([A|B], [_|C], [_|D], E, F, G, H/I) :-
        F=(chr_pp_not_in_store(A) ;  J),
        missing_partner_cond(B, C, D, E, J, G, H/I).
extract_explicit_matchings(A=B) :-
        var(A),
        var(B), !,
        A=B.
extract_explicit_matchings(A==B) :-
        var(A),
        var(B), !,
        A=B.
extract_explicit_matchings((A,B), C) :- !,
        (   extract_explicit_matchings(A) ->
            extract_explicit_matchings(B, C)
        ;   C=(A,D),
            extract_explicit_matchings(B, D)
        ).
extract_explicit_matchings(A, B) :- !,
        (   extract_explicit_matchings(A) ->
            B=true
        ;   B=A
        ).
oneway_unification(A, B) :-
        term_variables(A, C),
        chr_runtime:lockv(C),
        A=B,
        chr_runtime:unlockv(C).
add_mode_info([], [], true).
add_mode_info([+|A], [B|C], D) :- !,
        D=(ground(B),E),
        add_mode_info(A, C, E).
add_mode_info([_|A], [_|B], C) :-
        add_mode_info(A, B, C).
types2condition([], [], [], [], []).
types2condition([A|B], [C|D], [E|F], [G|H], I) :-
        (   get_type_definition(A, J) ->
            type2condition(J, C, E, K),
            (   G\==(+) ->
                L=[\+ground(C)|K]
            ;   L=K
            ),
            list2disj(L, M),
            I=[M|N],
            types2condition(B, D, F, H, N)
        ;   builtin_type(A, C, O) ->
            I=[O|N],
            types2condition(B, D, F, H, N)
        ;   chr_error(internal, 'Undefined type ~w.\n', [A])
        ).
type2condition([], _, _, []).
type2condition([A|B], C, D, E) :-
        (   builtin_type(A, C, F) ->
            true
        ;   real_type(A, C, D, F)
        ),
        item2list(F, G),
        type2condition(B, C, D, H),
        append(G, H, E).
item2list([], []) :- !.
item2list([A|B], [A|B]) :- !.
item2list(A, B) :-
        B=[A].
builtin_type(A, _, true) :-
        var(A), !.
builtin_type(any, _, true).
builtin_type(dense_int, A, (integer(A),A>=0)).
builtin_type(int, A, integer(A)).
builtin_type(number, A, number(A)).
builtin_type(float, A, float(A)).
builtin_type(natural, A, (integer(A),A>=0)).
real_type(A, B, C, D) :-
        (   nonvar(A) ->
            functor(A, E, F),
            (   F==0 ->
                D=(B=E)
            ;   A=..[_|G],
                length(H, F),
                I=..[E|H],
                (   var(C) ->
                    D=functor(B,E,F)
                ;   functor(C, E, F) ->
                    C=..[_|J],
                    nested_types(G, H, J, K),
                    D=(functor(B,E,F),B=I,K)
                ;   D=functor(B,E,F)
                )
            )
        ;   chr_error(internal, 'Illegal type definition (must be nonvar).\n', [])
        ).
nested_types([], [], [], true).
nested_types([A|B], [C|D], [E|F], G) :-
        (   get_type_definition(A, H) ->
            type2condition(H, C, E, I),
            list2disj(I, J),
            G=(J,K),
            nested_types(B, D, F, K)
        ;   builtin_type(A, C, L) ->
            G=(L,K),
            nested_types(B, D, F, K)
        ;   chr_error(internal, 'Undefined type ~w inside type definition.\n', [A])
        ).
storage_analysis(A) :-
        (   chr_pp_flag(storage_analysis, on) ->
            check_constraint_storages(A)
        ;   true
        ).
check_constraint_storages([]).
check_constraint_storages([A|B]) :-
        check_constraint_storage(A),
        check_constraint_storages(B).
check_constraint_storage(A) :-
        get_max_occurrence(A, B),
        check_occurrences_storage(A, 1, B).
check_occurrences_storage(A, B, C) :-
        (   B>C ->
            stored_completing(A, 1, 0)
        ;   check_occurrence_storage(A, B),
            D is B+1,
            check_occurrences_storage(A, D, C)
        ).
check_occurrence_storage(A, B) :-
        get_occurrence(A, B, C, D),
        (   is_passive(C, D) ->
            stored(A, B, maybe)
        ;   get_rule(C, E),
            E=pragma(rule(F,G,H,I),ids(J,K),_,_,_),
            (   select2(D, L, J, F, _, _) ->
                check_storage_head1(L, B, F, G, H)
            ;   select2(D, M, K, G, _, _) ->
                check_storage_head2(M, B, F, I)
            )
        ).
check_storage_head1(A, B, C, D, E) :-
        functor(A, F, G),
        H=F/G,
        (   C==[A],
            D== [],
            guard_entailment:entails_guard([chr_pp_headvariables(A)],E),
            A=..[_|I],
            no_matching(I, []) ->
            stored(H, B, no)
        ;   stored(H, B, maybe)
        ).
no_matching([], _).
no_matching([A|B], C) :-
        var(A),
        \+memberchk_eq(A,C),
        no_matching(B, [A|C]).
check_storage_head2(A, B, C, D) :-
        functor(A, E, F),
        G=E/F,
        (   (   C\== [],
                D==true
            ;   \+is_observed(E/F,B)
            ) ->
            stored(G, B, maybe)
        ;   stored(G, B, yes)
        ).
constraints_code(A, B) :-
        (   chr_pp_flag(reduced_indexing, on),
            \+forsome(C,A,\+chr_translate:only_ground_indexed_arguments(C)) ->
            none_suspended_on_variables
        ;   true
        ),
        constraints_code1(A, D, []),
        clean_clauses(D, B).
constraint_prelude(A/B, C) :-
        vars_susp(B, D, E, F),
        G=..[A|D],
        make_suspension_continuation_goal(A/B, F, H),
        build_head(A, B, [0], F, I),
        _=..[A|D],
        (   chr_pp_flag(debugable, on) ->
            use_auxiliary_predicate(insert_constraint_internal, A/B),
            generate_insert_constraint_call(A/B, E, J),
            make_name(attach_, A/B, K),
            L=..[K,M,E],
            N=(arg(2,E,O),'chr update_mutable'(inactive,O)),
            insert_constraint_internal_constraint_goal(A/B, _, M, E, H, A, D, P),
            C=(G:-P,J,L,N,('chr debug_event'(call(E)),I ;  'chr debug_event'(fail(E)),!,fail),('chr debug_event'(exit(E)) ;  'chr debug_event'(redo(E)),fail))
        ;   get_allocation_occurrence(A/B, 0) ->
            gen_insert_constraint_internal_goal(A/B, Q, F, D, E),
            N=(arg(2,E,O),'chr update_mutable'(inactive,O)),
            C=(G:-Q,N,I)
        ;   C=(G:-I)
        ).
make_suspension_continuation_goal(A/B, C, D) :-
        (   may_trigger(A/B) ->
            get_target_module(E),
            build_head(A, B, [0], C, F),
            D=E:F
        ;   D=true
        ).
gen_cond_attach_clause(A/B, C, D, E) :-
        (   is_finally_stored(A/B) ->
            get_allocation_occurrence(A/B, F),
            get_max_occurrence(A/B, G),
            (   chr_pp_flag(debugable, off),
                G<F ->
                (   only_ground_indexed_arguments(A/B) ->
                    gen_insert_constraint_internal_goal(A/B, H, I, J, K)
                ;   gen_cond_attach_goal(A/B, H, I, J, K)
                )
            ;   vars_susp(B, J, K, I),
                gen_uncond_attach_goal(A/B, K, H, _)
            ),
            (   chr_pp_flag(debugable, on) ->
                L=..[A|J],
                M='chr debug_event'(insert(L#K))
            ;   M=true
            ),
            build_head(A, B, C, I, N),
            O=(N:-M,H),
            D=[O|E]
        ;   D=E
        ).
gen_cond_attach_goal(A/B, C, D, E, F) :-
        vars_susp(B, E, F, D),
        make_suspension_continuation_goal(A/B, D, G),
        make_name(attach_, A/B, H),
        I=..[H,J,F],
        _=..[A|E],
        generate_insert_constraint_call(A/B, F, K),
        use_auxiliary_predicate(insert_constraint_internal, A/B),
        insert_constraint_internal_constraint_goal(A/B, L, J, F, G, A, E, M),
        use_auxiliary_predicate(activate_constraint, A/B),
        (   may_trigger(A/B) ->
            activate_constraint_goal(A/B, L, J, F, _, N),
            C=((var(F)->M ;  N),(L==yes->K,I ;  true))
        ;   C=(M,K,I)
        ).
gen_insert_constraint_internal_goal(A/B, C, D, E, F) :-
        vars_susp(B, E, F, D),
        make_suspension_continuation_goal(A/B, D, G),
        (   \+only_ground_indexed_arguments(A/B) ->
            make_name(attach_, A/B, H),
            I=..[H,J,F]
        ;   I=true
        ),
        _=..[A|E],
        generate_insert_constraint_call(A/B, F, K),
        use_auxiliary_predicate(insert_constraint_internal, A/B),
        insert_constraint_internal_constraint_goal(A/B, _, J, F, G, A, E, L),
        (   only_ground_indexed_arguments(A/B),
            chr_pp_flag(debugable, off) ->
            C=(L,K)
        ;   C=(L,K,I)
        ).
gen_uncond_attach_goal(A, B, C, D) :-
        (   \+only_ground_indexed_arguments(A) ->
            make_name(attach_, A, E),
            F=..[E,G,B]
        ;   F=true
        ),
        generate_insert_constraint_call(A, B, H),
        (   chr_pp_flag(late_allocation, on) ->
            use_auxiliary_predicate(activate_constraint, A),
            activate_constraint_goal(A, I, G, B, D, J),
            C=(J,(I==yes->H,F ;  true))
        ;   use_auxiliary_predicate(activate_constraint, A),
            activate_constraint_goal(A, I, G, B, D, C)
        ).
head1_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,_,_,_,K),
        J=rule(_,L,_,_),
        (   L== [] ->
            reorder_heads(K, A, B, C, M, N),
            simplification_code(A, M, N, D, E, F, G, H, I)
        ;   simpagation_head1_code(A, B, C, D, E, G, H, I)
        ).
head2_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,_,_,_,K),
        J=rule(L,_,_,_),
        writeln(head2_code(A)),
        (   L== [] ->
            reorder_heads(K, A, B, C, M, N),
            propagation_code(A, M, N, J, K, E, F, G, H, I)
        ;   writeln(simpag),
            simpagation_head2_code(A, B, C, D, E, F, G, H, I)
        ).
gen_alloc_inc_clause(A/B, C, D, E, F) :-
        vars_susp(B, G, H, I),
        build_head(A, B, D, I, J),
        inc_id(D, K),
        build_head(A, B, K, I, L),
        gen_occ_allocation(A/B, C, G, H, I, M),
        N=(J:-M,L),
        E=[N|F].
gen_cond_allocation(A, B, C, D, E) :-
        gen_allocation(A, B, C, D, F),
        E=(var(B)->F ;  true).
gen_allocation(A, B, C/D, E, F) :-
        (   may_trigger(C/D) ->
            build_head(C, D, [0], E, G),
            get_target_module(H),
            I=H:G
        ;   I=true
        ),
        _=..[C|A],
        use_auxiliary_predicate(allocate_constraint, C/D),
        allocate_constraint_goal(C/D, I, B, C, A, F).
gen_occ_allocation(A, B, C, D, E, F) :-
        get_allocation_occurrence(A, G),
        (   chr_pp_flag(debugable, off),
            B==G ->
            (   may_trigger(A) ->
                gen_cond_allocation(C, D, A, E, F)
            ;   gen_allocation(C, D, A, E, F)
            )
        ;   F=true
        ).
guard_via_reschedule_new(A, B, C, D, E, F) :-
        (   chr_pp_flag(guard_via_reschedule, on) ->
            guard_via_reschedule_main_new(A, B, C, D, E, G),
            list2conj(G, F)
        ;   length(A, H),
            length(E, H),
            length(B, I),
            length(D, I),
            append(E, D, J),
            list2conj(J, F)
        ).
guard_via_reschedule_main_new(A, B, C, D, E, F) :-
        initialize_unit_dictionary(C, G),
        maplist(wrap_in_functor(lookup), A, H),
        maplist(wrap_in_functor(guard), B, I),
        build_units(H, I, G, J),
        dependency_reorder(J, K),
        wrappedunits2lists(K, L, E, F),
        sort(L, M),
        snd_of_pairs(M, D).
wrap_in_functor(A, B, C) :-
        C=..[A,B].
wrappedunits2lists([], [], [], []).
wrappedunits2lists([unit(A,B,_,_)|C], D, E, F) :-
        F=[G|H],
        (   B=lookup(I) ->
            E=[G|J],
            D=K
        ;   B=guard(I) ->
            D=[A-G|K],
            E=J
        ),
        wrappedunits2lists(C, K, J, H).
guard_splitting(A, B) :-
        A=rule(C,D,E,_),
        append(C, D, F),
        conj2list(E, G),
        term_variables(F, H),
        split_off_simple_guard_new(G, H, I, J),
        append(I, [K], B),
        term_variables(J, L),
        ground_vars(F, M),
        list_difference_eq(H, M, N),
        intersect_eq(N, L, O),
        (   chr_pp_flag(guard_locks, on),
            bagof('chr lock'(P)-'chr unlock'(P), lists:member(P,O), Q) ->
            once(pairup(R,S,Q))
        ;   R= [],
            S= []
        ),
        list2conj(R, T),
        list2conj(S, U),
        list2conj(J, V),
        K=(T,V,U).
guard_body_copies3(A, B, C, D, E) :-
        A=rule(_,_,_,F),
        my_term_copy(B, C, G, D),
        my_term_copy(F, G, E).
split_off_simple_guard_new([], _, [], []).
split_off_simple_guard_new([A|B], C, D, E) :-
        (   simple_guard_new(A, C) ->
            D=[A|F],
            split_off_simple_guard_new(B, C, F, E)
        ;   D= [],
            E=[A|B]
        ).
simple_guard_new(A, B) :-
        binds_b(A, C),
        \+ (member(D,C),memberchk_eq(D,B)).
dependency_reorder(A, B) :-
        dependency_reorder(A, [], B).
dependency_reorder([], A, B) :-
        reverse(A, B).
dependency_reorder([A|B], C, D) :-
        A=unit(_,_,E,F),
        (   E==fixed ->
            G=[A|C]
        ;   dependency_insert(C, A, F, G)
        ),
        dependency_reorder(B, G, D).
dependency_insert([], A, _, [A]).
dependency_insert([A|B], C, D, E) :-
        A=unit(F,_,_,_),
        (   memberchk(F, D) ->
            E=[C,A|B]
        ;   E=[A|G],
            dependency_insert(B, C, D, G)
        ).
build_units(A, B, C, D) :-
        build_retrieval_units(A, 1, E, C, F, D, G),
        build_guard_units(B, E, F, G).
build_retrieval_units([], A, A, B, B, C, C).
build_retrieval_units([A|B], C, D, E, F, G, H) :-
        term_variables(A, I),
        update_unit_dictionary(I, C, E, J, [], K),
        G=[unit(C,A,fixed,K)|L],
        M is C+1,
        build_retrieval_units(B, M, D, J, F, L, H).
initialize_unit_dictionary(A, B) :-
        term_variables(A, C),
        pair_all_with(C, 0, B).
update_unit_dictionary([], _, A, A, B, B).
update_unit_dictionary([A|B], C, D, E, F, G) :-
        (   lookup_eq(D, A, H) ->
            (   (   H==C
                ;   memberchk(H, F)
                ) ->
                I=F
            ;   I=[H|F]
            ),
            J=D
        ;   J=[A-C|D],
            I=F
        ),
        update_unit_dictionary(B, C, J, E, I, G).
build_guard_units(A, B, C, D) :-
        (   A=[E] ->
            D=[unit(B,E,fixed,[])]
        ;   A=[E|F] ->
            term_variables(E, G),
            update_unit_dictionary2(G, B, C, H, [], I),
            D=[unit(B,E,movable,I)|J],
            K is B+1,
            build_guard_units(F, K, H, J)
        ).
update_unit_dictionary2([], _, A, A, B, B).
update_unit_dictionary2([A|B], C, D, E, F, G) :-
        (   lookup_eq(D, A, H) ->
            (   (   H==C
                ;   memberchk(H, F)
                ) ->
                I=F
            ;   I=[H|F]
            ),
            J=[A-C|D]
        ;   J=[A-C|D],
            I=F
        ),
        update_unit_dictionary2(B, C, J, E, I, G).
functional_dependency_analysis(A) :-
        (   chr_pp_flag(functional_dependency_analysis, on) ->
            functional_dependency_analysis_main(A)
        ;   true
        ).
functional_dependency_analysis_main([]).
functional_dependency_analysis_main([A|B]) :-
        (   discover_unique_pattern(A, C, D, E, F) ->
            functional_dependency(C, D, E, F)
        ;   true
        ),
        functional_dependency_analysis_main(B).
discover_unique_pattern(A, B/C, D, E, F) :-
        A=pragma(G,_,_,_,D),
        G=rule(H,I,J,_),
        (   H=[K],
            I=[L] ->
            true
        ;   H=[K,L],
            I== [] ->
            true
        ),
        check_unique_constraints(K, L, J, D, M),
        term_variables(K, N),
        \+ (member(O,N),lookup_eq(M,O,P),memberchk_eq(P,N)),
        select_pragma_unique_variables(N, M, Q),
        copy_term_nat(K-Q, E-F),
        functor(K, B, C).
select_pragma_unique_variables([], _, []).
select_pragma_unique_variables([A|B], C, D) :-
        (   lookup_eq(C, A, _) ->
            D=E
        ;   D=[A|E]
        ),
        select_pragma_unique_variables(B, C, E).
set_semantics_rules(A) :-
        (   chr_pp_flag(set_semantics_rule, on) ->
            set_semantics_rules_main(A)
        ;   true
        ).
set_semantics_rules_main([]).
set_semantics_rules_main([A|B]) :-
        set_semantics_rule_main(A),
        set_semantics_rules_main(B).
set_semantics_rule_main(A) :-
        A=pragma(B,C,_,_,D),
        (   B=rule([E],[F],true,_),
            C=ids([G],[H]),
            \+is_passive(D,G),
            functor(E, I, J),
            get_functional_dependency(I/J, D, K, L),
            copy_term_nat(K-L, E-M),
            copy_term_nat(K-L, F-N),
            M==N ->
            passive(D, H)
        ;   true
        ).
check_unique_constraints(A, B, C, D, E) :-
        \+any_passive_head(D),
        variable_replacement(A-B, B-A, E),
        copy_with_variable_replacement(C, F, E),
        negate_b(C, G),
        once(entails_b(G,F)).
symmetry_analysis(A) :-
        (   chr_pp_flag(check_unnecessary_active, off) ->
            true
        ;   symmetry_analysis_main(A)
        ).
symmetry_analysis_main([]).
symmetry_analysis_main([A|B]) :-
        A=pragma(C,ids(D,E),_,_,F),
        C=rule(G,H,_,_),
        (   (   \+chr_pp_flag(check_unnecessary_active,simplification)
            ;   H== []
            ),
            G\== [] ->
            symmetry_analysis_heads(G, D, [], [], C, F),
            symmetry_analysis_heads(H, E, [], [], C, F)
        ;   true
        ),
        symmetry_analysis_main(B).
symmetry_analysis_heads([], [], _, _, _, _).
symmetry_analysis_heads([A|B], [C|D], E, F, G, H) :-
        (   \+is_passive(H,C),
            member2(E, F, I-J),
            \+is_passive(H,J),
            variable_replacement(I, A, K),
            copy_with_variable_replacement(G, L, K),
            identical_rules(G, L) ->
            passive(H, C)
        ;   true
        ),
        symmetry_analysis_heads(B, D, [A|E], [C|F], G, H).
simplification_code(A, B, C, D, E/F, G, H, I, J) :-
        D=pragma(K,_,_,_,_),
        head_info(A, F, _, L, M, N),
        build_head(E, F, H, M, O),
        get_constraint_mode(E/F, P),
        head_arg_matches(N, P, [], Q, R, [], S),
        guard_splitting(K, T),
        guard_via_reschedule_new(B, T, A, U, V, W),
        rest_heads_retrieval_and_matching(B, C, A, V, X, R, Y, [], [], [], S, _),
        guard_body_copies3(K, T, Y, U, Z),
        gen_uncond_susps_detachments(X, B, A1),
        gen_cond_susp_detachment(H, L, E/F, B1),
        (   chr_pp_flag(debugable, on) ->
            K=rule(_,_,C1,D1),
            my_term_copy(C1-D1, Y, E1-F1),
            G1='chr debug_event'(try([L|H1],[],E1,F1)),
            I1='chr debug_event'(apply([L|H1],[],E1,F1)),
            instrument_goal(J1, G1, I1, K1)
        ;   K1=J1
        ),
        (   unconditional_occurrence(E/F, G),
            chr_pp_flag(late_allocation, on) ->
            J1=true
        ;   J1=!
        ),
        L1=(O:-Q,W,K1,A1,B1,Z),
        I=[L1|J].
head_arg_matches(A, B, C, D, E) :-
        head_arg_matches(A, B, C, D, E, [], _).
head_arg_matches(A, B, C, D, E, F, G) :-
        head_arg_matches_(A, B, C, F, H, E, G),
        list2conj(H, D).
head_arg_matches_([], [], A, B, [], A, B).
head_arg_matches_([A-B|C], [D|E], F, G, H, I, J) :-
        (   var(A) ->
            (   lookup_eq(F, A, K) ->
                (   D=(+) ->
                    (   memberchk_eq(A, G) ->
                        H=[B=K|L],
                        M=G
                    ;   H=[B==K|L],
                        M=[A|G]
                    )
                ;   H=[B==K|L],
                    M=G
                ),
                N=F
            ;   N=[A-B|F],
                H=L,
                (   D=(+) ->
                    M=[A|G]
                ;   M=G
                )
            ),
            O=C,
            P=E
        ;   atomic(A) ->
            (   D=(+) ->
                H=[B=A|L]
            ;   H=[B==A|L]
            ),
            F=N,
            M=G,
            O=C,
            P=E
        ;   D==(+),
            is_ground(G, A) ->
            copy_with_variable_replacement(A, Q, F),
            H=[B=Q|L],
            F=N,
            M=G,
            O=C,
            P=E
        ;   A=..[_|R],
            functor(A, S, T),
            functor(U, S, T),
            U=..[_|V],
            (   D=(+) ->
                H=[B=U|L]
            ;   H=[nonvar(B),B=U|L]
            ),
            pairup(R, V, W),
            append(W, C, O),
            replicate(T, D, X),
            append(X, E, P),
            N=F,
            M=G
        ),
        head_arg_matches_(O, P, N, M, L, I, J).
is_ground(A, B) :-
        (   ground(B) ->
            true
        ;   compound(B) ->
            B=..[_|C],
            maplist(is_ground(A), C)
        ;   memberchk_eq(B, A)
        ).
rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J) :-
        rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J, [], _).
rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J, K, L) :-
        (   A=[_|_] ->
            rest_heads_retrieval_and_matching_n(A, B, H, I, C, D, E, F, G, J, K, L)
        ;   D= [],
            E= [],
            F=G,
            K=L
        ).
rest_heads_retrieval_and_matching_n([], _, _, _, _, [], [], A, A, _, B, B).
rest_heads_retrieval_and_matching_n([A|B], [_|C], D, E, F, [G|H], [I|J], K, L, _, M, N) :-
        functor(A, O, P),
        head_info(A, P, Q, _, _, R),
        get_store_type(O/P, S),
        (   S==default ->
            passive_head_via(A, [F|D], K, T, U),
            create_get_mutable_ref(active, V, W),
            get_constraint_mode(O/P, X),
            head_arg_matches(R, X, K, Y, Z, M, A1),
            B1=R,
            sbag_member_call(I, U, C1),
            D1=(T,C1,I=E1,W)
        ;   existential_lookup(S, A, [F|D], K, E1, V, D1, I, R, B1),
            get_constraint_mode(O/P, X),
            filter_mode(B1, R, X, F1),
            head_arg_matches(B1, F1, K, Y, Z, M, A1)
        ),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(O/P,E1),get_static_suspension_term_field(state,O/P,E1,V),get_static_suspension_term_field(arguments,O/P,E1,Q))),
        different_from_other_susps(A, I, D, E, G1),
        append(B1, Z, H1),
        translate(A1, H1, I1),
        translate(A1, Z, J1),
        inline_matching_goal(Y, K1, I1, J1),
        G=(D1,G1,K1),
        rest_heads_retrieval_and_matching_n(B, C, [A|D], [I|E], F, H, J, Z, L, _, A1, N).
inline_matching_goal(A==B, true, C, D) :-
        memberchk_eq(A, C),
        memberchk_eq(B, D),
        A=B, !.
inline_matching_goal(A=B, true, _, _) :-
        A=B, !.
inline_matching_goal((A,B), (C,D), E, F) :- !,
        inline_matching_goal(A, C, E, F),
        inline_matching_goal(B, D, E, F).
inline_matching_goal(A, A, _, _).
filter_mode([], _, _, []).
filter_mode([A-B|C], [_-D|E], [F|G], H) :-
        (   B==D ->
            H=[F|I],
            filter_mode(C, E, G, I)
        ;   filter_mode([A-B|C], E, G, H)
        ).
check_unique_keys([], _).
check_unique_keys([A|B], C) :-
        lookup_eq(C, A, _),
        check_unique_keys(B, C).
different_from_other_susps(A, B, C, D, E) :-
        different_from_other_susps_(C, D, A, B, F),
        list2conj(F, E).
different_from_other_susps_(_, [], _, _, []) :- !.
different_from_other_susps_([A|B], [C|D], E, F, G) :-
        (   functor(E, H, I),
            functor(A, H, I),
            copy_term_nat(A-E, J-K),
            \+ \+J=K ->
            G=[F\==C|L]
        ;   G=L
        ),
        different_from_other_susps_(B, D, E, F, L).
passive_head_via(A, B, C, D, E) :-
        functor(A, F, G),
        get_constraint_index(F/G, _),
        common_variables(A, B, H),
        translate(H, C, I),
        global_list_store_name(F/G, J),
        K=nb_getval(J,E),
        (   I== [] ->
            D=K
        ;   gen_get_mod_constraints(F/G, I, L, M, E),
            D=(L->M ;  K)
        ).
common_variables(A, B, C) :-
        term_variables(A, D),
        term_variables(B, E),
        intersect_eq(D, E, C).
gen_get_mod_constraints(A, B, C, D, E) :-
        get_target_module(F),
        (   B=[G] ->
            C='chr newvia_1'(G,H)
        ;   B=[G,I] ->
            C='chr newvia_2'(G,I,H)
        ;   C='chr newvia'(B,H)
        ),
        D=(get_attr(H,F,J),K),
        get_max_constraint_index(L),
        (   L==1 ->
            K=true,
            E=J
        ;   K=(J=M),
            get_constraint_index(A, N),
            make_attr(L, _, O, M),
            nth1(N, O, E)
        ).
guard_body_copies(A, B, C, D, E, F, G) :-
        guard_body_copies2(A, B, C, D, E, H, G),
        list2conj(H, F).
guard_body_copies2(A, B, C, D, E, F, G) :-
        C=rule(H,_,I,J),
        conj2list(I, K),
        split_off_simple_guard(K, E, L, M),
        my_term_copy(L-M, E, N, O-P),
        append(O, [Q], F),
        term_variables(M, R),
        term_variables(P, S),
        ground_vars(H, T),
        list_difference_eq(R, T, _),
        (   chr_pp_flag(guard_locks, on),
            bagof('chr lock'(U)-'chr unlock'(U), V^(lists:member(V,R),pairlist:lookup_eq(E,V,U),memberchk_eq(U,S)), W) ->
            once(pairup(X,Y,W))
        ;   X= [],
            Y= []
        ),
        list2conj(X, Z),
        list2conj(Y, A1),
        list2conj(P, B1),
        Q=(Z,B1,A1),
        my_term_copy(J, N, C1),
        replace_explicit_removes(A, B, C1, D, G).
split_off_simple_guard([], _, [], []).
split_off_simple_guard([A|B], C, D, E) :-
        (   simple_guard(A, C) ->
            D=[A|F],
            split_off_simple_guard(B, C, F, E)
        ;   D= [],
            E=[A|B]
        ).
simple_guard(A, B) :-
        binds_b(A, C),
        \+ (member(D,C),lookup_eq(B,D,_)).
gen_cond_susp_detachment(A, B, C, D) :-
        (   is_stored(C) ->
            (   (   A==[0]
                ;   get_allocation_occurrence(C, E),
                    get_max_occurrence(C, F),
                    F<E
                ),
                only_ground_indexed_arguments(C),
                chr_pp_flag(late_allocation, on) ->
                D=true
            ;   gen_uncond_susp_detachment(B, C, G),
                (   chr_pp_flag(late_allocation, on) ->
                    D=(var(B)->true ;  G)
                ;   D=G
                )
            )
        ;   D=true
        ).
gen_uncond_susp_detachment(A, B, C) :-
        (   is_stored(B) ->
            (   \+only_ground_indexed_arguments(B) ->
                make_name(detach_, B, D),
                E=..[D,F,A]
            ;   E=true
            ),
            (   chr_pp_flag(debugable, on) ->
                G='chr debug_event'(remove(A))
            ;   G=true
            ),
            generate_delete_constraint_call(B, A, H),
            use_auxiliary_predicate(remove_constraint_internal, B),
            remove_constraint_goal(B, A, F, I, J),
            (   only_ground_indexed_arguments(B) ->
                C=(G,J,(I=yes->H,E ;  true))
            ;   C=(G,J,(I==yes->H,E ;  true))
            )
        ;   C=true
        ).
gen_uncond_susps_detachments([], [], true).
gen_uncond_susps_detachments([A|B], [C|D], (E,F)) :-
        functor(C, G, H),
        gen_uncond_susp_detachment(A, G/H, E),
        gen_uncond_susps_detachments(B, D, F).
simpagation_head1_code(A, B, C, D, E/F, G, H, I) :-
        D=pragma(J,ids(_,K),_,_,_),
        J=rule(_,L,M,N),
        head_info(A, F, _, O, P, Q),
        get_constraint_mode(E/F, R),
        head_arg_matches(Q, R, [], S, T, [], U),
        build_head(E, F, G, P, V),
        append(B, L, W),
        append(C, K, X),
        reorder_heads(_, A, W, X, Y, Z),
        guard_splitting(J, A1),
        guard_via_reschedule_new(Y, A1, A, B1, C1, D1),
        rest_heads_retrieval_and_matching(Y, Z, A, C1, E1, T, F1, [], [], [], U, _),
        split_by_ids(Z, E1, C, G1, H1),
        guard_body_copies3(J, A1, F1, B1, I1),
        gen_uncond_susps_detachments(G1, B, J1),
        gen_cond_susp_detachment(G, O, E/F, K1),
        (   chr_pp_flag(debugable, on) ->
            my_term_copy(M-N, F1, L1-M1),
            N1='chr debug_event'(try([O|G1],H1,L1,M1)),
            O1='chr debug_event'(apply([O|G1],H1,L1,M1)),
            instrument_goal(!, N1, O1, P1)
        ;   P1=!
        ),
        Q1=(J1,K1),
        (   I1=chrism_condition(R1,S1) ->
            writeln('oops-need to implement this'),
            R1=chrism_exp_check(T1,U1),
            _=(T1,(U1->Q1,S1 ;  fail))
        ;   true
        ),
        V1=(V:-S,D1,P1,J1,K1,I1),
        H=[V1|I].
split_by_ids([], [], _, [], []).
split_by_ids([A|B], [C|D], E, F, G) :-
        (   memberchk_eq(A, E) ->
            F=[C|H],
            G=I
        ;   F=H,
            G=[C|I]
        ),
        split_by_ids(B, D, E, H, I).
simpagation_head2_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,ids(K,L),_,_,M),
        J=rule(N,_,O,P),
        append(N, B, Q),
        append(K, C, R),
        reorder_heads(M, A, Q, R, [S|T], [U|V]),
        simpagation_head2_prelude(A, S, [T,O,P], E, F, G, H, W),
        extend_id(G, X),
        (   memberchk_eq(U, L) ->
            simpagation_universal_searches(T, V, L, [S,A], J, E, Y, Z, A1, X, B1, W, C1)
        ;   W=C1,
            X=B1,
            Y=T,
            Z=[S,A],
            A1=V
        ),
        universal_search_iterator_end(Z, Y, J, E, B1, C1, D1),
        writeln(worker),
        simpagation_head2_new_worker(Z, Y, A1, D, E, F, B1, D1, I),
        writeln(done).
simpagation_universal_searches([], [], _, A, _, _, [], A, [], B, B, C, C).
simpagation_universal_searches(A, [B|C], D, E, F, G, H, I, J, K, L, M, N) :-
        A=[O|P],
        inc_id(K, Q),
        universal_search_iterator_end(E, A, F, G, K, M, R),
        universal_search_iterator(A, E, F, G, K, R, S),
        (   memberchk_eq(B, D) ->
            simpagation_universal_searches(P, C, D, [O|E], F, G, H, I, J, Q, L, S, N)
        ;   L=Q,
            S=N,
            H=P,
            I=[O|E],
            C=J
        ).
simpagation_head2_prelude(A, B, C, D/E, F, G, H, I) :-
        head_info(A, E, J, K, L, M),
        build_head(D, E, G, L, N),
        get_constraint_mode(D/E, O),
        head_arg_matches(M, O, [], P, Q),
        lookup_passive_head(B, [A], Q, R, S),
        gen_occ_allocation(D/E, F, J, K, L, T),
        extend_id(G, U),
        extra_active_delegate_variables(A, [B|C], Q, V),
        append([S|L], V, W),
        build_head(D, E, U, W, X),
        Y=(N:-P,R,!,T,X),
        H=[Y|I].
extra_active_delegate_variables(A, B, C, D) :-
        A=..[_|E],
        delegate_variables(A, B, C, E, D).
passive_delegate_variables(A, B, C, D, E) :-
        term_variables(B, F),
        delegate_variables(A, C, D, F, E).
delegate_variables(A, B, C, D, E) :-
        term_variables(A, F),
        term_variables(B, G),
        intersect_eq(F, G, H),
        list_difference_eq(H, D, I),
        translate(I, C, E).
simpagation_head2_new_worker([A|B], C, D, E, F/G, H, I, J, K) :-
        E=pragma(L,ids(M,_),N,_,_),
        L=rule(_,_,O,P),
        get_prop_inner_loop_vars(B, [A,C,O,P], Q, R, S, T),
        gen_var(U),
        gen_var(V),
        functor(A, W, X),
        gen_vars(X, Y),
        head_info(A, X, Y, U, _, Z),
        get_constraint_mode(W/X, A1),
        head_arg_matches(Z, A1, R, B1, C1, [], _),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(W/X,D1),get_static_suspension_term_field(state,W/X,D1,E1),get_static_suspension_term_field(arguments,W/X,D1,Y))),
        different_from_other_susps(A, U, B, T, F1),
        create_get_mutable_ref(active, E1, G1),
        H1=(U=D1,G1,F1,B1),
        I1=[[U|V]|Q],
        build_head(F, G, I, I1, J1),
        guard_splitting(L, K1),
        guard_via_reschedule_new(C, K1, [A|B], L1, M1, N1),
        rest_heads_retrieval_and_matching(C, D, [A|B], M1, O1, C1, P1, [A|B], [U|T], []),
        split_by_ids(D, O1, M, Q1, R1),
        split_by_ids(D, C, M, S1, _),
        gen_uncond_susps_detachments([U|Q1], [A|S1], T1),
        writeln(worker_d),
        U1=[V|Q],
        build_head(F, G, I, U1, V1),
        W1=[[]|Q],
        build_head(F, G, I, W1, X1),
        writeln(worker_d1),
        guard_body_copies3(L, K1, P1, L1, Y1),
        writeln(worker_d2),
        (   Y1\==true,
            is_observed(F/G, H) ->
            gen_uncond_attach_goal(F/G, S, Z1, A2),
            gen_state_cond_call(S, F/G, V1, A2, B2),
            gen_state_cond_call(S, F/G, X1, A2, C2)
        ;   Z1=true,
            B2=V1,
            C2=X1
        ),
        writeln(worker_e),
        (   chr_pp_flag(debugable, on) ->
            my_term_copy(O-P, R, D2-E2),
            F2='chr debug_event'(try([U|Q1],[S|R1],D2,E2)),
            G2='chr debug_event'(apply([U|Q1],[S|R1],D2,E2))
        ;   F2=true,
            G2=true
        ),
        (   member(unique(_,H2), N),
            check_unique_keys(H2, R) ->
            I2=(J1:-H1->(N1,F2->G2,T1,Z1,Y1,C2 ;  X1) ;  V1)
        ;   I2=(J1:-H1,N1,F2->G2,T1,Z1,Y1,B2 ;  V1)
        ),
        J=[I2|K].
gen_state_cond_call(A, B, C, D, E) :-
        (   may_trigger(B) ->
            delay_phase_end(validate_store_type_assumptions, (static_suspension_term(B,F),get_static_suspension_term_field(state,B,F,G),get_static_suspension_term_field(generation,B,F,H),get_static_suspension_term_field(arguments,B,F,I))),
            create_get_mutable_ref(D, H, J)
        ;   delay_phase_end(validate_store_type_assumptions, (static_suspension_term(B,F),get_static_suspension_term_field(state,B,F,G),get_static_suspension_term_field(arguments,B,F,I))),
            J=true
        ),
        create_get_mutable_ref(active, G, K),
        E=(A=F,K,J->'chr update_mutable'(inactive,G),C ;  true).
propagation_code(A, B, C, D, E, F, G, H, I, J) :-
        (   B== [] ->
            propagation_single_headed(A, D, E, F, G, H, I, J)
        ;   propagation_multi_headed(A, B, C, D, E, F, G, H, I, J)
        ).
propagation_single_headed(A, B, C, D/E, F, G, H, I) :-
        head_info(A, E, J, K, L, M),
        build_head(D, E, G, L, N),
        inc_id(G, O),
        build_head(D, E, O, L, P),
        get_constraint_mode(D/E, Q),
        head_arg_matches(M, Q, [], R, S, [], _),
        get_occurrence(D/E, F, _, T),
        guard_body_copies([K], [T], B, C, S, U, V),
        gen_occ_allocation(D/E, F, J, K, L, W),
        X=P,
        (   V\==true,
            is_observed(D/E, F) ->
            gen_uncond_attach_goal(D/E, K, Y, Z),
            gen_state_cond_call(K, D/E, X, Z, A1)
        ;   Y=true,
            A1=X
        ),
        (   unconditional_occurrence(D/E, F),
            chr_pp_flag(late_allocation, on) ->
            B1=true
        ;   B1=!
        ),
        (   chr_pp_flag(debugable, on) ->
            B=rule(_,_,C1,D1),
            my_term_copy(C1-D1, S, E1-F1),
            G1='chr debug_event'(try([],[K],E1,F1)),
            H1='chr debug_event'(apply([],[K],E1,F1)),
            instrument_goal(B1, G1, H1, I1)
        ;   I1=B1
        ),
        (   may_trigger(D/E),
            \+has_no_history(C) ->
            use_auxiliary_predicate(novel_production),
            use_auxiliary_predicate(extend_history),
            does_use_history(D/E),
            J1='$novel_production'(K,C),
            K1='$extend_history'(K,C)
        ;   J1=true,
            K1=true
        ),
        L1=(N:-R,W,J1,U,I1,K1,Y,V,A1),
        H=[L1|I].
propagation_multi_headed(A, B, C, D, E, F, G, H, I, J) :-
        B=[K|L],
        propagation_prelude(A, B, D, F, G, H, I, M),
        extend_id(H, N),
        propagation_nested_code(L, [K,A], C, D, E, F, G, N, M, J).
propagation_prelude(A, [B|C], D, E/F, G, H, I, J) :-
        head_info(A, F, K, L, M, N),
        build_head(E, F, H, M, O),
        get_constraint_mode(E/F, P),
        head_arg_matches(N, P, [], Q, R),
        D=rule(_,_,S,T),
        extra_active_delegate_variables(A, [B,C,S,T], R, U),
        lookup_passive_head(B, [A], R, V, W),
        gen_occ_allocation(E/F, G, K, L, M, X),
        extend_id(H, Y),
        append([W|M], U, Z),
        build_head(E, F, Y, Z, A1),
        B1=A1,
        C1=(O:-Q,V,!,X,B1),
        I=[C1|J].
propagation_nested_code([], [A|B], C, D, E, F, G, H, I, J) :-
        universal_search_iterator_end([A|B], [], D, F, H, I, K),
        propagation_body(A, B, C, D, E, F, G, H, K, J).
propagation_nested_code([A|B], C, D, E, F, G, H, I, J, K) :-
        universal_search_iterator_end(C, [A|B], E, G, I, J, L),
        universal_search_iterator([A|B], C, E, G, I, L, M),
        inc_id(I, N),
        propagation_nested_code(B, [A|C], D, E, F, G, H, N, M, K).
check_fd_lookup_condition(_, _, _, _) :-
        fail.
propagation_body(A, B, C, D, E, F/G, H, I, J, K) :-
        D=rule(_,_,L,M),
        gen_var_susp_list_for_b(B, [A,L,M], N, O, P, Q, R),
        flatten(O, S),
        init(Q, T),
        last(Q, U),
        gen_var(V),
        gen_var(W),
        functor(A, X, Y),
        gen_vars(Y, Z),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(X/Y,A1),get_static_suspension_term_field(state,X/Y,A1,B1),get_static_suspension_term_field(arguments,X/Y,A1,Z))),
        create_get_mutable_ref(active, B1, C1),
        D1=(V=A1,C1),
        E1=[[V|W]|S],
        build_head(F, G, I, E1, F1),
        (   check_fd_lookup_condition(X, Y, A, B) ->
            universal_search_iterator_failure_vars(B, I, O, P, R, G1, H1),
            I1=G1
        ;   I1=[W|S],
            H1=I
        ),
        build_head(F, G, H1, I1, J1),
        K1=J1,
        A=..[_|L1],
        pairup(L1, Z, M1),
        get_constraint_mode(X/Y, N1),
        head_arg_matches(M1, N1, N, O1, P1),
        different_from_other_susps(A, V, B, T, Q1),
        get_occurrence(F/G, H, _, R1),
        reverse(C, S1),
        guard_body_copies([U,V|T], [R1|S1], D, E, P1, T1, U1),
        (   U1\==true,
            is_observed(F/G, H) ->
            gen_uncond_attach_goal(F/G, U, V1, W1),
            gen_state_cond_call(U, F/G, K1, W1, X1)
        ;   V1=true,
            X1=K1
        ),
        (   (   is_least_occurrence(E)
            ;   has_no_history(E)
            ) ->
            Y1=true,
            Z1=true
        ;   history_susps(C, [V|T], U, R1, A2),
            B2=..[t,E|A2],
            use_auxiliary_predicate(novel_production),
            use_auxiliary_predicate(extend_history),
            does_use_history(F/G),
            bagof('$novel_production'(C2,D2), (lists:member(C2,A2),D2=E2), F2),
            list2conj(F2, G2),
            Y1=(E2=B2,G2),
            Z1='$extend_history'(U,E2)
        ),
        (   chr_pp_flag(debugable, on) ->
            D=rule(_,_,L,M),
            my_term_copy(L-M, P1, H2-I2),
            J2='chr debug_event'(try([],[U,V|T],H2,I2)),
            K2='chr debug_event'(apply([],[U,V|T],H2,I2))
        ;   J2=true,
            K2=true
        ),
        L2=(F1:-D1,Q1,O1,Y1,T1,J2->K2,Z1,V1,U1,X1 ;  K1),
        J=[L2|K].
history_susps(A, B, C, D, E) :-
        reverse(B, F),
        pairup([D|A], [C|F], G),
        sort(G, H),
        pairup(_, E, H).
gen_var_susp_list_for([A], B, C, D, E, F) :- !,
        functor(A, G, H),
        head_info(A, H, _, F, E, I),
        get_constraint_mode(G/H, J),
        head_arg_matches(I, J, [], _, C),
        extra_active_delegate_variables(A, B, C, K),
        append(E, K, D).
gen_var_susp_list_for([A|B], C, D, E, F, G) :-
        gen_var_susp_list_for(B, [A|C], H, F, _, _),
        functor(A, I, J),
        gen_var(G),
        head_info(A, J, _, K, _, L),
        get_constraint_mode(I/J, M),
        head_arg_matches(L, M, H, _, D),
        passive_delegate_variables(A, B, C, D, N),
        append(N, [K,G|F], E).
gen_var_susp_list_for_b([A], B, C, [D], E, [F], []) :- !,
        functor(A, G, H),
        head_info(A, H, _, F, E, I),
        get_constraint_mode(G/H, J),
        head_arg_matches(I, J, [], _, C),
        extra_active_delegate_variables(A, B, C, K),
        append(E, K, D).
gen_var_susp_list_for_b([A|B], C, D, [E|F], G, [H|I], [J|K]) :-
        gen_var_susp_list_for_b(B, [A|C], L, F, G, I, K),
        functor(A, M, N),
        gen_var(J),
        head_info(A, N, _, H, _, O),
        get_constraint_mode(M/N, P),
        head_arg_matches(O, P, L, _, D),
        passive_delegate_variables(A, B, C, D, Q),
        append(Q, [H,J], E).
get_prop_inner_loop_vars([A], B, C, D, E, []) :- !,
        functor(A, F, G),
        head_info(A, G, _, E, H, I),
        get_constraint_mode(F/G, J),
        head_arg_matches(I, J, [], _, D),
        extra_active_delegate_variables(A, B, D, K),
        append(H, K, C).
get_prop_inner_loop_vars([A|B], C, D, E, F, [G|H]) :-
        get_prop_inner_loop_vars(B, [A|C], I, J, F, H),
        functor(A, K, L),
        gen_var(M),
        head_info(A, L, _, G, _, N),
        get_constraint_mode(K/L, O),
        head_arg_matches(N, O, J, _, E),
        passive_delegate_variables(A, B, C, E, P),
        append(P, [G,M|I], D).
reorder_heads(A, B, C, D, E, F) :-
        (   chr_pp_flag(reorder_heads, on),
            length(C, G),
            G=<6 ->
            reorder_heads_main(A, B, C, D, E, F)
        ;   E=C,
            F=D
        ).
reorder_heads_main(A, B, C, D, E, F) :-
        term_variables(B, G),
        H=entry([],[],G,C,D,A),
        copy_term_nat(H, I),
        a_star(I, J^(chr_translate:final_data(J)), K^L^M^(chr_translate:expand_data(K,L,M)), N),
        I=H,
        N=entry(O,P,_,_,_,_),
        reverse(O, E),
        reverse(P, F).
final_data(A) :-
        A=entry(_,_,_,_,[],_).
expand_data(A, B, C) :-
        A=entry(D,E,F,G,H,I),
        select2(J, K, G, H, L, M),
        term_variables([J|F], N),
        B=entry([J|D],[K|E],N,L,M,I),
        order_score(J, K, F, L, I, C).
order_score(A, B, C, D, E, F) :-
        functor(A, G, H),
        get_store_type(G/H, I),
        order_score(I, A, B, C, D, E, F).
order_score(default, A, _, B, C, _, D) :-
        term_variables(A, E),
        term_variables(C, F),
        order_score_vars(E, B, F, D).
order_score(multi_inthash(A), B, _, C, _, _, D) :-
        order_score_indexes(A, B, C, 0, D).
order_score(multi_hash(A), B, _, C, _, _, D) :-
        order_score_indexes(A, B, C, 0, D).
order_score(global_ground, A, _, B, C, _, D) :-
        term_variables(A, E),
        term_variables(C, F),
        order_score_vars(E, B, F, G),
        D is G*2.
order_score(global_singleton, _, _, _, _, _, A) :-
        A=1.
order_score(multi_store(A), B, C, D, E, F, G) :-
        find_with_var_identity(H, t(B,D,E), (lists:member(I,A),chr_translate:order_score(I,B,C,D,E,F,H)), J),
        min_list(J, G).
order_score_indexes([], _, _, A, B) :-
        A>0,
        B=100.
order_score_indexes([A|B], C, D, E, F) :-
        multi_hash_key_args(A, C, G),
        (   forall(H, G, memberchk_eq(H,D)) ->
            I is E+1
        ;   I=E
        ),
        order_score_indexes(B, C, D, I, F).
order_score_vars(A, B, C, D) :-
        order_score_count_vars(A, B, C, E-F-G),
        (   E-F-G==0-0-0 ->
            D=0
        ;   E>0 ->
            D is max(10-E,0)
        ;   F>0 ->
            D is max(10-F,1)*10
        ;   D is max(10-G,1)*100
        ).
order_score_count_vars([], _, _, 0-0-0).
order_score_count_vars([A|B], C, D, E-F-G) :-
        order_score_count_vars(B, C, D, H-I-J),
        (   memberchk_eq(A, C) ->
            E is H+1,
            F=I,
            G=J
        ;   memberchk_eq(A, D) ->
            F is I+1,
            E=H,
            G=J
        ;   G is J+1,
            E=H,
            F=I
        ).
create_get_mutable_ref(A, B, C) :-
        C=(B=mutable(A)).
gen_var(_).
gen_vars(A, B) :-
        length(B, A).
head_info(A, B, C, D, E, F) :-
        vars_susp(B, C, D, E),
        A=..[_|G],
        pairup(G, C, F).
inc_id([A|B], [C|B]) :-
        C is A+1.
dec_id([A|B], [C|B]) :-
        C is A-1.
extend_id(A, [0|A]).
next_id([_,A|B], [C|B]) :-
        C is A+1.
build_head(A, B, C, D, E) :-
        buildName(A, B, C, F),
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(A/B),
                has_active_occurrence(A/B),
                (   may_trigger(A/B)
                ;   get_allocation_occurrence(A/B, G),
                    get_max_occurrence(A/B, H),
                    H>=G
                )
            ) ->
            E=..[F|D]
        ;   init(D, I),
            E=..[F|I]
        ).
buildName(A, B, C, D) :-
        (   (   chr_pp_flag(debugable, on)
            ;   once((is_stored(A/B),(has_active_occurrence(A/B) ;  chr_pp_flag(late_allocation,off)),(may_trigger(A/B) ;  get_allocation_occurrence(A/B,E),get_max_occurrence(A/B,F),F>=E) ;  C\=[0]))
            ) ->
            atom_concat(A, /, G),
            atomic_concat(G, B, H),
            buildName_(C, H, D)
        ;   D=A
        ).
buildName_([], A, A).
buildName_([A|B], C, D) :-
        buildName_(B, C, E),
        atom_concat(E, '__', F),
        atomic_concat(F, A, D).
vars_susp(A, B, C, D) :-
        length(B, A),
        append(B, [C], D).
make_attr(A, B, C, D) :-
        length(C, A),
        D=..[v,B|C].
or_pattern(A, B) :-
        C is A-1,
        B is 1<<C.
and_pattern(A, B) :-
        C is A-1,
        D is 1<<C,
        B is-1*(D+1).
make_name(A, B/C, D) :-
        atom_concat_list([A,B,/,C], D).
lookup_passive_head(A, B, C, D, E) :-
        functor(A, F, G),
        get_store_type(F/G, H),
        lookup_passive_head(H, A, B, C, D, E).
lookup_passive_head(default, A, B, C, D, E) :-
        functor(A, _, _),
        passive_head_via(A, B, C, D, E).
lookup_passive_head(multi_inthash(A), B, _, C, D, E) :-
        once((member(F,A),multi_hash_key_args(F,B,G),(translate(G,C,H) ;  ground(G),H=G))),
        (   H=[I] ->
            true
        ;   I=..[k|H]
        ),
        functor(B, J, K),
        multi_hash_via_lookup_name(J/K, F, L),
        D=..[L,I,E],
        update_store_type(J/K, multi_inthash([F])).
lookup_passive_head(multi_hash(A), B, _, C, D, E) :-
        once((member(F,A),multi_hash_key_args(F,B,G),(translate(G,C,H) ;  ground(G),H=G))),
        (   H=[I] ->
            true
        ;   I=..[k|H]
        ),
        functor(B, J, K),
        multi_hash_via_lookup_name(J/K, F, L),
        D=..[L,I,E],
        update_store_type(J/K, multi_hash([F])).
lookup_passive_head(global_ground, A, _, _, B, C) :-
        functor(A, D, E),
        global_ground_store_name(D/E, F),
        make_get_store_goal(F, C, B),
        update_store_type(D/E, global_ground).
lookup_passive_head(global_singleton, A, _, _, B, C) :-
        functor(A, D, E),
        global_singleton_store_name(D/E, F),
        make_get_store_goal(F, G, H),
        B=(H,G\== [],C=[G]),
        update_store_type(D/E, global_singleton).
lookup_passive_head(multi_store(A), B, C, D, E, F) :-
        once((member(G,A),lookup_passive_head(G,B,C,D,E,F))).
existential_lookup(global_singleton, A, _, _, B, _, C, D, E, E) :- !,
        functor(A, F, G),
        global_singleton_store_name(F/G, H),
        make_get_store_goal(H, D, I),
        C=(I,D\== [],D=B),
        update_store_type(F/G, global_singleton).
existential_lookup(multi_store(A), B, C, D, E, F, G, H, I, J) :- !,
        once((member(K,A),existential_lookup(K,B,C,D,E,F,G,H,I,J))).
existential_lookup(multi_inthash(A), B, _, C, D, E, F, G, H, I) :- !,
        once((member(J,A),multi_hash_key_args(J,B,K),(translate(K,C,L) ;  ground(K),L=K))),
        (   L=[M] ->
            true
        ;   M=..[k|L]
        ),
        functor(B, N, O),
        multi_hash_via_lookup_name(N/O, J, P),
        Q=..[P,M,R],
        create_get_mutable_ref(active, E, S),
        sbag_member_call(G, R, T),
        F=(Q,T,G=D,S),
        hash_index_filter(H, J, I),
        update_store_type(N/O, multi_inthash([J])).
existential_lookup(multi_hash(A), B, _, C, D, E, F, G, H, I) :- !,
        once((member(J,A),multi_hash_key_args(J,B,K),(translate(K,C,L) ;  ground(K),L=K))),
        (   L=[M] ->
            true
        ;   M=..[k|L]
        ),
        functor(B, N, O),
        multi_hash_via_lookup_name(N/O, J, P),
        Q=..[P,M,R],
        sbag_member_call(G, R, S),
        create_get_mutable_ref(active, E, T),
        F=(Q,S,G=D,T),
        hash_index_filter(H, J, I),
        update_store_type(N/O, multi_hash([J])).
existential_lookup(A, B, C, D, E, F, G, H, I, I) :-
        lookup_passive_head(A, B, C, D, J, K),
        sbag_member_call(H, K, L),
        create_get_mutable_ref(active, F, M),
        G=(J,L,H=E,M).
hash_index_filter(A, B, C) :-
        (   integer(B) ->
            D=[B]
        ;   D=B
        ),
        hash_index_filter(A, D, 1, C).
hash_index_filter([], _, _, []).
hash_index_filter([A|B], C, D, E) :-
        (   C=[F|G] ->
            H is D+1,
            (   F>D ->
                E=[A|I],
                hash_index_filter(B, [F|G], H, I)
            ;   F==D ->
                E=I,
                hash_index_filter(B, G, H, I)
            )
        ;   E=[A|B]
        ).
assume_constraint_stores([]).
assume_constraint_stores([A|B]) :-
        (   only_ground_indexed_arguments(A),
            is_stored(A),
            get_store_type(A, default) ->
            get_indexed_arguments(A, C),
            length(C, D),
            (   D>10 ->
                findall([E], member(E,C), F)
            ;   findall(E, (sublist(E,C),E\== []), G),
                predsort(longer_list, G, F)
            ),
            (   get_functional_dependency(A, 1, H, I),
                all_distinct_var_args(H),
                I== [] ->
                assumed_store_type(A, global_singleton)
            ;   get_constraint_type(A, J),
                findall(E, (member(E,F),E=[K],nth(K,J,dense_int)), L),
                L\== [] ->
                list_difference_eq(F, L, M),
                (   M\== [] ->
                    assumed_store_type(A, multi_store([multi_inthash(L),multi_hash(M),global_ground]))
                ;   assumed_store_type(A, multi_store([multi_inthash(L),global_ground]))
                )
            ;   assumed_store_type(A, multi_store([multi_hash(F),global_ground]))
            )
        ;   true
        ),
        assume_constraint_stores(B).
longer_list(A, B, C) :-
        length(B, D),
        length(C, E),
        compare(F, E, D),
        (   F==(=) ->
            compare(A, B, C)
        ;   A=F
        ).
all_distinct_var_args(A) :-
        A=..[_|B],
        copy_term_nat(B, C),
        all_distinct_var_args_(C).
all_distinct_var_args_([]).
all_distinct_var_args_([A|B]) :-
        var(A),
        A=t,
        all_distinct_var_args_(B).
get_indexed_arguments(A, B) :-
        A=_/C,
        get_indexed_arguments(1, C, A, B).
get_indexed_arguments(A, B, C, D) :-
        (   A>B ->
            D= []
        ;   (   is_indexed_argument(C, A) ->
                D=[A|E]
            ;   D=E
            ),
            F is A+1,
            get_indexed_arguments(F, B, C, E)
        ).
validate_store_type_assumptions([]).
validate_store_type_assumptions([A|B]) :-
        validate_store_type_assumption(A),
        validate_store_type_assumptions(B).
universal_search_iterator_end([A|B], C, D, E/F, G, H, I) :-
        D=rule(J,_,K,L),
        (   J== [],
            functor(A, M, N),
            check_fd_lookup_condition(M, N, A, B) ->
            H=I
        ;   gen_var_susp_list_for_b(B, [A,C,K,L], _, O, P, _, Q),
            universal_search_iterator_failure_vars(B, G, O, P, Q, R, S),
            flatten(O, T),
            U=[[]|T],
            build_head(E, F, G, U, V),
            build_head(E, F, S, R, W),
            X=(V:-W),
            H=[X|I]
        ).
universal_search_iterator_failure_vars(A, B, C, D, E, F, G) :-
        (   B=[0|_] ->
            next_id(B, G),
            F=D
        ;   C=[_|H],
            dec_id(B, I),
            (   A=[J|K],
                functor(J, L, M),
                check_fd_lookup_condition(L, M, J, K) ->
                E=[_|N],
                universal_search_iterator_failure_vars(K, I, H, D, N, F, G)
            ;   G=I,
                flatten(H, O),
                E=[P|_],
                F=[P|O]
            )
        ).
universal_search_iterator([A|B], [C|D], E, F/G, H, I, J) :-
        E=rule(_,_,K,L),
        gen_var_susp_list_for_b(D, [C,A,B,K,L], M, N, O, P, Q),
        init(P, R),
        flatten(N, S),
        gen_var(T),
        functor(C, U, V),
        gen_vars(V, W),
        head_info(C, V, W, X, _, Y),
        get_constraint_mode(U/V, Z),
        head_arg_matches(Y, Z, M, A1, B1),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(U/V,C1),get_static_suspension_term_field(state,U/V,C1,D1),get_static_suspension_term_field(arguments,U/V,C1,W))),
        different_from_other_susps(C, X, D, R, E1),
        create_get_mutable_ref(active, D1, F1),
        G1=(X=C1,F1,E1,A1),
        lookup_passive_head(A, [C|D], B1, H1, I1),
        inc_id(H, J1),
        K1=[[X|T]|S],
        build_head(F, G, H, K1, L1),
        passive_delegate_variables(C, D, [A,B,K,L], B1, M1),
        append([I1|M1], [X,T|S], N1),
        build_head(F, G, J1, N1, O1),
        (   check_fd_lookup_condition(U, V, C, D) ->
            universal_search_iterator_failure_vars(D, H, N, O, Q, P1, Q1),
            R1=P1
        ;   R1=[T|S],
            Q1=H
        ),
        build_head(F, G, Q1, R1, S1),
        T1=(L1:-G1,H1->O1 ;  S1),
        I=[T1|J].
ai_observation_analysis(A) :-
        (   chr_pp_flag(ai_observation_analysis, on),
            get_target_module(B),
            B\==chr_translate ->
            list_to_ord_set(A, _),
            abstract_constraints(A),
            ai_observation_schedule_initial_calls(A),
            ai_observation_gather_results
        ;   true
        ).
ai_observation_schedule_initial_calls([]).
ai_observation_schedule_initial_calls([A|B]) :-
        ai_observation_schedule_initial_call(A),
        ai_observation_schedule_initial_calls(B).
ai_observation_schedule_initial_call(A) :-
        ai_observation_top(A, B),
        initial_call_pattern(B).
ai_observation_schedule_new_calls([], _).
ai_observation_schedule_new_calls([A|B], C) :-
        C=odom(_,D),
        initial_call_pattern(odom(A,D)),
        ai_observation_schedule_new_calls(B, C).
ai_observation_lub(odom(A,B), odom(A,C), odom(A,D)) :-
        ord_intersection(B, C, D).
ai_observation_top(A, odom(A,B)) :-
        ord_empty(B).
ai_observation_leq(odom(A,B), odom(A,C)) :-
        ord_subset(C, B).
ai_observation_observe_list(odom(A,B), C, odom(A,D)) :-
        list_to_ord_set(C, E),
        ord_subtract(B, E, D).
ai_observation_abstract_constraint(A, B, C) :-
        functor(A, D, E),
        C=D/E,
        member(C, B).
ai_observation_abstract_constraints(A, B, C) :-
        findall(D, (member(E,A),ai_observation_abstract_constraint(E,B,D)), C).
ai_observation_abstract_goal_(A, B, C, D, E, F) :-
        term_variables((A,B,C), G),
        append(A, B, H),
        ground_vars(H, I),
        list_difference_eq(G, I, J),
        ai_observation_abstract_goal(D, E, F, [], J), !.
ground_vars([], []).
ground_vars([A|B], C) :-
        functor(A, D, E),
        get_constraint_mode(D/E, F),
        head_info(A, E, _, _, _, G),
        head_arg_matches(G, F, [], _, _, [], H),
        ground_vars(B, I),
        append(H, I, C).
ai_observation_abstract_goal((A,B), C, D, E, F) :- !,
        ai_observation_abstract_goal(A, C, D, G, F),
        ai_observation_abstract_goal(B, C, G, E, F).
ai_observation_abstract_goal((A ;  B), C, D, E, F) :- !,
        ai_observation_abstract_goal(A, C, D, G, F),
        ai_observation_abstract_goal(B, C, G, E, F).
ai_observation_abstract_goal((A->B), C, D, E, F) :- !,
        ai_observation_abstract_goal(A, C, D, G, F),
        ai_observation_abstract_goal(B, C, G, E, F).
ai_observation_abstract_goal(A, B, [C|D], D, _) :-
        ai_observation_abstract_constraint(A, B, C), !.
ai_observation_abstract_goal(true, _, A, A, _) :- !.
ai_observation_abstract_goal(writeln(_), _, A, A, _) :- !.
ai_observation_abstract_goal(A, _, B, B, C) :-
        binds_b(A, D),
        intersect_eq(D, C, []), !.
ai_observation_abstract_goal(_, _, [A|B], B, _) :-
        A=builtin.
ai_observation_is_observed(odom(_,A), B) :-
        \+ord_memberchk(B,A).
unconditional_occurrence(A, B) :-
        get_occurrence(A, B, C, _),
        get_rule(C, D),
        D=pragma(E,_,_,_,_),
        copy_term_nat(E, F),
        F=rule(G,H,I,_),
        guard_entailment:entails_guard([chr_pp_headvariables(G,H)],I),
        once((G=[J],H== [] ;  H=[J],G== [],\+may_trigger(A))),
        functor(J, _, _),
        J=..[_|K],
        unconditional_occurrence_args(K).
unconditional_occurrence_args([]).
unconditional_occurrence_args([A|B]) :-
        var(A),
        A=x,
        unconditional_occurrence_args(B).
generate_show_constraint(A, B, C, D) :-
        (   chr_pp_flag(show, on) ->
            B=['$show'/0|A],
            generate_show_rules(A, D, [E|C]),
            inc_rule_count(F),
            E=pragma(rule(['$show'],[],true,true),ids([0],[]),[],no,F)
        ;   B=A,
            D=C
        ).
generate_show_rules([], A, A).
generate_show_rules([A/B|C], [D|E], F) :-
        functor(G, A, B),
        inc_rule_count(H),
        D=pragma(rule([],['$show',G],true,writeln(G)),ids([],[0,1]),[passive(1)],no,H),
        generate_show_rules(C, E, F).
static_suspension_term(A/B, C) :-
        suspension_term_base(A/B, D),
        E is D+B,
        functor(C, suspension, E).
suspension_term_base(A, B) :-
        suspension_term_base_fields(A, C),
        length(C, B).
suspension_term_base_fields(A, B) :-
        B=[id,state|C],
        (   chr_pp_flag(debugable, on) ->
            C=[history,generation,continuation,functor]
        ;   C=[history|D],
            (   only_ground_indexed_arguments(A) ->
                get_store_type(A, E),
                basic_store_types(E, F),
                (   memberchk(global_ground, F) ->
                    D=[global_list_prev]
                ;   D= []
                )
            ;   may_trigger(A) ->
                D=[generation,continuation,global_list_prev]
            ;   D=[global_list_prev]
            )
        ).
get_static_suspension_term_field(A, B, C, D) :-
        suspension_term_base_fields(B, E),
        nth(F, E, A), !,
        arg(F, C, D).
get_static_suspension_term_field(arguments, A, B, C) :- !,
        suspension_term_base(A, D),
        B=..[_|E],
        drop(D, E, C).
get_static_suspension_term_field(A, B, _, _) :-
        chr_error(internal, 'Trying to obtain field ~w of ~w, wich does not have it!', [A,B]).
get_dynamic_suspension_term_field(A, B, C, D, E) :-
        suspension_term_base_fields(B, F),
        nth(G, F, A), !,
        E=arg(G,C,D).
get_dynamic_suspension_term_field(arguments, A, B, C, D) :- !,
        static_suspension_term(A, E),
        get_static_suspension_term_field(arguments, A, E, C),
        D=(B=E).
get_dynamic_suspension_term_field(argument(A), B, C, D, E) :- !,
        suspension_term_base(B, F),
        G is A+F,
        E=arg(G,C,D).
get_dynamic_suspension_term_field(A, B, _, _, _) :-
        chr_error(internal, 'Dynamic goal to get ~w of ~w, which does not have this field!', [A,B]).
set_dynamic_suspension_term_field(A, B, C, D, E) :-
        suspension_term_base_fields(B, F),
        nth(G, F, A), !,
        E=setarg(G,C,D).
set_dynamic_suspension_term_field(A, B, _, _, _) :-
        chr_error(internal, 'Dynamic goal to set ~w of ~w, which does not have this field!', [A,B]).
basic_store_types(multi_store(A), A) :- !.
basic_store_types(A, [A]).
'attach_head_name/4'([], _).
'attach_head_name/4'([A|B], C) :-
        (   get_attr(A, chr_translate, K) ->
            K=v(I,D,E,F,G,H),
            (   I/\1=:=1 ->
                put_attr(A, chr_translate, v(I,[C|D],E,F,G,H))
            ;   J is I\/1,
                put_attr(A, chr_translate, v(J,[C],E,F,G,H))
            )
        ;   put_attr(A, chr_translate, v(1,[C],[C],[C],[C],[C]))
        ),
        'attach_head_name/4'(B, C).
'detach_head_name/4'([], _).
'detach_head_name/4'([A|B], C) :-
        (   get_attr(A, chr_translate, L) ->
            L=v(I,D,E,F,G,H),
            (   I/\1=:=1 ->
                'chr sbag_del_element'(D, C, K),
                (   K== [] ->
                    J is I/\ -2,
                    (   J==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(J,[],E,F,G,H))
                    )
                ;   put_attr(A, chr_translate, v(I,K,E,F,G,H))
                )
            ;   true
            )
        ;   true
        ),
        'detach_head_name/4'(B, C).
'attach_prolog_global_variable/1'([], _).
'attach_prolog_global_variable/1'([A|B], C) :-
        (   get_attr(A, chr_translate, K) ->
            K=v(I,D,E,F,G,H),
            (   I/\2=:=2 ->
                put_attr(A, chr_translate, v(I,D,[C|E],F,G,H))
            ;   J is I\/2,
                put_attr(A, chr_translate, v(J,D,[C],F,G,H))
            )
        ;   put_attr(A, chr_translate, v(2,[C],[C],[C],[C],[C]))
        ),
        'attach_prolog_global_variable/1'(B, C).
'detach_prolog_global_variable/1'([], _).
'detach_prolog_global_variable/1'([A|B], C) :-
        (   get_attr(A, chr_translate, L) ->
            L=v(I,D,E,F,G,H),
            (   I/\2=:=2 ->
                'chr sbag_del_element'(E, C, K),
                (   K== [] ->
                    J is I/\ -3,
                    (   J==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(J,D,[],F,G,H))
                    )
                ;   put_attr(A, chr_translate, v(I,D,K,F,G,H))
                )
            ;   true
            )
        ;   true
        ),
        'detach_prolog_global_variable/1'(B, C).
'attach_type_definition/2'([], _).
'attach_type_definition/2'([A|B], C) :-
        (   get_attr(A, chr_translate, K) ->
            K=v(I,D,E,F,G,H),
            (   I/\4=:=4 ->
                put_attr(A, chr_translate, v(I,D,E,[C|F],G,H))
            ;   J is I\/4,
                put_attr(A, chr_translate, v(J,D,E,[C],G,H))
            )
        ;   put_attr(A, chr_translate, v(4,[C],[C],[C],[C],[C]))
        ),
        'attach_type_definition/2'(B, C).
'detach_type_definition/2'([], _).
'detach_type_definition/2'([A|B], C) :-
        (   get_attr(A, chr_translate, L) ->
            L=v(I,D,E,F,G,H),
            (   I/\4=:=4 ->
                'chr sbag_del_element'(F, C, K),
                (   K== [] ->
                    J is I/\ -5,
                    (   J==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(J,D,E,[],G,H))
                    )
                ;   put_attr(A, chr_translate, v(I,D,E,K,G,H))
                )
            ;   true
            )
        ;   true
        ),
        'detach_type_definition/2'(B, C).
'attach_type_alias/2'([], _).
'attach_type_alias/2'([A|B], C) :-
        (   get_attr(A, chr_translate, K) ->
            K=v(I,D,E,F,G,H),
            (   I/\8=:=8 ->
                put_attr(A, chr_translate, v(I,D,E,F,[C|G],H))
            ;   J is I\/8,
                put_attr(A, chr_translate, v(J,D,E,F,[C],H))
            )
        ;   put_attr(A, chr_translate, v(8,[C],[C],[C],[C],[C]))
        ),
        'attach_type_alias/2'(B, C).
'detach_type_alias/2'([], _).
'detach_type_alias/2'([A|B], C) :-
        (   get_attr(A, chr_translate, L) ->
            L=v(I,D,E,F,G,H),
            (   I/\8=:=8 ->
                'chr sbag_del_element'(G, C, K),
                (   K== [] ->
                    J is I/\ -9,
                    (   J==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(J,D,E,F,[],H))
                    )
                ;   put_attr(A, chr_translate, v(I,D,E,F,K,H))
                )
            ;   true
            )
        ;   true
        ),
        'detach_type_alias/2'(B, C).
'attach_does_use_history/1'([], _).
'attach_does_use_history/1'([A|B], C) :-
        (   get_attr(A, chr_translate, K) ->
            K=v(I,D,E,F,G,H),
            (   I/\16=:=16 ->
                put_attr(A, chr_translate, v(I,D,E,F,G,[C|H]))
            ;   J is I\/16,
                put_attr(A, chr_translate, v(J,D,E,F,G,[C]))
            )
        ;   put_attr(A, chr_translate, v(16,[C],[C],[C],[C],[C]))
        ),
        'attach_does_use_history/1'(B, C).
'detach_does_use_history/1'([], _).
'detach_does_use_history/1'([A|B], C) :-
        (   get_attr(A, chr_translate, L) ->
            L=v(I,D,E,F,G,H),
            (   I/\16=:=16 ->
                'chr sbag_del_element'(H, C, K),
                (   K== [] ->
                    J is I/\ -17,
                    (   J==0 ->
                        del_attr(A, chr_translate)
                    ;   put_attr(A, chr_translate, v(J,D,E,F,G,[]))
                    )
                ;   put_attr(A, chr_translate, v(I,D,E,F,G,K))
                )
            ;   true
            )
        ;   true
        ),
        'detach_does_use_history/1'(B, C).
'$chr_translate__indexed_variables'(B, A) :-
        B=target_module(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=indexed_argument(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=constraint_mode(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=none_suspended_on_variables,
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=store_type(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=actual_store_types(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=assumed_store_type(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=rule_count(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=passive(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=occurrence(_,_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=max_occurrence(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=allocation_occurrence(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=rule(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=least_occurrence(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=constraint_index(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=max_constraint_index(_),
        A= [] .
'$chr_translate__indexed_variables'(E, D) :-
        E=head_name(A,_,_,B),
        term_variables(A, D, C),
        term_variables(B, C).
'$chr_translate__indexed_variables'(B, A) :-
        B=no_history(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=indexing_spec(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=observes(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=spawns_observer(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=observes_indirectly(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=module_initializer(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=prolog_global_variable(_),
        term_variables(B, A).
'$chr_translate__indexed_variables'(B, A) :-
        B=prev_guard_list(_,_,_,_,_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=set_all_passive(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=multiple_occ_constraints_checked(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=type_definition(_,_),
        term_variables(B, A).
'$chr_translate__indexed_variables'(B, A) :-
        B=type_alias(_,_),
        term_variables(B, A).
'$chr_translate__indexed_variables'(B, A) :-
        B=constraint_type(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=add_type_information(_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=stored(_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=stored_complete(_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=check_all_passive(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=constraints_code1(_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=use_auxiliary_predicate(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=use_auxiliary_predicate(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=functional_dependency(_,_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=initial_call_pattern(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=call_pattern(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=final_answer_pattern(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=abstract_constraints(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=depends_on(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=depends_on_ap(_,_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=depends_on_goal(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_observed_internal(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_observed(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_not_observed_internal(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_not_observed(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=depends_on_as(_,_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=ai_observation_gather_results,
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=phase_end(_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=delay_phase_end(_,_),
        A= [] .
'$chr_translate__indexed_variables'(B, A) :-
        B=does_use_history(_),
        term_variables(B, A).
attach_increment([], _).
attach_increment([M|N], v(F,A,B,C,D,E)) :-
        'chr not_locked'(M),
        (   get_attr(M, chr_translate, Z) ->
            Z=v(L,G,H,I,J,K),
            sort(G, W),
            'chr merge_attributes'(A, W, X),
            sort(H, U),
            'chr merge_attributes'(B, U, V),
            sort(I, S),
            'chr merge_attributes'(C, S, T),
            sort(J, Q),
            'chr merge_attributes'(D, Q, R),
            sort(K, O),
            'chr merge_attributes'(E, O, P),
            Y is F\/L,
            put_attr(M, chr_translate, v(Y,X,V,T,R,P))
        ;   put_attr(M, chr_translate, v(F,A,B,C,D,E))
        ),
        attach_increment(N, v(F,A,B,C,D,E)).
attr_unify_hook(v(F,A,B,C,D,E), C1) :-
        sort(A, Q),
        sort(B, P),
        sort(C, O),
        sort(D, N),
        sort(E, M),
        (   var(C1) ->
            (   get_attr(C1, chr_translate, D1) ->
                D1=v(L,G,H,I,J,K),
                sort(G, Z),
                'chr merge_attributes'(Q, Z, A1),
                sort(H, X),
                'chr merge_attributes'(P, X, Y),
                sort(I, V),
                'chr merge_attributes'(O, V, W),
                sort(J, T),
                'chr merge_attributes'(N, T, U),
                sort(K, R),
                'chr merge_attributes'(M, R, S),
                B1 is F\/L,
                put_attr(C1, chr_translate, v(B1,A1,Y,W,U,S)),
                'chr run_suspensions_loop'([A1,Y,W,U,S])
            ;   put_attr(C1, chr_translate, v(F,Q,P,O,N,M)),
                'chr run_suspensions_loop'([Q,P,O,N,M])
            )
        ;   (   compound(C1) ->
                term_variables(C1, E1),
                attach_increment(E1, v(F,Q,P,O,N,M))
            ;   true
            ),
            'chr run_suspensions_loop'([Q,P,O,N,M])
        ).
'$chr_translate__remove_constraint_internal'(A, B, C) :-
        arg(2, A, D),
        'chr get_mutable'(E, D),
        'chr update_mutable'(removed, D),
        (   compound(E) ->
            B= [],
            C=no
        ;   E==removed ->
            B= [],
            C=no
        ;   C=yes,
            '$chr_translate__chr_indexed_variables'(A, B)
        ).
'$chr_translate__activate_constraint'(A, B, C, D) :-
        arg(2, C, E),
        'chr get_mutable'(F, E),
        'chr update_mutable'(active, E),
        (   nonvar(D) ->
            true
        ;   arg(4, C, G),
            'chr get_mutable'(H, G),
            D is H+1,
            'chr update_mutable'(D, G)
        ),
        (   compound(F) ->
            term_variables(F, B),
            'chr none_locked'(B),
            A=yes
        ;   F==removed ->
            '$chr_translate__chr_indexed_variables'(C, B),
            A=yes
        ;   B= [],
            A=no
        ).
'$chr_translate__allocate_constraint'(A, B, C, D) :-
        B=..[suspension,F,G,A,H,I,C|D],
        'chr create_mutable'(0, H),
        'chr empty_history'(J),
        'chr create_mutable'(J, I),
        '$chr_translate__chr_indexed_variables'(B, E),
        'chr create_mutable'(passive(E), G),
        'chr gen_id'(F).
'$chr_translate__chr_indexed_variables'(C, B) :-
        C=..[_,_,_,_,_,_,A|_],
        '$chr_translate__indexed_variables'(A, B).
'$chr_translate__insert_constraint_internal'(yes, A, B, C, D, E) :-
        B=..[suspension,F,G,C,H,I,D|E],
        '$chr_translate__chr_indexed_variables'(B, A),
        'chr none_locked'(A),
        'chr create_mutable'(active, G),
        'chr create_mutable'(0, H),
        'chr empty_history'(J),
        'chr create_mutable'(J, I),
        'chr gen_id'(F).
'$insert_in_store_target_module/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
        b_setval('$chr_store_global_ground_chr_translate:target_module/1', [A|B]).
'$delete_from_store_target_module/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:target_module/1', C).
'$insert_in_store_indexed_argument/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_indexed_argument/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_constraint_mode/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', D),
        b_setval('$chr_store_global_ground_chr_translate:constraint_mode/2', [A|D]),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_constraint_mode/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:constraint_mode/2', E),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_none_suspended_on_variables/0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', B),
        b_setval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', [A|B]).
'$delete_from_store_none_suspended_on_variables/0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', C).
'$insert_in_store_store_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_store_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_actual_store_types/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_actual_store_types/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_assumed_store_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_assumed_store_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_rule_count/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', B),
        b_setval('$chr_store_global_ground_chr_translate:rule_count/1', [A|B]).
'$delete_from_store_rule_count/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:rule_count/1', C).
'$insert_in_store_passive/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_passive/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_occurrence/4'(A) :-
        arg(9, A, M),
        arg(10, A, N),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', O),
        insert_ht(O, k(M,N), A),
        true,
        arg(7, A, K),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', L),
        insert_ht(L, K, A),
        true,
        arg(8, A, I),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', J),
        insert_ht(J, I, A),
        true,
        arg(9, A, G),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', H),
        insert_ht(H, G, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        arg(9, A, D),
        arg(10, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', F),
        insert_ht(F, k(B,C,D,E), A),
        true.
'$delete_from_store_occurrence/4'(A) :-
        arg(9, A, M),
        arg(10, A, N),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', O),
        delete_ht(O, k(M,N), A),
        true,
        arg(7, A, K),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', L),
        delete_ht(L, K, A),
        true,
        arg(8, A, I),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', J),
        delete_ht(J, I, A),
        true,
        arg(9, A, G),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', H),
        delete_ht(H, G, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        arg(9, A, D),
        arg(10, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', F),
        delete_ht(F, k(B,C,D,E), A),
        true.
'$insert_in_store_max_occurrence/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_max_occurrence/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_allocation_occurrence/2'(A) :-
        arg(7, A, F),
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', G),
        insert_ht(G, F, A),
        true,
        arg(7, A, C),
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', E),
        insert_ht(E, k(C,D), A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', B),
        b_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', [A|B]).
'$delete_from_store_allocation_occurrence/2'(A) :-
        arg(7, A, G),
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', H),
        delete_ht(H, G, A),
        true,
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', F),
        delete_ht(F, k(D,E), A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', C).
'$insert_in_store_rule/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule/2', D),
        b_setval('$chr_store_global_ground_chr_translate:rule/2', [A|D]),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_rule/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:rule/2', E),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_least_occurrence/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', D),
        b_setval('$chr_store_global_ground_chr_translate:least_occurrence/2', [A|D]),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_least_occurrence/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:least_occurrence/2', E),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_constraint_index/2'(A) :-
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-2', E),
        insert_ht(E, D, A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_constraint_index/2'(A) :-
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-2', E),
        delete_ht(E, D, A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_max_constraint_index/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
        b_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1', [A|B]).
'$delete_from_store_max_constraint_index/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1', C).
'$insert_in_store_head_name/4'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\1=:=1 ->
                put_attr(I, chr_translate, v(G,[A|B],C,D,E,F))
            ;   H is G\/1,
                put_attr(I, chr_translate, v(H,[A],C,D,E,F))
            )
        ;   put_attr(I, chr_translate, v(1,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_head_name/4'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\1=:=1 ->
                'chr sbag_del_element'(B, A, I),
                (   I== [] ->
                    H is G/\ -2,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,[],C,D,E,F))
                    )
                ;   put_attr(J, chr_translate, v(G,I,C,D,E,F))
                )
            ;   true
            )
        ;   true
        ).
'$insert_in_store_no_history/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_no_history/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_indexing_spec/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_indexing_spec/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_observes/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_observes/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_spawns_observer/2'(A) :-
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', F),
        insert_ht(F, k(D,E), A),
        true,
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_spawns_observer/2'(A) :-
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', F),
        delete_ht(F, k(D,E), A),
        true,
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_observes_indirectly/2'(A) :-
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', F),
        insert_ht(F, k(D,E), A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_observes_indirectly/2'(A) :-
        arg(7, A, D),
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', F),
        delete_ht(F, k(D,E), A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_module_initializer/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:module_initializer/1', B),
        b_setval('$chr_store_global_ground_chr_translate:module_initializer/1', [A|B]).
'$delete_from_store_module_initializer/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:module_initializer/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:module_initializer/1', C).
'$insert_in_store_prolog_global_variable/1'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\2=:=2 ->
                put_attr(I, chr_translate, v(G,B,[A|C],D,E,F))
            ;   H is G\/2,
                put_attr(I, chr_translate, v(H,B,[A],D,E,F))
            )
        ;   put_attr(I, chr_translate, v(2,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_prolog_global_variable/1'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\2=:=2 ->
                'chr sbag_del_element'(C, A, I),
                (   I== [] ->
                    H is G/\ -3,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,B,[],D,E,F))
                    )
                ;   put_attr(J, chr_translate, v(G,B,I,D,E,F))
                )
            ;   true
            )
        ;   true
        ).
'$insert_in_store_prev_guard_list/7'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', F),
        b_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7', [A|F]),
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', E),
        insert_ht(E, D, A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_prev_guard_list/7'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', F),
        'chr sbag_del_element'(F, A, G),
        b_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7', G),
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', E),
        delete_ht(E, D, A),
        true,
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_set_all_passive/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_set_all_passive/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_multiple_occ_constraints_checked/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
        b_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', [A|B]).
'$delete_from_store_multiple_occ_constraints_checked/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', C).
'$insert_in_store_type_definition/2'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\4=:=4 ->
                put_attr(I, chr_translate, v(G,B,C,[A|D],E,F))
            ;   H is G\/4,
                put_attr(I, chr_translate, v(H,B,C,[A],E,F))
            )
        ;   put_attr(I, chr_translate, v(4,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_type_definition/2'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\4=:=4 ->
                'chr sbag_del_element'(D, A, I),
                (   I== [] ->
                    H is G/\ -5,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,B,C,[],E,F))
                    )
                ;   put_attr(J, chr_translate, v(G,B,C,I,E,F))
                )
            ;   true
            )
        ;   true
        ).
'$insert_in_store_type_alias/2'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\8=:=8 ->
                put_attr(I, chr_translate, v(G,B,C,D,[A|E],F))
            ;   H is G\/8,
                put_attr(I, chr_translate, v(H,B,C,D,[A],F))
            )
        ;   put_attr(I, chr_translate, v(8,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_type_alias/2'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\8=:=8 ->
                'chr sbag_del_element'(E, A, I),
                (   I== [] ->
                    H is G/\ -9,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,B,C,D,[],F))
                    )
                ;   put_attr(J, chr_translate, v(G,B,C,D,I,F))
                )
            ;   true
            )
        ;   true
        ).
'$insert_in_store_constraint_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_constraint_type/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_add_type_information/3'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', B),
        b_setval('$chr_store_global_ground_chr_translate:add_type_information/3', [A|B]).
'$delete_from_store_add_type_information/3'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:add_type_information/3', C).
'$insert_in_store_stored/3'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', F),
        insert_ht(F, E, A),
        true,
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', D),
        insert_ht(D, C, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:stored/3', B),
        b_setval('$chr_store_global_ground_chr_translate:stored/3', [A|B]).
'$delete_from_store_stored/3'(A) :-
        arg(7, A, F),
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', G),
        delete_ht(G, F, A),
        true,
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', E),
        delete_ht(E, D, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:stored/3', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:stored/3', C).
'$insert_in_store_stored_complete/3'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_stored_complete/3'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_check_all_passive/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_check_all_passive/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_constraints_code1/3'(A) :-
        arg(7, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', D),
        insert_ht(D, C, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:constraints_code1/3', B),
        b_setval('$chr_store_global_ground_chr_translate:constraints_code1/3', [A|B]).
'$delete_from_store_constraints_code1/3'(A) :-
        arg(7, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', E),
        delete_ht(E, D, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:constraints_code1/3', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:constraints_code1/3', C).
'$insert_in_store_use_auxiliary_predicate/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_use_auxiliary_predicate/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_use_auxiliary_predicate/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_use_auxiliary_predicate/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_functional_dependency/4'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_functional_dependency/4'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_initial_call_pattern/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_initial_call_pattern/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_call_pattern/1'(A) :-
        arg(7, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', D),
        insert_ht(D, C, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', B),
        b_setval('$chr_store_global_ground_chr_translate:call_pattern/1', [A|B]).
'$delete_from_store_call_pattern/1'(A) :-
        arg(7, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', E),
        delete_ht(E, D, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:call_pattern/1', C).
'$insert_in_store_final_answer_pattern/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', D),
        b_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', [A|D]),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_final_answer_pattern/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', E),
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_abstract_constraints/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', B),
        b_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1', [A|B]).
'$delete_from_store_abstract_constraints/1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1', C).
'$insert_in_store_depends_on/2'(A) :-
        arg(7, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', F),
        insert_ht(F, E, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D),
        b_setval('$chr_store_global_ground_chr_translate:depends_on/2', [A|D]),
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_depends_on/2'(A) :-
        arg(7, A, F),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', G),
        delete_ht(G, F, A),
        true,
        nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D),
        'chr sbag_del_element'(D, A, E),
        b_setval('$chr_store_global_ground_chr_translate:depends_on/2', E),
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_depends_on_ap/4'(A) :-
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', E),
        insert_ht(E, D, A),
        true,
        arg(9, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_depends_on_ap/4'(A) :-
        arg(8, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', E),
        delete_ht(E, D, A),
        true,
        arg(9, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_depends_on_goal/2'(A) :-
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', F),
        insert_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_depends_on_goal/2'(A) :-
        arg(8, A, E),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', F),
        delete_ht(F, E, A),
        true,
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_ai_observed_internal/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', E),
        b_setval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', [A|E]),
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_ai_observed_internal/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', E),
        'chr sbag_del_element'(E, A, F),
        b_setval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', F),
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_ai_observed/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed/2', B),
        b_setval('$chr_store_global_ground_chr_translate:ai_observed/2', [A|B]).
'$delete_from_store_ai_observed/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed/2', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:ai_observed/2', C).
'$insert_in_store_ai_not_observed_internal/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', E),
        b_setval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', [A|E]),
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_ai_not_observed_internal/2'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', E),
        'chr sbag_del_element'(E, A, F),
        b_setval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', F),
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_ai_not_observed/2'(A) :-
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', D),
        insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_ai_not_observed/2'(A) :-
        arg(7, A, B),
        arg(8, A, C),
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', D),
        delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_depends_on_as/3'(A) :-
        arg(9, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', E),
        insert_ht(E, D, A),
        true,
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_depends_on_as/3'(A) :-
        arg(9, A, D),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', E),
        delete_ht(E, D, A),
        true,
        arg(8, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_ai_observation_gather_results/0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', B),
        b_setval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', [A|B]).
'$delete_from_store_ai_observation_gather_results/0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', B),
        'chr sbag_del_element'(B, A, C),
        b_setval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', C).
'$insert_in_store_phase_end/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_phase_end/1'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_delay_phase_end/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        insert_ht(C, B, A),
        true.
'$delete_from_store_delay_phase_end/2'(A) :-
        arg(7, A, B),
        nb_getval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        delete_ht(C, B, A),
        true.
'$insert_in_store_does_use_history/1'(A) :-
        'chr default_store'(I),
        (   get_attr(I, chr_translate, J) ->
            J=v(G,B,C,D,E,F),
            (   G/\16=:=16 ->
                put_attr(I, chr_translate, v(G,B,C,D,E,[A|F]))
            ;   H is G\/16,
                put_attr(I, chr_translate, v(H,B,C,D,E,[A]))
            )
        ;   put_attr(I, chr_translate, v(16,[A],[A],[A],[A],[A]))
        ).
'$delete_from_store_does_use_history/1'(A) :-
        'chr default_store'(J),
        (   get_attr(J, chr_translate, K) ->
            K=v(G,B,C,D,E,F),
            (   G/\16=:=16 ->
                'chr sbag_del_element'(F, A, I),
                (   I== [] ->
                    H is G/\ -17,
                    (   H==0 ->
                        del_attr(J, chr_translate)
                    ;   put_attr(J, chr_translate, v(H,B,C,D,E,[]))
                    )
                ;   put_attr(J, chr_translate, v(G,B,C,D,E,I))
                )
            ;   true
            )
        ;   true
        ).
'$enumerate_suspensions'(A) :-
        (   nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
            'chr sbag_member'(A, B)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
            value_ht(C, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', D),
            'chr sbag_member'(A, D)
        ;   nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', E),
            'chr sbag_member'(A, E)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', F),
            value_ht(F, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', G),
            value_ht(G, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', H),
            value_ht(H, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', I),
            'chr sbag_member'(A, I)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', J),
            value_ht(J, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', K),
            value_ht(K, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', L),
            value_ht(L, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', M),
            value_ht(M, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:rule/2', N),
            'chr sbag_member'(A, N)
        ;   nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', O),
            'chr sbag_member'(A, O)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-2', P),
            value_ht(P, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', Q),
            'chr sbag_member'(A, Q)
        ;   'chr default_store'(R),
            get_attr(R, chr_translate, S),
            arg(2, S, T),
            'chr sbag_member'(A, T)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:no_history/1-1', U),
            value_ht(U, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', V),
            value_ht(V, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', W),
            value_ht(W, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', X),
            value_ht(X, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', Y),
            value_ht(Y, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:module_initializer/1', Z),
            'chr sbag_member'(A, Z)
        ;   'chr default_store'(A1),
            get_attr(A1, chr_translate, B1),
            arg(3, B1, C1),
            'chr sbag_member'(A, C1)
        ;   nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', D1),
            'chr sbag_member'(A, D1)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', E1),
            value_ht(E1, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F1),
            'chr sbag_member'(A, F1)
        ;   'chr default_store'(G1),
            get_attr(G1, chr_translate, H1),
            arg(4, H1, I1),
            'chr sbag_member'(A, I1)
        ;   'chr default_store'(J1),
            get_attr(J1, chr_translate, K1),
            arg(5, K1, L1),
            'chr sbag_member'(A, L1)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', M1),
            value_ht(M1, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', N1),
            'chr sbag_member'(A, N1)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', O1),
            value_ht(O1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', P1),
            value_ht(P1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', Q1),
            value_ht(Q1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', R1),
            value_ht(R1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', S1),
            value_ht(S1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', T1),
            value_ht(T1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', U1),
            value_ht(U1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', V1),
            value_ht(V1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', W1),
            value_ht(W1, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', X1),
            'chr sbag_member'(A, X1)
        ;   nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', Y1),
            'chr sbag_member'(A, Y1)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', Z1),
            value_ht(Z1, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', A2),
            value_ht(A2, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', B2),
            value_ht(B2, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', C2),
            'chr sbag_member'(A, C2)
        ;   nb_getval('$chr_store_global_ground_chr_translate:ai_observed/2', D2),
            'chr sbag_member'(A, D2)
        ;   nb_getval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', E2),
            'chr sbag_member'(A, E2)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', F2),
            value_ht(F2, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', G2),
            value_ht(G2, A)
        ;   nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', H2),
            'chr sbag_member'(A, H2)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:phase_end/1-1', I2),
            value_ht(I2, A)
        ;   nb_getval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', J2),
            value_ht(J2, A)
        ;   'chr default_store'(K2),
            get_attr(K2, chr_translate, L2),
            arg(6, L2, M2),
            'chr sbag_member'(A, M2)
        ).
(:-nb_setval('$chr_store_global_ground_chr_translate:target_module/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1',A)).
'$via1_multi_hash_indexed_argument/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12',A)).
'$via1_multi_hash_indexed_argument/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:constraint_mode/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1',A)).
'$via1_multi_hash_constraint_mode/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:store_type/2-1',A)).
'$via1_multi_hash_store_type/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1',A)).
'$via1_multi_hash_actual_store_types/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1',A)).
'$via1_multi_hash_assumed_store_type/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:rule_count/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:passive/2-1',A)).
'$via1_multi_hash_passive/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:passive/2-12',A)).
'$via1_multi_hash_passive/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-34',A)).
'$via1_multi_hash_occurrence/4-34'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-1',A)).
'$via1_multi_hash_occurrence/4-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-2',A)).
'$via1_multi_hash_occurrence/4-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-3',A)).
'$via1_multi_hash_occurrence/4-3'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-1234',A)).
'$via1_multi_hash_occurrence/4-1234'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1',A)).
'$via1_multi_hash_max_occurrence/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1',A)).
'$via1_multi_hash_allocation_occurrence/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12',A)).
'$via1_multi_hash_allocation_occurrence/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2',[])).
(:-nb_setval('$chr_store_global_ground_chr_translate:rule/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:rule/2-1',A)).
'$via1_multi_hash_rule/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:least_occurrence/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1',A)).
'$via1_multi_hash_least_occurrence/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraint_index/2-2',A)).
'$via1_multi_hash_constraint_index/2-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraint_index/2-1',A)).
'$via1_multi_hash_constraint_index/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:no_history/1-1',A)).
'$via1_multi_hash_no_history/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1',A)).
'$via1_multi_hash_indexing_spec/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:observes/2-1',A)).
'$via1_multi_hash_observes/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:observes/2-12',A)).
'$via1_multi_hash_observes/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12',A)).
'$via1_multi_hash_spawns_observer/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2',A)).
'$via1_multi_hash_spawns_observer/2-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12',A)).
'$via1_multi_hash_observes_indirectly/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1',A)).
'$via1_multi_hash_observes_indirectly/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:module_initializer/1',[])).
(:-nb_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2',A)).
'$via1_multi_hash_prev_guard_list/7-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1',A)).
'$via1_multi_hash_prev_guard_list/7-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1',A)).
'$via1_multi_hash_set_all_passive/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraint_type/2-1',A)).
'$via1_multi_hash_constraint_type/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:add_type_information/3',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:stored/3-1',A)).
'$via1_multi_hash_stored/3-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:stored/3-2',A)).
'$via1_multi_hash_stored/3-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:stored/3',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:stored_complete/3-1',A)).
'$via1_multi_hash_stored_complete/3-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1',A)).
'$via1_multi_hash_check_all_passive/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1',A)).
'$via1_multi_hash_constraints_code1/3-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:constraints_code1/3',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1',A)).
'$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1',A)).
'$via1_multi_hash_use_auxiliary_predicate/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12',A)).
'$via1_multi_hash_use_auxiliary_predicate/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1',A)).
'$via1_multi_hash_functional_dependency/4-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12',A)).
'$via1_multi_hash_functional_dependency/4-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1',A)).
'$via1_multi_hash_initial_call_pattern/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:call_pattern/1-1',A)).
'$via1_multi_hash_call_pattern/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:call_pattern/1',[])).
(:-nb_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1',A)).
'$via1_multi_hash_final_answer_pattern/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on/2-1',A)).
'$via1_multi_hash_depends_on/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:depends_on/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on/2-2',A)).
'$via1_multi_hash_depends_on/2-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2',A)).
'$via1_multi_hash_depends_on_ap/4-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3',A)).
'$via1_multi_hash_depends_on_ap/4-3'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2',A)).
'$via1_multi_hash_depends_on_goal/2-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12',A)).
'$via1_multi_hash_depends_on_goal/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:ai_observed_internal/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12',A)).
'$via1_multi_hash_ai_observed_internal/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:ai_observed/2',[])).
(:-nb_setval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12',A)).
'$via1_multi_hash_ai_not_observed_internal/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12',A)).
'$via1_multi_hash_ai_not_observed/2-12'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3',A)).
'$via1_multi_hash_depends_on_as/3-3'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2',A)).
'$via1_multi_hash_depends_on_as/3-2'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
        lookup_ht(C, A, B).
(:-nb_setval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0',[])).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:phase_end/1-1',A)).
'$via1_multi_hash_phase_end/1-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        lookup_ht(C, A, B).
(:-new_ht(A),nb_setval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1',A)).
'$via1_multi_hash_delay_phase_end/2-1'(A, B) :-
        nb_getval('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        lookup_ht(C, A, B).
target_module(A) :-
        'target_module/1__0'(A, _).
'target_module/1__0'(_, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
        (   'chr sbag_member'(A, B),
            A=suspension(_,C,_,_,_,_,_),
            C=mutable(active) ->
            true
        ), !.
'target_module/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'target_module/1__0'(A,B), target_module(A), [A]),
        '$insert_in_store_target_module/1'(B).
get_target_module(A) :-
        'get_target_module/1__0'(A, _).
'get_target_module/1__0'(A, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:target_module/1', C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,E,_,_,_,_,D),
            E=mutable(active) ->
            true
        ), !,
        A=D.
'get_target_module/1__0'(A, _) :- !,
        A=user.
indexed_argument(A, B) :-
        'indexed_argument/2__0'(A, B, _).
'indexed_argument/2__0'(A, B, _) :-
        '$via1_multi_hash_indexed_argument/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'indexed_argument/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'indexed_argument/2__0'(A,B,C), indexed_argument(A,B), [A,B]),
        '$insert_in_store_indexed_argument/2'(C).
is_indexed_argument(A, B) :-
        'is_indexed_argument/2__0'(A, B, _).
'is_indexed_argument/2__0'(A, B, _) :-
        '$via1_multi_hash_indexed_argument/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'is_indexed_argument/2__0'(_, _, _) :- !,
        fail.
constraint_mode(A, B) :-
        'constraint_mode/2__0'(A, B, _).
'constraint_mode/2__0'(A, _, _) :-
        '$via1_multi_hash_constraint_mode/2-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,E,_,_,_,_,D,_),
            E=mutable(active),
            D==A ->
            true
        ), !.
'constraint_mode/2__0'(A, B, C) :-
        nonvar(A),
        A=D/E,
        nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', F), !,
        '$chr_translate__allocate_constraint'(chr_translate:'constraint_mode/2__0'(A,B,C), C, constraint_mode(A,B), [A,B]),
        'constraint_mode/2__0__0'(F, A, B, C, D, E).
'constraint_mode/2__0__0'([], A, B, C, _, _) :-
        'constraint_mode/2__1'(A, B, C).
'constraint_mode/2__0__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,O,_,_,_,_,H,I,J),
            O=mutable(active),
            nonvar(H),
            H=[K|L],
            nonvar(I),
            I=[M|N],
            functor(K, D, E) ->
            '$chr_translate__remove_constraint_internal'(F, _, P),
            (   P==yes ->
                '$delete_from_store_add_type_information/3'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(Y, _, C, Z),
            (   Y==yes ->
                '$insert_in_store_constraint_mode/2'(C)
            ;   true
            ),
            K=..[_|Q],
            M=..[_|R],
            add_mode_info(B, Q, S),
            J=(S,T),
            (   get_constraint_type(D/E, U) ->
                types2condition(U, Q, R, B, V),
                list2conj(V, W),
                T=(W,X),
                add_type_information(L, N, X)
            ;   add_type_information(L, N, T)
            ),
            (   C=suspension(_,A1,_,B1,_,_,_,_),
                A1=mutable(active),
                B1=mutable(Z) ->
                'chr update_mutable'(inactive, A1),
                'constraint_mode/2__0__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'constraint_mode/2__0__0'(G, A, B, C, D, E)
        ).
'constraint_mode/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'constraint_mode/2__0'(A,B,C), C, constraint_mode(A,B), [A,B]),
        'constraint_mode/2__1'(A, B, C).
'constraint_mode/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_constraint_mode/2'(A)
        ;   true
        ).
get_constraint_mode(A, B) :-
        'get_constraint_mode/2__0'(A, B, _).
'get_constraint_mode/2__0'(A, _, _) :-
        chr_pp_flag(all_ground, on),
        '$via1_multi_hash_constraint_mode/2-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A ->
            true
        ),
        not_all_ground(E), !,
        chr_error(invalid_mode, 'only ground constraints allowed - illegal mode specified for ~w.\n', [A]).
'get_constraint_mode/2__0'(A, B, _) :-
        '$via1_multi_hash_constraint_mode/2-1'(A, D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A ->
            true
        ), !,
        B=F.
'get_constraint_mode/2__0'(A, B, _) :-
        chr_pp_flag(all_ground, on), !,
        A=_/C,
        replicate(C, +, B).
'get_constraint_mode/2__0'(A, B, _) :- !,
        A=_/C,
        replicate(C, ?, B).
may_trigger(A) :-
        'may_trigger/1__0'(A, _).
'may_trigger/1__0'(A, _) :-
        \+has_active_occurrence(A), !,
        fail.
'may_trigger/1__0'(A, _) :-
        '$via1_multi_hash_indexed_argument/2-1'(A, H),
        '$via1_multi_hash_constraint_mode/2-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A ->
            true
        ),
        'chr sbag_member'(G, H),
        G=suspension(_,K,_,_,_,_,I,J),
        K=mutable(active),
        I==A,
        nth1(J, E, L),
        L\==(+), !,
        is_stored(A).
'may_trigger/1__0'(_, _) :- !,
        chr_pp_flag(debugable, on).
only_ground_indexed_arguments(A) :-
        'only_ground_indexed_arguments/1__0'(A, _).
'only_ground_indexed_arguments/1__0'(A, _) :-
        '$via1_multi_hash_indexed_argument/2-1'(A, H),
        '$via1_multi_hash_constraint_mode/2-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A ->
            true
        ),
        'chr sbag_member'(G, H),
        G=suspension(_,K,_,_,_,_,I,J),
        K=mutable(active),
        I==A,
        nth1(J, E, L),
        L\==(+), !,
        fail.
'only_ground_indexed_arguments/1__0'(_, _) :- !.
none_suspended_on_variables :-
        'none_suspended_on_variables/0__0'(_).
'none_suspended_on_variables/0__0'(_) :-
        nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', B),
        (   'chr sbag_member'(A, B),
            A=suspension(_,C,_,_,_,_),
            C=mutable(active) ->
            true
        ), !.
'none_suspended_on_variables/0__0'(A) :-
        '$chr_translate__insert_constraint_internal'(_, _, A, chr_translate:'none_suspended_on_variables/0__0'(A), none_suspended_on_variables, []),
        '$insert_in_store_none_suspended_on_variables/0'(A).
are_none_suspended_on_variables :-
        'are_none_suspended_on_variables/0__0'(_).
'are_none_suspended_on_variables/0__0'(_) :-
        nb_getval('$chr_store_global_ground_chr_translate:none_suspended_on_variables/0', B),
        (   'chr sbag_member'(A, B),
            A=suspension(_,C,_,_,_,_),
            C=mutable(active) ->
            true
        ), !.
'are_none_suspended_on_variables/0__0'(_) :- !,
        fail.
store_type(A, B) :-
        'store_type/2__0'(A, B, _).
'store_type/2__0'(A, B, _) :-
        nonvar(B),
        B=atom_hash(C), !,
        store_type(A, multi_hash([C])).
'store_type/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'store_type/2__0'(A,B,C), store_type(A,B), [A,B]),
        '$insert_in_store_store_type/2'(C).
get_store_type(A, B) :-
        'get_store_type/2__0'(A, B, _).
'get_store_type/2__0'(A, B, _) :-
        '$via1_multi_hash_store_type/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        B=F.
'get_store_type/2__0'(A, B, _) :-
        '$via1_multi_hash_assumed_store_type/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        B=F.
'get_store_type/2__0'(_, A, _) :- !,
        A=default.
update_store_type(A, B) :-
        'update_store_type/2__0'(A, B, _).
'update_store_type/2__0'(A, B, _) :-
        '$via1_multi_hash_actual_store_types/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A,
        member(B, F), !.
'update_store_type/2__0'(A, B, _) :-
        '$via1_multi_hash_actual_store_types/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        '$chr_translate__remove_constraint_internal'(C, _, H),
        (   H==yes ->
            '$delete_from_store_actual_store_types/2'(C)
        ;   true
        ),
        actual_store_types(A, [B|F]).
'update_store_type/2__0'(A, B, _) :- !,
        actual_store_types(A, [B]).
actual_store_types(A, B) :-
        'actual_store_types/2__0'(A, B, _).
'actual_store_types/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'actual_store_types/2__0'(A,B,C), actual_store_types(A,B), [A,B]),
        '$insert_in_store_actual_store_types/2'(C).
assumed_store_type(A, B) :-
        'assumed_store_type/2__0'(A, B, _).
'assumed_store_type/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'assumed_store_type/2__0'(A,B,C), assumed_store_type(A,B), [A,B]),
        '$insert_in_store_assumed_store_type/2'(C).
validate_store_type_assumption(A) :-
        'validate_store_type_assumption/1__0'(A, _).
'validate_store_type_assumption/1__0'(A, _) :-
        '$via1_multi_hash_assumed_store_type/2-1'(A, H),
        '$via1_multi_hash_actual_store_types/2-1'(A, C),
        'chr sbag_member'(B, C),
        B=suspension(_,F,_,_,_,_,D,E),
        F=mutable(active),
        D==A,
        'chr sbag_member'(G, H),
        G=suspension(_,J,_,_,_,_,I,_),
        J=mutable(active),
        I==A, !,
        '$chr_translate__remove_constraint_internal'(B, _, K),
        (   K==yes ->
            '$delete_from_store_actual_store_types/2'(B)
        ;   true
        ),
        '$chr_translate__remove_constraint_internal'(G, _, L),
        (   L==yes ->
            '$delete_from_store_assumed_store_type/2'(G)
        ;   true
        ),
        store_type(A, multi_store(E)).
'validate_store_type_assumption/1__0'(A, _) :-
        '$via1_multi_hash_store_type/2-1'(A, H),
        '$via1_multi_hash_actual_store_types/2-1'(A, C),
        'chr sbag_member'(B, C),
        B=suspension(_,F,_,_,_,_,D,E),
        F=mutable(active),
        D==A,
        'chr sbag_member'(G, H),
        G=suspension(_,J,_,_,_,_,I,_),
        J=mutable(active),
        I==A, !,
        '$chr_translate__remove_constraint_internal'(B, _, K),
        (   K==yes ->
            '$delete_from_store_actual_store_types/2'(B)
        ;   true
        ),
        '$chr_translate__remove_constraint_internal'(G, _, L),
        (   L==yes ->
            '$delete_from_store_store_type/2'(G)
        ;   true
        ),
        store_type(A, multi_store(E)).
'validate_store_type_assumption/1__0'(A, _) :-
        '$via1_multi_hash_assumed_store_type/2-1'(A, C),
        'chr sbag_member'(B, C),
        B=suspension(_,E,_,_,_,_,D,_),
        E=mutable(active),
        D==A, !,
        '$chr_translate__remove_constraint_internal'(B, _, F),
        (   F==yes ->
            '$delete_from_store_assumed_store_type/2'(B)
        ;   true
        ),
        store_type(A, global_ground).
'validate_store_type_assumption/1__0'(_, _) :- !.
rule_count(A) :-
        'rule_count/1__0'(A, _).
'rule_count/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'rule_count/1__0'(A,B), rule_count(A), [A]),
        '$insert_in_store_rule_count/1'(B).
inc_rule_count(A) :-
        'inc_rule_count/1__0'(A, _).
'inc_rule_count/1__0'(A, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', C),
        'chr sbag_member'(B, C),
        B=suspension(_,E,_,_,_,_,D),
        E=mutable(active), !,
        '$chr_translate__remove_constraint_internal'(B, _, F),
        (   F==yes ->
            '$delete_from_store_rule_count/1'(B)
        ;   true
        ),
        A is D+1,
        rule_count(A).
'inc_rule_count/1__0'(A, _) :- !,
        A=1,
        rule_count(A).
passive(A, B) :-
        'passive/2__0'(A, B, _).
'passive/2__0'(A, B, _) :-
        '$via1_multi_hash_passive/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'passive/2__0'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'passive/2__0'(A,B,C), C, passive(A,B), [A,B]),
        'passive/2__0__0'(D, A, B, C).
'passive/2__0__0'([], A, B, C) :-
        'passive/2__1'(A, B, C).
'passive/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-1234'(k(F,G,A,B), J),
            'chr sbag_member'(I, J),
            I=suspension(_,O,_,_,_,_,K,L,M,N),
            O=mutable(active),
            K==F,
            L==G,
            M==A,
            N==B ->
            '$chr_translate__remove_constraint_internal'(D, _, P),
            (   P==yes ->
                '$delete_from_store_allocation_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(R, _, C, S),
            (   R==yes ->
                '$insert_in_store_passive/2'(C)
            ;   true
            ),
            Q is G+1,
            allocation_occurrence(F, Q),
            (   C=suspension(_,T,_,U,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'passive/2__0__0'(E, A, B, C)
            ;   true
            )
        ;   'passive/2__0__0'(E, A, B, C)
        ).
'passive/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'passive/2__0'(A,B,C), C, passive(A,B), [A,B]),
        'passive/2__1'(A, B, C).
'passive/2__1'(A, B, C) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, D), !,
        'passive/2__1__0'(D, A, B, C).
'passive/2__1__0'([], A, B, C) :-
        'passive/2__2'(A, B, C).
'passive/2__1__0'([D|E], A, B, C) :-
        (   D=suspension(_,J,_,_,_,_,F,G),
            J=mutable(active),
            F==A,
            nonvar(G),
            G=[H|I],
            H==B,
            '$via1_multi_hash_rule/2-1'(A, L),
            'chr sbag_member'(K, L),
            K=suspension(_,N,_,_,_,_,M,_),
            N=mutable(active),
            M==A ->
            '$chr_translate__remove_constraint_internal'(D, _, O),
            (   O==yes ->
                '$delete_from_store_least_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(P, _, C, Q),
            (   P==yes ->
                '$insert_in_store_passive/2'(C)
            ;   true
            ),
            least_occurrence(A, I),
            (   C=suspension(_,R,_,S,_,_,_,_),
                R=mutable(active),
                S=mutable(Q) ->
                'chr update_mutable'(inactive, R),
                'passive/2__1__0'(E, A, B, C)
            ;   true
            )
        ;   'passive/2__1__0'(E, A, B, C)
        ).
'passive/2__1'(A, B, C) :-
        'passive/2__2'(A, B, C).
'passive/2__2'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:stored/3', D), !,
        'passive/2__2__0'(D, A, B, C).
'passive/2__2__0'([], A, B, C) :-
        'passive/2__3'(A, B, C).
'passive/2__2__0'([D|E], A, B, C) :-
        (   D=suspension(_,I,_,_,_,_,F,G,H),
            I=mutable(active),
            H==yes,
            '$via1_multi_hash_occurrence/4-1234'(k(F,G,A,B), Q),
            '$via1_multi_hash_stored_complete/3-1'(F, K),
            'chr sbag_member'(J, K),
            J=suspension(_,O,_,_,_,_,L,M,N),
            O=mutable(active),
            L==F,
            G<M,
            'chr sbag_member'(P, Q),
            P=suspension(_,V,_,_,_,_,R,S,T,U),
            V=mutable(active),
            R==F,
            S==G,
            T==A,
            U==B ->
            '$chr_translate__remove_constraint_internal'(D, _, W),
            (   W==yes ->
                '$delete_from_store_stored/3'(D)
            ;   true
            ),
            '$chr_translate__remove_constraint_internal'(J, _, X),
            (   X==yes ->
                '$delete_from_store_stored_complete/3'(J)
            ;   true
            ),
            '$chr_translate__activate_constraint'(Z, _, C, A1),
            (   Z==yes ->
                '$insert_in_store_passive/2'(C)
            ;   true
            ),
            Y is N-1,
            stored(F, G, maybe),
            stored_complete(F, M, Y),
            (   C=suspension(_,B1,_,C1,_,_,_,_),
                B1=mutable(active),
                C1=mutable(A1) ->
                'chr update_mutable'(inactive, B1),
                'passive/2__2__0'(E, A, B, C)
            ;   true
            )
        ;   'passive/2__2__0'(E, A, B, C)
        ).
'passive/2__2'(A, B, C) :-
        'passive/2__3'(A, B, C).
'passive/2__3'(A, B, C) :-
        '$via1_multi_hash_rule/2-1'(A, D), !,
        'passive/2__3__0'(D, A, B, C).
'passive/2__3__0'([], A, B, C) :-
        'passive/2__4'(A, B, C).
'passive/2__3__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A,
            P=t(120,G,C),
            'chr novel_production'(G, P),
            'chr novel_production'(C, P),
            E=pragma(rule(_,_,_,_),ids([B|J],I),_,_,A) ->
            'chr extend_history'(C, P),
            '$chr_translate__activate_constraint'(L, _, C, M),
            (   L==yes ->
                '$insert_in_store_passive/2'(C)
            ;   true
            ),
            append(J, I, K),
            check_all_passive(A, K),
            (   C=suspension(_,N,_,O,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'passive/2__3__0'(H, A, B, C)
            ;   true
            )
        ;   'passive/2__3__0'(H, A, B, C)
        ).
'passive/2__3'(A, B, C) :-
        'passive/2__4'(A, B, C).
'passive/2__4'(A, B, C) :-
        '$via1_multi_hash_rule/2-1'(A, D), !,
        'passive/2__4__0'(D, A, B, C).
'passive/2__4__0'([], A, B, C) :-
        'passive/2__5'(A, B, C).
'passive/2__4__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A,
            N=t(121,G,C),
            'chr novel_production'(G, N),
            'chr novel_production'(C, N),
            E=pragma(rule(_,_,_,_),ids([],[B|I]),_,_,A) ->
            'chr extend_history'(C, N),
            '$chr_translate__activate_constraint'(J, _, C, K),
            (   J==yes ->
                '$insert_in_store_passive/2'(C)
            ;   true
            ),
            check_all_passive(A, I),
            (   C=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'passive/2__4__0'(H, A, B, C)
            ;   true
            )
        ;   'passive/2__4__0'(H, A, B, C)
        ).
'passive/2__4'(A, B, C) :-
        'passive/2__5'(A, B, C).
'passive/2__5'(A, B, C) :-
        '$via1_multi_hash_check_all_passive/2-1'(A, D), !,
        'passive/2__5__0'(D, A, B, C).
'passive/2__5__0'([], A, B, C) :-
        'passive/2__6'(A, B, C).
'passive/2__5__0'([D|E], A, B, C) :-
        (   D=suspension(_,J,_,_,_,_,F,G),
            J=mutable(active),
            F==A,
            nonvar(G),
            G=[H|I],
            H==B ->
            '$chr_translate__remove_constraint_internal'(D, _, K),
            (   K==yes ->
                '$delete_from_store_check_all_passive/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(L, _, C, M),
            (   L==yes ->
                '$insert_in_store_passive/2'(C)
            ;   true
            ),
            check_all_passive(A, I),
            (   C=suspension(_,N,_,O,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'passive/2__5__0'(E, A, B, C)
            ;   true
            )
        ;   'passive/2__5__0'(E, A, B, C)
        ).
'passive/2__5'(A, B, C) :-
        'passive/2__6'(A, B, C).
'passive/2__6'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_passive/2'(A)
        ;   true
        ).
is_passive(A, B) :-
        'is_passive/2__0'(A, B, _).
'is_passive/2__0'(A, B, _) :-
        '$via1_multi_hash_passive/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'is_passive/2__0'(_, _, _) :- !,
        fail.
any_passive_head(A) :-
        'any_passive_head/1__0'(A, _).
'any_passive_head/1__0'(A, _) :-
        '$via1_multi_hash_passive/2-1'(A, C),
        'chr sbag_member'(B, C),
        B=suspension(_,E,_,_,_,_,D,_),
        E=mutable(active),
        D==A, !.
'any_passive_head/1__0'(_, _) :- !,
        fail.
new_occurrence(A, B, C) :-
        'new_occurrence/3__0'(A, B, C, _).
'new_occurrence/3__0'(A, B, C, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, E),
        (   'chr sbag_member'(D, E),
            D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            F==A ->
            true
        ), !,
        '$chr_translate__remove_constraint_internal'(D, _, J),
        (   J==yes ->
            '$delete_from_store_max_occurrence/2'(D)
        ;   true
        ),
        I is G+1,
        occurrence(A, I, B, C),
        max_occurrence(A, I).
'new_occurrence/3__0'(A, B, _, _) :- !,
        chr_error(internal, 'new_occurrence: missing max_occurrence for ~w in rule ~w\n', [A,B]).
occurrence(A, B, C, D) :-
        'occurrence/4__0'(A, B, C, D, _).
'occurrence/4__0'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        '$chr_translate__allocate_constraint'(chr_translate:'occurrence/4__0'(A,B,C,D,E), E, occurrence(A,B,C,D), [A,B,C,D]),
        'occurrence/4__0__0'(F, A, B, C, D, E).
'occurrence/4__0__0'([], A, B, C, D, E) :-
        'occurrence/4__1'(A, B, C, D, E).
'occurrence/4__0__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,J,_,_,_,_,H,I),
            J=mutable(active),
            H==A,
            I==B,
            '$via1_multi_hash_passive/2-12'(k(C,D), L),
            (   'chr sbag_member'(K, L),
                K=suspension(_,O,_,_,_,_,M,N),
                O=mutable(active),
                M==C,
                N==D ->
                true
            ) ->
            '$chr_translate__remove_constraint_internal'(F, _, P),
            (   P==yes ->
                '$delete_from_store_allocation_occurrence/2'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(R, _, E, S),
            (   R==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            Q is B+1,
            allocation_occurrence(A, Q),
            (   E=suspension(_,T,_,U,_,_,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'occurrence/4__0__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__0__0'(G, A, B, C, D, E)
        ).
'occurrence/4__0'(A, B, C, D, E) :-
        '$chr_translate__allocate_constraint'(chr_translate:'occurrence/4__0'(A,B,C,D,E), E, occurrence(A,B,C,D), [A,B,C,D]),
        'occurrence/4__1'(A, B, C, D, E).
'occurrence/4__1'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__1__0'(F, A, B, C, D, E).
'occurrence/4__1__0'([], A, B, C, D, E) :-
        'occurrence/4__2'(A, B, C, D, E).
'occurrence/4__1__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,J,_,_,_,_,H,I),
            J=mutable(active),
            H==A,
            I==B,
            '$via1_multi_hash_rule/2-1'(C, L),
            'chr sbag_member'(K, L),
            K=suspension(_,O,_,_,_,_,M,N),
            O=mutable(active),
            M==C,
            N=pragma(_,ids(Q,_),_,_,_),
            member(D, Q) ->
            '$chr_translate__remove_constraint_internal'(F, _, P),
            (   P==yes ->
                '$delete_from_store_allocation_occurrence/2'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(S, _, E, T),
            (   S==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            R is B+1,
            allocation_occurrence(A, R),
            (   E=suspension(_,U,_,V,_,_,_,_,_,_),
                U=mutable(active),
                V=mutable(T) ->
                'chr update_mutable'(inactive, U),
                'occurrence/4__1__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__1__0'(G, A, B, C, D, E)
        ).
'occurrence/4__1'(A, B, C, D, E) :-
        'occurrence/4__2'(A, B, C, D, E).
'occurrence/4__2'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__2__0'(F, A, B, C, D, E).
'occurrence/4__2__0'([], A, B, C, D, E) :-
        'occurrence/4__3'(A, B, C, D, E).
'occurrence/4__2__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,J,_,_,_,_,H,I),
            J=mutable(active),
            H==A,
            I==B,
            '$via1_multi_hash_rule/2-1'(C, L),
            'chr sbag_member'(K, L),
            K=suspension(_,O,_,_,_,_,M,N),
            O=mutable(active),
            M==C,
            N=pragma(rule(_,_,_,true),_,_,_,_) ->
            '$chr_translate__remove_constraint_internal'(F, _, P),
            (   P==yes ->
                '$delete_from_store_allocation_occurrence/2'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(R, _, E, S),
            (   R==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            Q is B+1,
            allocation_occurrence(A, Q),
            (   E=suspension(_,T,_,U,_,_,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'occurrence/4__2__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__2__0'(G, A, B, C, D, E)
        ).
'occurrence/4__2'(A, B, C, D, E) :-
        'occurrence/4__3'(A, B, C, D, E).
'occurrence/4__3'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__3__0'(F, A, B, C, D, E).
'occurrence/4__3__0'([], A, B, C, D, E) :-
        'occurrence/4__4'(A, B, C, D, E).
'occurrence/4__3__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,J,_,_,_,_,H,I),
            J=mutable(active),
            H==A,
            I==B,
            '$via1_multi_hash_rule/2-1'(C, L),
            'chr sbag_member'(K, L),
            K=suspension(_,O,_,_,_,_,M,N),
            O=mutable(active),
            M==C,
            N=pragma(rule([_|_],_,_,_),_,_,_,_),
            \+is_observed(A,B) ->
            '$chr_translate__remove_constraint_internal'(F, _, P),
            (   P==yes ->
                '$delete_from_store_allocation_occurrence/2'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(R, _, E, S),
            (   R==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            Q is B+1,
            allocation_occurrence(A, Q),
            (   E=suspension(_,T,_,U,_,_,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'occurrence/4__3__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__3__0'(G, A, B, C, D, E)
        ).
'occurrence/4__3'(A, B, C, D, E) :-
        'occurrence/4__4'(A, B, C, D, E).
'occurrence/4__4'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__4__0'(F, A, B, C, D, E).
'occurrence/4__4__0'([], A, B, C, D, E) :-
        'occurrence/4__5'(A, B, C, D, E).
'occurrence/4__4__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,J,_,_,_,_,H,I),
            J=mutable(active),
            H==A,
            I==B,
            '$via1_multi_hash_rule/2-1'(C, Q),
            '$via1_multi_hash_least_occurrence/2-1'(C, L),
            'chr sbag_member'(K, L),
            K=suspension(_,O,_,_,_,_,M,N),
            O=mutable(active),
            M==C,
            N== [],
            'chr sbag_member'(P, Q),
            P=suspension(_,T,_,_,_,_,R,S),
            T=mutable(active),
            R==C,
            S=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(A,B) ->
            '$chr_translate__remove_constraint_internal'(F, _, U),
            (   U==yes ->
                '$delete_from_store_allocation_occurrence/2'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(W, _, E, X),
            (   W==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            V is B+1,
            allocation_occurrence(A, V),
            (   E=suspension(_,Y,_,Z,_,_,_,_,_,_),
                Y=mutable(active),
                Z=mutable(X) ->
                'chr update_mutable'(inactive, Y),
                'occurrence/4__4__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__4__0'(G, A, B, C, D, E)
        ).
'occurrence/4__4'(A, B, C, D, E) :-
        'occurrence/4__5'(A, B, C, D, E).
'occurrence/4__5'(A, B, C, D, E) :-
        '$via1_multi_hash_least_occurrence/2-1'(C, F), !,
        'occurrence/4__5__0'(F, A, B, C, D, E).
'occurrence/4__5__0'([], A, B, C, D, E) :-
        'occurrence/4__6'(A, B, C, D, E).
'occurrence/4__5__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,L,_,_,_,_,H,I),
            L=mutable(active),
            H==C,
            nonvar(I),
            I=[J|K],
            J==D,
            '$via1_multi_hash_rule/2-1'(C, S),
            '$via1_multi_hash_allocation_occurrence/2-1'(A, N),
            'chr sbag_member'(M, N),
            M=suspension(_,Q,_,_,_,_,O,P),
            Q=mutable(active),
            O==A,
            P>=B,
            'chr sbag_member'(R, S),
            R=suspension(_,U,_,_,_,_,T,_),
            U=mutable(active),
            T==C,
            \+may_trigger(A) ->
            '$chr_translate__remove_constraint_internal'(F, _, V),
            (   V==yes ->
                '$delete_from_store_least_occurrence/2'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(W, _, E, X),
            (   W==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            least_occurrence(C, K),
            (   E=suspension(_,Y,_,Z,_,_,_,_,_,_),
                Y=mutable(active),
                Z=mutable(X) ->
                'chr update_mutable'(inactive, Y),
                'occurrence/4__5__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__5__0'(G, A, B, C, D, E)
        ).
'occurrence/4__5'(A, B, C, D, E) :-
        'occurrence/4__6'(A, B, C, D, E).
'occurrence/4__6'(A, B, C, D, E) :-
        '$via1_multi_hash_set_all_passive/1-1'(C, F), !,
        'occurrence/4__6__0'(F, A, B, C, D, E).
'occurrence/4__6__0'([], A, B, C, D, E) :-
        'occurrence/4__7'(A, B, C, D, E).
'occurrence/4__6__0'([H|I], A, B, C, D, E) :-
        (   H=suspension(_,G,_,_,_,_,F),
            G=mutable(active),
            F==C,
            N=t(94,H,E),
            'chr novel_production'(H, N),
            'chr novel_production'(E, N) ->
            'chr extend_history'(E, N),
            '$chr_translate__activate_constraint'(J, _, E, K),
            (   J==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            passive(C, D),
            (   E=suspension(_,L,_,M,_,_,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'occurrence/4__6__0'(I, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__6__0'(I, A, B, C, D, E)
        ).
'occurrence/4__6'(A, B, C, D, E) :-
        'occurrence/4__7'(A, B, C, D, E).
'occurrence/4__7'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F), !,
        'occurrence/4__7__0'(F, A, B, C, D, E).
'occurrence/4__7__0'([], A, B, C, D, E) :-
        'occurrence/4__8'(A, B, C, D, E).
'occurrence/4__7__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,I,_,_,_,_,H),
            I=mutable(active),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(C, V),
            '$via1_multi_hash_rule/2-1'(C, Q),
            '$via1_multi_hash_prev_guard_list/7-1'(C, K),
            'chr sbag_member'(J, K),
            J=suspension(_,O,_,_,_,_,L,M,_,_,_,_,N),
            O=mutable(active),
            L==C,
            M==0,
            N== [],
            'chr sbag_member'(P, Q),
            P=suspension(_,T,_,_,_,_,R,S),
            T=mutable(active),
            R==C,
            'chr sbag_member'(U, V),
            U=suspension(_,Z,_,_,_,_,W,X,Y,_),
            Z=mutable(active),
            W==A,
            Y==C,
            B<X,
            S=pragma(rule(B1,_,_,_),_,_,_,C),
            B1\== [],
            \+memberchk_eq(A,H) ->
            '$chr_translate__remove_constraint_internal'(F, _, A1),
            (   A1==yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(C1, _, E, D1),
            (   C1==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            first_occ_in_rule(C, A, B, D),
            multiple_occ_constraints_checked([A|H]),
            (   E=suspension(_,E1,_,F1,_,_,_,_,_,_),
                E1=mutable(active),
                F1=mutable(D1) ->
                'chr update_mutable'(inactive, E1),
                'occurrence/4__7__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__7__0'(G, A, B, C, D, E)
        ).
'occurrence/4__7'(A, B, C, D, E) :-
        'occurrence/4__8'(A, B, C, D, E).
'occurrence/4__8'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F), !,
        'occurrence/4__8__0'(F, A, B, C, D, E).
'occurrence/4__8__0'([], A, B, C, D, E) :-
        'occurrence/4__9'(A, B, C, D, E).
'occurrence/4__8__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,I,_,_,_,_,H),
            I=mutable(active),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(C, V),
            '$via1_multi_hash_rule/2-1'(C, Q),
            '$via1_multi_hash_prev_guard_list/7-1'(C, K),
            'chr sbag_member'(J, K),
            J=suspension(_,O,_,_,_,_,L,M,_,_,_,_,N),
            O=mutable(active),
            L==C,
            M==0,
            N== [],
            'chr sbag_member'(P, Q),
            P=suspension(_,T,_,_,_,_,R,S),
            T=mutable(active),
            R==C,
            'chr sbag_member'(U, V),
            U=suspension(_,A1,_,_,_,_,W,X,Y,Z),
            A1=mutable(active),
            W==A,
            Y==C,
            X<B,
            S=pragma(rule(C1,_,_,_),_,_,_,C),
            C1\== [],
            \+memberchk_eq(A,H) ->
            '$chr_translate__remove_constraint_internal'(F, _, B1),
            (   B1==yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(D1, _, E, E1),
            (   D1==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            first_occ_in_rule(C, A, X, Z),
            multiple_occ_constraints_checked([A|H]),
            (   E=suspension(_,F1,_,G1,_,_,_,_,_,_),
                F1=mutable(active),
                G1=mutable(E1) ->
                'chr update_mutable'(inactive, F1),
                'occurrence/4__8__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__8__0'(G, A, B, C, D, E)
        ).
'occurrence/4__8'(A, B, C, D, E) :-
        'occurrence/4__9'(A, B, C, D, E).
'occurrence/4__9'(A, B, C, D, E) :-
        '$via1_multi_hash_stored_complete/3-1'(A, F), !,
        'occurrence/4__9__0'(F, A, B, C, D, E).
'occurrence/4__9__0'([], A, B, C, D, E) :-
        'occurrence/4__10'(A, B, C, D, E).
'occurrence/4__9__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,K,_,_,_,_,H,I,J),
            K=mutable(active),
            H==A,
            B<I,
            '$via1_multi_hash_passive/2-12'(k(C,D), S),
            '$via1_multi_hash_stored/3-2'(B, M),
            'chr sbag_member'(L, M),
            L=suspension(_,Q,_,_,_,_,N,O,P),
            Q=mutable(active),
            N==A,
            O==B,
            P==yes,
            (   'chr sbag_member'(R, S),
                R=suspension(_,V,_,_,_,_,T,U),
                V=mutable(active),
                T==C,
                U==D ->
                true
            ) ->
            '$chr_translate__remove_constraint_internal'(F, _, W),
            (   W==yes ->
                '$delete_from_store_stored_complete/3'(F)
            ;   true
            ),
            '$chr_translate__remove_constraint_internal'(L, _, X),
            (   X==yes ->
                '$delete_from_store_stored/3'(L)
            ;   true
            ),
            '$chr_translate__activate_constraint'(Z, _, E, A1),
            (   Z==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            Y is J-1,
            stored(A, B, maybe),
            stored_complete(A, I, Y),
            (   E=suspension(_,B1,_,C1,_,_,_,_,_,_),
                B1=mutable(active),
                C1=mutable(A1) ->
                'chr update_mutable'(inactive, B1),
                'occurrence/4__9__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__9__0'(G, A, B, C, D, E)
        ).
'occurrence/4__9'(A, B, C, D, E) :-
        'occurrence/4__10'(A, B, C, D, E).
'occurrence/4__10'(A, B, C, D, E) :-
        '$via1_multi_hash_occurrence/4-3'(C, F), !,
        'occurrence/4__10__0'(F, A, B, C, D, E).
'occurrence/4__10__0'([], A, B, C, D, E) :-
        'occurrence/4__11'(A, B, C, D, E).
'occurrence/4__10__0'([H|K], A, B, C, D, E) :-
        (   H=suspension(_,I,_,_,_,_,F,_,G,_),
            I=mutable(active),
            G==C,
            '$via1_multi_hash_stored_complete/3-1'(F, J) ->
            'occurrence/4__10__1'(J, F, H, K, A, B, C, D, E)
        ;   'occurrence/4__10__0'(K, A, B, C, D, E)
        ).
'occurrence/4__10__1'([], _, _, F, A, B, C, D, E) :-
        'occurrence/4__10__0'(F, A, B, C, D, E).
'occurrence/4__10__1'([L|O], G, A, H, B, C, D, E, F) :-
        (   L=suspension(_,M,_,_,_,_,I,J,K),
            M=mutable(active),
            I==G,
            K==0,
            '$via1_multi_hash_max_occurrence/2-1'(G, N) ->
            'occurrence/4__10__2'(N, J, L, O, G, A, H, B, C, D, E, F)
        ;   'occurrence/4__10__1'(O, G, A, H, B, C, D, E, F)
        ).
'occurrence/4__10__2'([], _, _, I, F, G, H, A, B, C, D, E) :-
        'occurrence/4__10__1'(I, F, G, H, A, B, C, D, E).
'occurrence/4__10__2'([O|P], J, A, K, H, B, I, C, D, E, F, G) :-
        (   O=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==H,
            U=t(119,G,B,A,O),
            'chr novel_production'(G, U),
            'chr novel_production'(B, U),
            'chr novel_production'(A, U),
            'chr novel_production'(O, U),
            J=<M ->
            'chr extend_history'(G, U),
            '$chr_translate__activate_constraint'(Q, _, G, R),
            (   Q==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            passive(E, F),
            (   G=suspension(_,S,_,T,_,_,_,_,_,_),
                S=mutable(active),
                T=mutable(R) ->
                'chr update_mutable'(inactive, S),
                'occurrence/4__10__2'(P, J, A, K, H, B, I, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__10__2'(P, J, A, K, H, B, I, C, D, E, F, G)
        ).
'occurrence/4__10'(A, B, C, D, E) :-
        'occurrence/4__11'(A, B, C, D, E).
'occurrence/4__11'(A, B, C, D, E) :-
        '$via1_multi_hash_stored_complete/3-1'(A, F), !,
        'occurrence/4__11__0'(F, A, B, C, D, E).
'occurrence/4__11__0'([], A, B, C, D, E) :-
        'occurrence/4__12'(A, B, C, D, E).
'occurrence/4__11__0'([I|L], A, B, C, D, E) :-
        (   I=suspension(_,J,_,_,_,_,F,G,H),
            J=mutable(active),
            F==A,
            H==0,
            '$via1_multi_hash_occurrence/4-3'(C, K) ->
            'occurrence/4__11__1'(K, G, I, L, A, B, C, D, E)
        ;   'occurrence/4__11__0'(L, A, B, C, D, E)
        ).
'occurrence/4__11__1'([], _, _, F, A, B, C, D, E) :-
        'occurrence/4__11__0'(F, A, B, C, D, E).
'occurrence/4__11__1'([K|N], G, A, H, B, C, D, E, F) :-
        (   K=suspension(_,L,_,_,_,_,_,_,I,J),
            L=mutable(active),
            I==D,
            '$via1_multi_hash_max_occurrence/2-1'(B, M) ->
            'occurrence/4__11__2'(M, J, K, N, G, A, H, B, C, D, E, F)
        ;   'occurrence/4__11__1'(N, G, A, H, B, C, D, E, F)
        ).
'occurrence/4__11__2'([], _, _, I, F, G, H, A, B, C, D, E) :-
        'occurrence/4__11__1'(I, F, G, H, A, B, C, D, E).
'occurrence/4__11__2'([O|P], J, A, K, H, B, I, C, D, E, F, G) :-
        (   O=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==C,
            U=t(119,B,G,A,O),
            'chr novel_production'(B, U),
            'chr novel_production'(G, U),
            'chr novel_production'(A, U),
            'chr novel_production'(O, U),
            H=<M ->
            'chr extend_history'(G, U),
            '$chr_translate__activate_constraint'(Q, _, G, R),
            (   Q==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            passive(E, J),
            (   G=suspension(_,S,_,T,_,_,_,_,_,_),
                S=mutable(active),
                T=mutable(R) ->
                'chr update_mutable'(inactive, S),
                'occurrence/4__11__2'(P, J, A, K, H, B, I, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__11__2'(P, J, A, K, H, B, I, C, D, E, F, G)
        ).
'occurrence/4__11'(A, B, C, D, E) :-
        'occurrence/4__12'(A, B, C, D, E).
'occurrence/4__12'(A, B, C, D, E) :-
        '$via1_multi_hash_stored_complete/3-1'(A, F), !,
        'occurrence/4__12__0'(F, A, B, C, D, E).
'occurrence/4__12__0'([], A, B, C, D, E) :-
        'occurrence/4__13'(A, B, C, D, E).
'occurrence/4__12__0'([I|J], A, B, C, D, E) :-
        (   I=suspension(_,H,_,_,_,_,F,G,_),
            H=mutable(active),
            F==A,
            O=t(128,I,E),
            'chr novel_production'(I, O),
            'chr novel_production'(E, O),
            B>G ->
            'chr extend_history'(E, O),
            '$chr_translate__activate_constraint'(K, _, E, L),
            (   K==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            passive(C, D),
            (   E=suspension(_,M,_,N,_,_,_,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'occurrence/4__12__0'(J, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__12__0'(J, A, B, C, D, E)
        ).
'occurrence/4__12'(A, B, C, D, E) :-
        'occurrence/4__13'(A, B, C, D, E).
'occurrence/4__13'(A, B, C, D, E) :-
        '$via1_multi_hash_functional_dependency/4-12'(k(A,C), F), !,
        'occurrence/4__13__0'(F, A, B, C, D, E).
'occurrence/4__13__0'([], A, B, C, D, E) :-
        'occurrence/4__14'(A, B, C, D, E).
'occurrence/4__13__0'([F|G], A, B, C, D, E) :-
        (   F=suspension(_,L,_,_,_,_,H,I,J,K),
            L=mutable(active),
            H==A,
            I==C,
            C>1,
            '$via1_multi_hash_allocation_occurrence/2-1'(A, N),
            'chr sbag_member'(M, N),
            M=suspension(_,Q,_,_,_,_,O,P),
            Q=mutable(active),
            O==A,
            P>B ->
            '$chr_translate__remove_constraint_internal'(F, _, R),
            (   R==yes ->
                '$delete_from_store_functional_dependency/4'(F)
            ;   true
            ),
            '$chr_translate__activate_constraint'(S, _, E, T),
            (   S==yes ->
                '$insert_in_store_occurrence/4'(E)
            ;   true
            ),
            functional_dependency(A, 1, J, K),
            (   E=suspension(_,U,_,V,_,_,_,_,_,_),
                U=mutable(active),
                V=mutable(T) ->
                'chr update_mutable'(inactive, U),
                'occurrence/4__13__0'(G, A, B, C, D, E)
            ;   true
            )
        ;   'occurrence/4__13__0'(G, A, B, C, D, E)
        ).
'occurrence/4__13'(A, B, C, D, E) :-
        'occurrence/4__14'(A, B, C, D, E).
'occurrence/4__14'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
        'occurrence/4__14__0'(F, A, B, C, D, E).
'occurrence/4__14__0'([], A, B, C, D, E) :-
        'occurrence/4__15'(A, B, C, D, E).
'occurrence/4__14__0'([F|I], A, B, C, D, E) :-
        (   F=suspension(_,G,_,_,_,_,_),
            G=mutable(active),
            '$via1_multi_hash_rule/2-1'(C, H) ->
            'occurrence/4__14__1'(H, F, I, A, B, C, D, E)
        ;   'occurrence/4__14__0'(I, A, B, C, D, E)
        ).
'occurrence/4__14__1'([], _, F, A, B, C, D, E) :-
        'occurrence/4__14__0'(F, A, B, C, D, E).
'occurrence/4__14__1'([J|M], A, G, B, C, D, E, F) :-
        (   J=suspension(_,K,_,_,_,_,H,I),
            K=mutable(active),
            H==D,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', L) ->
            'occurrence/4__14__2'(L, I, J, M, A, G, B, C, D, E, F)
        ;   'occurrence/4__14__1'(M, A, G, B, C, D, E, F)
        ).
'occurrence/4__14__2'([], _, _, H, F, G, A, B, C, D, E) :-
        'occurrence/4__14__1'(H, F, G, A, B, C, D, E).
'occurrence/4__14__2'([M|N], I, A, J, B, H, C, D, E, F, G) :-
        (   M=suspension(_,L,_,_,_,_,K),
            L=mutable(active),
            nonvar(K),
            K=odom(O,P),
            nonvar(O),
            O=occ(Q,R),
            Q==C,
            R==D,
            Z=t(177,B,A,G,M),
            'chr novel_production'(B, Z),
            'chr novel_production'(A, Z),
            'chr novel_production'(G, Z),
            'chr novel_production'(M, Z),
            I=pragma(rule(_,_,_,_),ids(S,_),_,_,_),
            memberchk_eq(F, S),
            is_passive(E, F) ->
            'chr extend_history'(G, Z),
            '$chr_translate__activate_constraint'(V, _, G, W),
            (   V==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            T is D+1,
            U=odom(occ(C,T),P),
            call_pattern(U),
            depends_on(odom(occ(C,D),P), U),
            (   G=suspension(_,X,_,Y,_,_,_,_,_,_),
                X=mutable(active),
                Y=mutable(W) ->
                'chr update_mutable'(inactive, X),
                'occurrence/4__14__2'(N, I, A, J, B, H, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__14__2'(N, I, A, J, B, H, C, D, E, F, G)
        ).
'occurrence/4__14'(A, B, C, D, E) :-
        'occurrence/4__15'(A, B, C, D, E).
'occurrence/4__15'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
        'occurrence/4__15__0'(F, A, B, C, D, E).
'occurrence/4__15__0'([], A, B, C, D, E) :-
        'occurrence/4__16'(A, B, C, D, E).
'occurrence/4__15__0'([G|J], A, B, C, D, E) :-
        (   G=suspension(_,H,_,_,_,_,F),
            H=mutable(active),
            '$via1_multi_hash_rule/2-1'(C, I) ->
            'occurrence/4__15__1'(I, F, G, J, A, B, C, D, E)
        ;   'occurrence/4__15__0'(J, A, B, C, D, E)
        ).
'occurrence/4__15__1'([], _, _, F, A, B, C, D, E) :-
        'occurrence/4__15__0'(F, A, B, C, D, E).
'occurrence/4__15__1'([K|N], G, A, H, B, C, D, E, F) :-
        (   K=suspension(_,L,_,_,_,_,I,J),
            L=mutable(active),
            I==D,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', M) ->
            'occurrence/4__15__2'(M, J, K, N, G, A, H, B, C, D, E, F)
        ;   'occurrence/4__15__1'(N, G, A, H, B, C, D, E, F)
        ).
'occurrence/4__15__2'([], _, _, I, F, G, H, A, B, C, D, E) :-
        'occurrence/4__15__1'(I, F, G, H, A, B, C, D, E).
'occurrence/4__15__2'([N|O], J, A, K, H, B, I, C, D, E, F, G) :-
        (   N=suspension(_,M,_,_,_,_,L),
            M=mutable(active),
            nonvar(L),
            L=odom(P,Q),
            nonvar(P),
            P=occ(R,S),
            R==C,
            S==D,
            K1=t(178,B,A,G,N),
            'chr novel_production'(B, K1),
            'chr novel_production'(A, K1),
            'chr novel_production'(G, K1),
            'chr novel_production'(N, K1),
            J=pragma(rule(T,U,V,W),ids(X,_),_,_,_),
            memberchk_eq(F, X),
            \+is_passive(E,F) ->
            'chr extend_history'(G, K1),
            '$chr_translate__activate_constraint'(G1, _, G, H1),
            (   G1==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            once(select2(F,_,X,T,_,Y)),
            ai_observation_abstract_constraints(Y, H, Z),
            ai_observation_observe_list(odom([],Q), Z, odom([],A1)),
            ai_observation_abstract_constraints(U, H, B1),
            ai_observation_observe_list(odom([],A1), B1, odom([],C1)),
            ai_observation_abstract_goal_(T, U, V, W, H, D1),
            call_pattern(odom(D1,C1)),
            E1 is D+1,
            F1=odom(occ(C,E1),Q),
            call_pattern(F1),
            depends_on_as(odom(occ(C,D),Q), odom(D1,C1), F1),
            final_answer_pattern(odom(occ(C,D),Q), odom([],Q)),
            (   G=suspension(_,I1,_,J1,_,_,_,_,_,_),
                I1=mutable(active),
                J1=mutable(H1) ->
                'chr update_mutable'(inactive, I1),
                'occurrence/4__15__2'(O, J, A, K, H, B, I, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__15__2'(O, J, A, K, H, B, I, C, D, E, F, G)
        ).
'occurrence/4__15'(A, B, C, D, E) :-
        'occurrence/4__16'(A, B, C, D, E).
'occurrence/4__16'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
        'occurrence/4__16__0'(F, A, B, C, D, E).
'occurrence/4__16__0'([], A, B, C, D, E) :-
        'occurrence/4__17'(A, B, C, D, E).
'occurrence/4__16__0'([F|I], A, B, C, D, E) :-
        (   F=suspension(_,G,_,_,_,_,_),
            G=mutable(active),
            '$via1_multi_hash_rule/2-1'(C, H) ->
            'occurrence/4__16__1'(H, F, I, A, B, C, D, E)
        ;   'occurrence/4__16__0'(I, A, B, C, D, E)
        ).
'occurrence/4__16__1'([], _, F, A, B, C, D, E) :-
        'occurrence/4__16__0'(F, A, B, C, D, E).
'occurrence/4__16__1'([J|M], A, G, B, C, D, E, F) :-
        (   J=suspension(_,K,_,_,_,_,H,I),
            K=mutable(active),
            H==D,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', L) ->
            'occurrence/4__16__2'(L, I, J, M, A, G, B, C, D, E, F)
        ;   'occurrence/4__16__1'(M, A, G, B, C, D, E, F)
        ).
'occurrence/4__16__2'([], _, _, H, F, G, A, B, C, D, E) :-
        'occurrence/4__16__1'(H, F, G, A, B, C, D, E).
'occurrence/4__16__2'([M|N], I, A, J, B, H, C, D, E, F, G) :-
        (   M=suspension(_,L,_,_,_,_,K),
            L=mutable(active),
            nonvar(K),
            K=odom(O,P),
            nonvar(O),
            O=occ(Q,R),
            Q==C,
            R==D,
            Z=t(180,B,A,G,M),
            'chr novel_production'(B, Z),
            'chr novel_production'(A, Z),
            'chr novel_production'(G, Z),
            'chr novel_production'(M, Z),
            I=pragma(rule(_,_,_,_),ids(_,S),_,_,_),
            memberchk_eq(F, S),
            is_passive(E, F) ->
            'chr extend_history'(G, Z),
            '$chr_translate__activate_constraint'(V, _, G, W),
            (   V==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            T is D+1,
            U=odom(occ(C,T),P),
            call_pattern(U),
            final_answer_pattern(odom(occ(C,D),P), odom([],P)),
            depends_on(odom(occ(C,D),P), U),
            (   G=suspension(_,X,_,Y,_,_,_,_,_,_),
                X=mutable(active),
                Y=mutable(W) ->
                'chr update_mutable'(inactive, X),
                'occurrence/4__16__2'(N, I, A, J, B, H, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__16__2'(N, I, A, J, B, H, C, D, E, F, G)
        ).
'occurrence/4__16'(A, B, C, D, E) :-
        'occurrence/4__17'(A, B, C, D, E).
'occurrence/4__17'(A, B, C, D, E) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
        'occurrence/4__17__0'(F, A, B, C, D, E).
'occurrence/4__17__0'([], A, B, C, D, E) :-
        'occurrence/4__18'(A, B, C, D, E).
'occurrence/4__17__0'([G|J], A, B, C, D, E) :-
        (   G=suspension(_,H,_,_,_,_,F),
            H=mutable(active),
            '$via1_multi_hash_rule/2-1'(C, I) ->
            'occurrence/4__17__1'(I, F, G, J, A, B, C, D, E)
        ;   'occurrence/4__17__0'(J, A, B, C, D, E)
        ).
'occurrence/4__17__1'([], _, _, F, A, B, C, D, E) :-
        'occurrence/4__17__0'(F, A, B, C, D, E).
'occurrence/4__17__1'([K|N], G, A, H, B, C, D, E, F) :-
        (   K=suspension(_,L,_,_,_,_,I,J),
            L=mutable(active),
            I==D,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', M) ->
            'occurrence/4__17__2'(M, J, K, N, G, A, H, B, C, D, E, F)
        ;   'occurrence/4__17__1'(N, G, A, H, B, C, D, E, F)
        ).
'occurrence/4__17__2'([], _, _, I, F, G, H, A, B, C, D, E) :-
        'occurrence/4__17__1'(I, F, G, H, A, B, C, D, E).
'occurrence/4__17__2'([N|O], J, A, K, H, B, I, C, D, E, F, G) :-
        (   N=suspension(_,M,_,_,_,_,L),
            M=mutable(active),
            nonvar(L),
            L=odom(P,Q),
            nonvar(P),
            P=occ(R,S),
            R==C,
            S==D,
            M1=t(181,B,A,G,N),
            'chr novel_production'(B, M1),
            'chr novel_production'(A, M1),
            'chr novel_production'(G, M1),
            'chr novel_production'(N, M1),
            J=pragma(rule(T,U,V,W),ids(_,X),_,_,_),
            memberchk_eq(F, X),
            \+is_passive(E,F) ->
            'chr extend_history'(G, M1),
            '$chr_translate__activate_constraint'(I1, _, G, J1),
            (   I1==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            once(select2(F,_,X,U,_,Y)),
            ai_observation_abstract_constraints(Y, H, Z),
            ai_observation_observe_list(odom([],Q), Z, odom([],A1)),
            ai_observation_abstract_constraints(T, H, B1),
            ai_observation_observe_list(odom([],A1), B1, odom([],C1)),
            ord_add_element(C1, C, D1),
            ai_observation_abstract_goal_(T, U, V, W, H, E1),
            call_pattern(odom(E1,D1)),
            (   ord_memberchk(C, C1) ->
                F1=no
            ;   F1=yes
            ),
            G1 is D+1,
            H1=odom(occ(C,G1),Q),
            call_pattern(H1),
            depends_on_ap(odom(occ(C,D),Q), odom(E1,D1), H1, F1),
            (   G=suspension(_,K1,_,L1,_,_,_,_,_,_),
                K1=mutable(active),
                L1=mutable(J1) ->
                'chr update_mutable'(inactive, K1),
                'occurrence/4__17__2'(O, J, A, K, H, B, I, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__17__2'(O, J, A, K, H, B, I, C, D, E, F, G)
        ).
'occurrence/4__17'(A, B, C, D, E) :-
        'occurrence/4__18'(A, B, C, D, E).
'occurrence/4__18'(_, _, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_occurrence/4'(A)
        ;   true
        ).
get_occurrence(A, B, C, D) :-
        'get_occurrence/4__0'(A, B, C, D, _).
'get_occurrence/4__0'(A, B, C, D, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, F),
        'chr sbag_member'(E, F),
        E=suspension(_,K,_,_,_,_,G,H,I,J),
        K=mutable(active),
        G==A,
        H==B, !,
        I=C,
        J=D.
'get_occurrence/4__0'(_, _, _, _, _) :- !,
        chr_error(internal, 'get_occurrence: missing occurrence ~w:~w\n', []).
max_occurrence(A, B) :-
        'max_occurrence/2__0'(A, B, _).
'max_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A ->
            true
        ),
        F>=B, !.
'max_occurrence/2__0'(A, B, C) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'max_occurrence/2__0'(A,B,C), C, max_occurrence(A,B), [A,B]),
        'max_occurrence/2__0__0'(D, A, B, C).
'max_occurrence/2__0__0'([], A, B, C) :-
        'max_occurrence/2__1'(A, B, C).
'max_occurrence/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            F==A ->
            (   B>=G ->
                '$chr_translate__remove_constraint_internal'(D, _, I),
                (   I==yes ->
                    '$delete_from_store_max_occurrence/2'(D)
                ;   true
                ),
                'max_occurrence/2__0__0'([], A, B, C)
            ;   'max_occurrence/2__0__0'([], A, B, C)
            )
        ;   'max_occurrence/2__0__0'(E, A, B, C)
        ).
'max_occurrence/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'max_occurrence/2__0'(A,B,C), C, max_occurrence(A,B), [A,B]),
        'max_occurrence/2__1'(A, B, C).
'max_occurrence/2__1'(A, B, C) :-
        '$via1_multi_hash_stored_complete/3-1'(A, D), !,
        'max_occurrence/2__1__0'(D, A, B, C).
'max_occurrence/2__1__0'([], A, B, C) :-
        'max_occurrence/2__2'(A, B, C).
'max_occurrence/2__1__0'([G|J], A, B, C) :-
        (   G=suspension(_,H,_,_,_,_,D,E,F),
            H=mutable(active),
            D==A,
            F==0,
            '$via1_multi_hash_occurrence/4-1'(A, I) ->
            'max_occurrence/2__1__1'(I, E, G, J, A, B, C)
        ;   'max_occurrence/2__1__0'(J, A, B, C)
        ).
'max_occurrence/2__1__1'([], _, _, D, A, B, C) :-
        'max_occurrence/2__1__0'(D, A, B, C).
'max_occurrence/2__1__1'([I|L], E, A, F, B, C, D) :-
        (   I=suspension(_,J,_,_,_,_,G,_,H,_),
            J=mutable(active),
            G==B,
            '$via1_multi_hash_occurrence/4-3'(H, K) ->
            'max_occurrence/2__1__2'(K, H, I, L, E, A, F, B, C, D)
        ;   'max_occurrence/2__1__1'(L, E, A, F, B, C, D)
        ).
'max_occurrence/2__1__2'([], _, _, G, D, E, F, A, B, C) :-
        'max_occurrence/2__1__1'(G, D, E, F, A, B, C).
'max_occurrence/2__1__2'([M|N], H, A, I, F, B, G, C, D, E) :-
        (   M=suspension(_,L,_,_,_,_,_,_,J,K),
            L=mutable(active),
            M\==A,
            J==H,
            S=t(119,B,A,M,E),
            'chr novel_production'(B, S),
            'chr novel_production'(A, S),
            'chr novel_production'(M, S),
            'chr novel_production'(E, S),
            F=<D ->
            'chr extend_history'(E, S),
            '$chr_translate__activate_constraint'(O, _, E, P),
            (   O==yes ->
                '$insert_in_store_max_occurrence/2'(E)
            ;   true
            ),
            passive(H, K),
            (   E=suspension(_,Q,_,R,_,_,_,_),
                Q=mutable(active),
                R=mutable(P) ->
                'chr update_mutable'(inactive, Q),
                'max_occurrence/2__1__2'(N, H, A, I, F, B, G, C, D, E)
            ;   true
            )
        ;   'max_occurrence/2__1__2'(N, H, A, I, F, B, G, C, D, E)
        ).
'max_occurrence/2__1'(A, B, C) :-
        'max_occurrence/2__2'(A, B, C).
'max_occurrence/2__2'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', D), !,
        'max_occurrence/2__2__0'(D, A, B, C).
'max_occurrence/2__2__0'([], A, B, C) :-
        'max_occurrence/2__3'(A, B, C).
'max_occurrence/2__2__0'([F|G], A, B, C) :-
        (   F=suspension(_,E,_,_,_,_,D),
            E=mutable(active),
            nonvar(D),
            D=odom(H,I),
            nonvar(H),
            H=occ(J,K),
            J==A,
            P=t(175,F,C),
            'chr novel_production'(F, P),
            'chr novel_production'(C, P),
            K>B ->
            'chr extend_history'(C, P),
            '$chr_translate__activate_constraint'(L, _, C, M),
            (   L==yes ->
                '$insert_in_store_max_occurrence/2'(C)
            ;   true
            ),
            final_answer_pattern(odom(occ(A,K),I), odom([],I)),
            (   C=suspension(_,N,_,O,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'max_occurrence/2__2__0'(G, A, B, C)
            ;   true
            )
        ;   'max_occurrence/2__2__0'(G, A, B, C)
        ).
'max_occurrence/2__2'(A, B, C) :-
        'max_occurrence/2__3'(A, B, C).
'max_occurrence/2__3'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_max_occurrence/2'(A)
        ;   true
        ).
get_max_occurrence(A, B) :-
        'get_max_occurrence/2__0'(A, B, _).
'get_max_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A ->
            true
        ), !,
        B=F.
'get_max_occurrence/2__0'(A, _, _) :- !,
        chr_error(internal, 'get_max_occurrence: missing max occurrence for ~w\n', [A]).
allocation_occurrence(A, B) :-
        'allocation_occurrence/2__0'(A, B, _).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, D),
        'chr sbag_member'(C, D),
        C=suspension(_,I,_,_,_,_,E,F,G,H),
        I=mutable(active),
        E==A,
        F==B,
        '$via1_multi_hash_passive/2-12'(k(G,H), K),
        (   'chr sbag_member'(J, K),
            J=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==G,
            M==H ->
            true
        ), !,
        O is B+1,
        allocation_occurrence(A, O).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, D),
        'chr sbag_member'(C, D),
        C=suspension(_,I,_,_,_,_,E,F,G,H),
        I=mutable(active),
        E==A,
        F==B,
        '$via1_multi_hash_rule/2-1'(G, K),
        'chr sbag_member'(J, K),
        J=suspension(_,N,_,_,_,_,L,M),
        N=mutable(active),
        L==G,
        M=pragma(_,ids(O,_),_,_,_),
        member(H, O), !,
        P is B+1,
        allocation_occurrence(A, P).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, D),
        'chr sbag_member'(C, D),
        C=suspension(_,H,_,_,_,_,E,F,G,_),
        H=mutable(active),
        E==A,
        F==B,
        '$via1_multi_hash_rule/2-1'(G, J),
        'chr sbag_member'(I, J),
        I=suspension(_,M,_,_,_,_,K,L),
        M=mutable(active),
        K==G,
        L=pragma(rule(_,_,_,true),_,_,_,_), !,
        N is B+1,
        allocation_occurrence(A, N).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, D),
        'chr sbag_member'(C, D),
        C=suspension(_,H,_,_,_,_,E,F,G,_),
        H=mutable(active),
        E==A,
        F==B,
        '$via1_multi_hash_rule/2-1'(G, J),
        'chr sbag_member'(I, J),
        I=suspension(_,M,_,_,_,_,K,L),
        M=mutable(active),
        K==G,
        L=pragma(rule([_|_],_,_,_),_,_,_,_),
        \+is_observed(A,B), !,
        N is B+1,
        allocation_occurrence(A, N).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, D),
        'chr sbag_member'(C, D),
        C=suspension(_,H,_,_,_,_,E,F,G,_),
        H=mutable(active),
        E==A,
        F==B,
        '$via1_multi_hash_least_occurrence/2-1'(G, O),
        '$via1_multi_hash_rule/2-1'(G, J),
        'chr sbag_member'(I, J),
        I=suspension(_,M,_,_,_,_,K,L),
        M=mutable(active),
        K==G,
        'chr sbag_member'(N, O),
        N=suspension(_,R,_,_,_,_,P,Q),
        R=mutable(active),
        P==G,
        Q== [],
        L=pragma(rule([],_,_,_),_,_,_,_),
        \+is_observed(A,B), !,
        S is B+1,
        allocation_occurrence(A, S).
'allocation_occurrence/2__0'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'allocation_occurrence/2__0'(A,B,C), C, allocation_occurrence(A,B), [A,B]),
        'allocation_occurrence/2__0__0'(D, A, B, C).
'allocation_occurrence/2__0__0'([], A, B, C) :-
        'allocation_occurrence/2__1'(A, B, C).
'allocation_occurrence/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,J,_,_,_,_,F,G),
            J=mutable(active),
            nonvar(G),
            G=[H|I],
            '$via1_multi_hash_occurrence/4-34'(k(F,H), P),
            '$via1_multi_hash_rule/2-1'(F, L),
            'chr sbag_member'(K, L),
            K=suspension(_,N,_,_,_,_,M,_),
            N=mutable(active),
            M==F,
            'chr sbag_member'(O, P),
            O=suspension(_,U,_,_,_,_,Q,R,S,T),
            U=mutable(active),
            Q==A,
            S==F,
            T==H,
            B>=R,
            \+may_trigger(A) ->
            '$chr_translate__remove_constraint_internal'(D, _, V),
            (   V==yes ->
                '$delete_from_store_least_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(W, _, C, X),
            (   W==yes ->
                '$insert_in_store_allocation_occurrence/2'(C)
            ;   true
            ),
            least_occurrence(F, I),
            (   C=suspension(_,Y,_,Z,_,_,_,_),
                Y=mutable(active),
                Z=mutable(X) ->
                'chr update_mutable'(inactive, Y),
                'allocation_occurrence/2__0__0'(E, A, B, C)
            ;   true
            )
        ;   'allocation_occurrence/2__0__0'(E, A, B, C)
        ).
'allocation_occurrence/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'allocation_occurrence/2__0'(A,B,C), C, allocation_occurrence(A,B), [A,B]),
        'allocation_occurrence/2__1'(A, B, C).
'allocation_occurrence/2__1'(A, B, C) :-
        '$via1_multi_hash_functional_dependency/4-1'(A, D), !,
        'allocation_occurrence/2__1__0'(D, A, B, C).
'allocation_occurrence/2__1__0'([], A, B, C) :-
        'allocation_occurrence/2__2'(A, B, C).
'allocation_occurrence/2__1__0'([D|E], A, B, C) :-
        (   D=suspension(_,J,_,_,_,_,F,G,H,I),
            J=mutable(active),
            F==A,
            G>1,
            '$via1_multi_hash_occurrence/4-3'(G, L),
            'chr sbag_member'(K, L),
            K=suspension(_,P,_,_,_,_,M,N,O,_),
            P=mutable(active),
            M==A,
            O==G,
            B>N ->
            '$chr_translate__remove_constraint_internal'(D, _, Q),
            (   Q==yes ->
                '$delete_from_store_functional_dependency/4'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(R, _, C, S),
            (   R==yes ->
                '$insert_in_store_allocation_occurrence/2'(C)
            ;   true
            ),
            functional_dependency(A, 1, H, I),
            (   C=suspension(_,T,_,U,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'allocation_occurrence/2__1__0'(E, A, B, C)
            ;   true
            )
        ;   'allocation_occurrence/2__1__0'(E, A, B, C)
        ).
'allocation_occurrence/2__1'(A, B, C) :-
        'allocation_occurrence/2__2'(A, B, C).
'allocation_occurrence/2__2'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_allocation_occurrence/2'(A)
        ;   true
        ).
get_allocation_occurrence(A, B) :-
        'get_allocation_occurrence/2__0'(A, B, _).
'get_allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_allocation_occurrence/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        B=F.
'get_allocation_occurrence/2__0'(_, A, _) :- !,
        chr_pp_flag(late_allocation, off),
        A=0.
rule(A, B) :-
        'rule/2__0'(A, B, _).
'rule/2__0'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'rule/2__0'(A,B,C), C, rule(A,B), [A,B]),
        'rule/2__0__0'(D, A, B, C).
'rule/2__0__0'([], A, B, C) :-
        'rule/2__1'(A, B, C).
'rule/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, J),
            'chr sbag_member'(I, J),
            I=suspension(_,O,_,_,_,_,K,L,M,N),
            O=mutable(active),
            K==F,
            L==G,
            M==A,
            B=pragma(_,ids(Q,_),_,_,_),
            member(N, Q) ->
            '$chr_translate__remove_constraint_internal'(D, _, P),
            (   P==yes ->
                '$delete_from_store_allocation_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(S, _, C, T),
            (   S==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            R is G+1,
            allocation_occurrence(F, R),
            (   C=suspension(_,U,_,V,_,_,_,_),
                U=mutable(active),
                V=mutable(T) ->
                'chr update_mutable'(inactive, U),
                'rule/2__0__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__0__0'(E, A, B, C)
        ).
'rule/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'rule/2__0'(A,B,C), C, rule(A,B), [A,B]),
        'rule/2__1'(A, B, C).
'rule/2__1'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        'rule/2__1__0'(D, A, B, C).
'rule/2__1__0'([], A, B, C) :-
        'rule/2__2'(A, B, C).
'rule/2__1__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, J),
            'chr sbag_member'(I, J),
            I=suspension(_,N,_,_,_,_,K,L,M,_),
            N=mutable(active),
            K==F,
            L==G,
            M==A,
            B=pragma(rule(_,_,_,true),_,_,_,_) ->
            '$chr_translate__remove_constraint_internal'(D, _, O),
            (   O==yes ->
                '$delete_from_store_allocation_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(Q, _, C, R),
            (   Q==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            P is G+1,
            allocation_occurrence(F, P),
            (   C=suspension(_,S,_,T,_,_,_,_),
                S=mutable(active),
                T=mutable(R) ->
                'chr update_mutable'(inactive, S),
                'rule/2__1__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__1__0'(E, A, B, C)
        ).
'rule/2__1'(A, B, C) :-
        'rule/2__2'(A, B, C).
'rule/2__2'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        'rule/2__2__0'(D, A, B, C).
'rule/2__2__0'([], A, B, C) :-
        'rule/2__3'(A, B, C).
'rule/2__2__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, J),
            'chr sbag_member'(I, J),
            I=suspension(_,N,_,_,_,_,K,L,M,_),
            N=mutable(active),
            K==F,
            L==G,
            M==A,
            B=pragma(rule([_|_],_,_,_),_,_,_,_),
            \+is_observed(F,G) ->
            '$chr_translate__remove_constraint_internal'(D, _, O),
            (   O==yes ->
                '$delete_from_store_allocation_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(Q, _, C, R),
            (   Q==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            P is G+1,
            allocation_occurrence(F, P),
            (   C=suspension(_,S,_,T,_,_,_,_),
                S=mutable(active),
                T=mutable(R) ->
                'chr update_mutable'(inactive, S),
                'rule/2__2__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__2__0'(E, A, B, C)
        ).
'rule/2__2'(A, B, C) :-
        'rule/2__3'(A, B, C).
'rule/2__3'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        'rule/2__3__0'(D, A, B, C).
'rule/2__3__0'([], A, B, C) :-
        'rule/2__4'(A, B, C).
'rule/2__3__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, O),
            '$via1_multi_hash_least_occurrence/2-1'(A, J),
            'chr sbag_member'(I, J),
            I=suspension(_,M,_,_,_,_,K,L),
            M=mutable(active),
            K==A,
            L== [],
            'chr sbag_member'(N, O),
            N=suspension(_,S,_,_,_,_,P,Q,R,_),
            S=mutable(active),
            P==F,
            Q==G,
            R==A,
            B=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(F,G) ->
            '$chr_translate__remove_constraint_internal'(D, _, T),
            (   T==yes ->
                '$delete_from_store_allocation_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(V, _, C, W),
            (   V==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            U is G+1,
            allocation_occurrence(F, U),
            (   C=suspension(_,X,_,Y,_,_,_,_),
                X=mutable(active),
                Y=mutable(W) ->
                'chr update_mutable'(inactive, X),
                'rule/2__3__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__3__0'(E, A, B, C)
        ).
'rule/2__3'(A, B, C) :-
        'rule/2__4'(A, B, C).
'rule/2__4'(A, B, C) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, D), !,
        'rule/2__4__0'(D, A, B, C).
'rule/2__4__0'([], A, B, C) :-
        'rule/2__5'(A, B, C).
'rule/2__4__0'([D|E], A, B, C) :-
        (   D=suspension(_,J,_,_,_,_,F,G),
            J=mutable(active),
            F==A,
            nonvar(G),
            G=[H|I],
            '$via1_multi_hash_occurrence/4-34'(k(A,H), L),
            'chr sbag_member'(K, L),
            K=suspension(_,Q,_,_,_,_,M,N,O,P),
            Q=mutable(active),
            O==A,
            P==H,
            '$via1_multi_hash_allocation_occurrence/2-1'(M, S),
            'chr sbag_member'(R, S),
            R=suspension(_,V,_,_,_,_,T,U),
            V=mutable(active),
            T==M,
            U>=N,
            \+may_trigger(M) ->
            '$chr_translate__remove_constraint_internal'(D, _, W),
            (   W==yes ->
                '$delete_from_store_least_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(X, _, C, Y),
            (   X==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            least_occurrence(A, I),
            (   C=suspension(_,Z,_,A1,_,_,_,_),
                Z=mutable(active),
                A1=mutable(Y) ->
                'chr update_mutable'(inactive, Z),
                'rule/2__4__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__4__0'(E, A, B, C)
        ).
'rule/2__4'(A, B, C) :-
        'rule/2__5'(A, B, C).
'rule/2__5'(A, B, C) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, D), !,
        'rule/2__5__0'(D, A, B, C).
'rule/2__5__0'([], A, B, C) :-
        'rule/2__6'(A, B, C).
'rule/2__5__0'([D|E], A, B, C) :-
        (   D=suspension(_,J,_,_,_,_,F,G),
            J=mutable(active),
            F==A,
            nonvar(G),
            G=[H|I],
            '$via1_multi_hash_passive/2-12'(k(A,H), L),
            (   'chr sbag_member'(K, L),
                K=suspension(_,O,_,_,_,_,M,N),
                O=mutable(active),
                M==A,
                N==H ->
                true
            ) ->
            '$chr_translate__remove_constraint_internal'(D, _, P),
            (   P==yes ->
                '$delete_from_store_least_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(Q, _, C, R),
            (   Q==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            least_occurrence(A, I),
            (   C=suspension(_,S,_,T,_,_,_,_),
                S=mutable(active),
                T=mutable(R) ->
                'chr update_mutable'(inactive, S),
                'rule/2__5__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__5__0'(E, A, B, C)
        ).
'rule/2__5'(A, B, C) :-
        'rule/2__6'(A, B, C).
'rule/2__6'(A, B, C) :-
        'chr novel_production'(C, 52),
        B=pragma(rule([],_,_,_),ids([],D),_,_,_), !,
        'chr extend_history'(C, 52),
        '$chr_translate__activate_constraint'(E, _, C, F),
        (   E==yes ->
            '$insert_in_store_rule/2'(C)
        ;   true
        ),
        least_occurrence(A, D),
        (   C=suspension(_,G,_,H,_,_,_,_),
            G=mutable(active),
            H=mutable(F) ->
            'chr update_mutable'(inactive, G),
            'rule/2__7'(A, B, C)
        ;   true
        ).
'rule/2__6'(A, B, C) :-
        'rule/2__7'(A, B, C).
'rule/2__7'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-2'(A, D), !,
        'rule/2__7__0'(D, A, B, C).
'rule/2__7__0'([], A, B, C) :-
        'rule/2__8'(A, B, C).
'rule/2__7__0'([D|E], A, B, C) :-
        (   D=suspension(_,M,_,_,_,_,F,G,H,I,J,K,L),
            M=mutable(active),
            G==A,
            B=pragma(rule(O,P,Q,_),_,_,_,A),
            O\== [],
            append(O, P, R),
            make_head_matchings_explicit(R, S, T),
            term_variables(S+H, U),
            find_with_var_identity(V, U, chr_translate:head_subset(S,H,V), W),
            sort(W, X),
            X\= [] ->
            '$chr_translate__remove_constraint_internal'(D, _, N),
            (   N==yes ->
                '$delete_from_store_prev_guard_list/7'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(H1, _, C, I1),
            (   H1==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            compute_derived_info(T, X, S, R, Q, K, H, L, Y, Z),
            append(J, Y, A1),
            list2conj(A1, B1),
            conj2list(B1, C1),
            append(Z, L, D1),
            list2conj(D1, E1),
            conj2list(E1, F1),
            G1 is A-1,
            prev_guard_list(F, G1, H, I, C1, K, F1),
            (   C=suspension(_,J1,_,K1,_,_,_,_),
                J1=mutable(active),
                K1=mutable(I1) ->
                'chr update_mutable'(inactive, J1),
                'rule/2__7__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__7__0'(E, A, B, C)
        ).
'rule/2__7'(A, B, C) :-
        'rule/2__8'(A, B, C).
'rule/2__8'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, E),
        'chr sbag_member'(D, E),
        D=suspension(_,M,_,_,_,_,F,G,H,I,J,K,L),
        M=mutable(active),
        F==A,
        G==0,
        L== [],
        B=pragma(rule(Q,R,I,S),N,O,P,A),
        I\==true,
        append(K, J, T),
        simplify_guard(I, S, T, U, V),
        I\==U, !,
        '$chr_translate__remove_constraint_internal'(D, _, W),
        (   W==yes ->
            '$delete_from_store_prev_guard_list/7'(D)
        ;   true
        ),
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, X),
            (   X==yes ->
                '$delete_from_store_rule/2'(C)
            ;   true
            )
        ),
        rule(A, pragma(rule(Q,R,U,V),N,O,P,A)),
        prev_guard_list(A, 0, H, U, J, K, []).
'rule/2__8'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, D), !,
        'rule/2__8__0'(D, A, B, C).
'rule/2__8__0'([], A, B, C) :-
        'rule/2__9'(A, B, C).
'rule/2__8__0'([D|E], A, B, C) :-
        (   D=suspension(_,L,_,_,_,_,F,G,_,H,I,J,K),
            L=mutable(active),
            F==A,
            G==0,
            K== [],
            chr_pp_flag(check_impossible_rules, on),
            B=pragma(rule(_,_,H,_),_,_,_,A),
            append(J, I, N),
            guard_entailment:entails_guard(N,fail) ->
            '$chr_translate__remove_constraint_internal'(D, _, M),
            (   M==yes ->
                '$delete_from_store_prev_guard_list/7'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(O, _, C, P),
            (   O==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            chr_warning(weird_program, 'Heads will never match in ~@.\n\tThis rule will never fire!\n', [format_rule(B)]),
            set_all_passive(A),
            (   C=suspension(_,Q,_,R,_,_,_,_),
                Q=mutable(active),
                R=mutable(P) ->
                'chr update_mutable'(inactive, Q),
                'rule/2__8__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__8__0'(E, A, B, C)
        ).
'rule/2__8'(A, B, C) :-
        'rule/2__9'(A, B, C).
'rule/2__9'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, E),
        'chr sbag_member'(D, E),
        D=suspension(_,M,_,_,_,_,F,G,H,I,J,K,L),
        M=mutable(active),
        F==A,
        G==0,
        L== [],
        B=pragma(rule(Q,R,I,S),N,O,P,A),
        simplify_heads(K, J, I, S, T, U),
        T\== [],
        extract_variables(Q, V),
        extract_variables(R, W),
        extract_variables(H, X),
        replace_some_heads(V, W, X, T, Y, Z, I, S, A1),
        insert_variables(Y, Q, B1),
        insert_variables(Z, R, C1),
        append(U, A1, D1),
        list2conj(D1, E1),
        F1=pragma(rule(B1,C1,I,(E1,S)),N,O,P,A),
        (   Q\==B1
        ;   R\==C1
        ), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, G1),
            (   G1==yes ->
                '$delete_from_store_rule/2'(C)
            ;   true
            )
        ),
        rule(A, F1).
'rule/2__9'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, D), !,
        'rule/2__9__0'(D, A, B, C).
'rule/2__9__0'([], A, B, C) :-
        'rule/2__10'(A, B, C).
'rule/2__9__0'([I|J], A, B, C) :-
        (   I=suspension(_,H,_,_,_,_,D,E,_,F,_,_,G),
            H=mutable(active),
            D==A,
            E==0,
            G== [],
            P=t(96,I,C),
            'chr novel_production'(I, P),
            'chr novel_production'(C, P),
            chr_pp_flag(check_impossible_rules, on),
            B=pragma(rule(_,_,F,_),_,_,_,A),
            conj2list(F, K),
            guard_entailment:entails_guard(K,fail) ->
            'chr extend_history'(C, P),
            '$chr_translate__activate_constraint'(L, _, C, M),
            (   L==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            chr_warning(weird_program, 'Guard will always fail in ~@.\n\tThis rule will never fire!\n', [format_rule(B)]),
            set_all_passive(A),
            (   C=suspension(_,N,_,O,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'rule/2__9__0'(J, A, B, C)
            ;   true
            )
        ;   'rule/2__9__0'(J, A, B, C)
        ).
'rule/2__9'(A, B, C) :-
        'rule/2__10'(A, B, C).
'rule/2__10'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', D), !,
        'rule/2__10__0'(D, A, B, C).
'rule/2__10__0'([], A, B, C) :-
        'rule/2__11'(A, B, C).
'rule/2__10__0'([D|E], A, B, C) :-
        (   D=suspension(_,G,_,_,_,_,F),
            G=mutable(active),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(A, V),
            '$via1_multi_hash_prev_guard_list/7-1'(A, P),
            '$via1_multi_hash_occurrence/4-3'(A, I),
            'chr sbag_member'(H, I),
            H=suspension(_,N,_,_,_,_,J,K,L,M),
            N=mutable(active),
            L==A,
            'chr sbag_member'(O, P),
            O=suspension(_,T,_,_,_,_,Q,R,_,_,_,_,S),
            T=mutable(active),
            Q==A,
            R==0,
            S== [],
            'chr sbag_member'(U, V),
            U=suspension(_,Z,_,_,_,_,W,X,Y,_),
            Z=mutable(active),
            U\==H,
            W==J,
            Y==A,
            K<X,
            B=pragma(rule(B1,_,_,_),_,_,_,A),
            B1\== [],
            \+memberchk_eq(J,F) ->
            '$chr_translate__remove_constraint_internal'(D, _, A1),
            (   A1==yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(C1, _, C, D1),
            (   C1==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            first_occ_in_rule(A, J, K, M),
            multiple_occ_constraints_checked([J|F]),
            (   C=suspension(_,E1,_,F1,_,_,_,_),
                E1=mutable(active),
                F1=mutable(D1) ->
                'chr update_mutable'(inactive, E1),
                'rule/2__10__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__10__0'(E, A, B, C)
        ).
'rule/2__10'(A, B, C) :-
        'rule/2__11'(A, B, C).
'rule/2__11'(A, B, C) :-
        '$via1_multi_hash_passive/2-1'(A, D), !,
        'rule/2__11__0'(D, A, B, C).
'rule/2__11__0'([], A, B, C) :-
        'rule/2__12'(A, B, C).
'rule/2__11__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A,
            P=t(120,C,G),
            'chr novel_production'(C, P),
            'chr novel_production'(G, P),
            B=pragma(rule(_,_,_,_),ids([E|J],I),_,_,A) ->
            'chr extend_history'(C, P),
            '$chr_translate__activate_constraint'(L, _, C, M),
            (   L==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            append(J, I, K),
            check_all_passive(A, K),
            (   C=suspension(_,N,_,O,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'rule/2__11__0'(H, A, B, C)
            ;   true
            )
        ;   'rule/2__11__0'(H, A, B, C)
        ).
'rule/2__11'(A, B, C) :-
        'rule/2__12'(A, B, C).
'rule/2__12'(A, B, C) :-
        '$via1_multi_hash_passive/2-1'(A, D), !,
        'rule/2__12__0'(D, A, B, C).
'rule/2__12__0'([], A, B, C) :-
        'rule/2__13'(A, B, C).
'rule/2__12__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A,
            N=t(121,C,G),
            'chr novel_production'(C, N),
            'chr novel_production'(G, N),
            B=pragma(rule(_,_,_,_),ids([],[E|I]),_,_,A) ->
            'chr extend_history'(C, N),
            '$chr_translate__activate_constraint'(J, _, C, K),
            (   J==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            check_all_passive(A, I),
            (   C=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'rule/2__12__0'(H, A, B, C)
            ;   true
            )
        ;   'rule/2__12__0'(H, A, B, C)
        ).
'rule/2__12'(A, B, C) :-
        'rule/2__13'(A, B, C).
'rule/2__13'(A, B, C) :-
        '$via1_multi_hash_check_all_passive/2-1'(A, D), !,
        'rule/2__13__0'(D, A, B, C).
'rule/2__13__0'([], A, B, C) :-
        'rule/2__14'(A, B, C).
'rule/2__13__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            F==A,
            G== [] ->
            '$chr_translate__remove_constraint_internal'(D, _, I),
            (   I==yes ->
                '$delete_from_store_check_all_passive/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(J, _, C, K),
            (   J==yes ->
                '$insert_in_store_rule/2'(C)
            ;   true
            ),
            chr_warning(weird_program, 'All heads passive in ~@.\n\tThis rule never fires. Please check your program.\n', [format_rule(B)]),
            (   C=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'rule/2__13__0'(E, A, B, C)
            ;   true
            )
        ;   'rule/2__13__0'(E, A, B, C)
        ).
'rule/2__13'(A, B, C) :-
        'rule/2__14'(A, B, C).
'rule/2__14'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
        'rule/2__14__0'(D, A, B, C).
'rule/2__14__0'([], A, B, C) :-
        'rule/2__15'(A, B, C).
'rule/2__14__0'([D|G], A, B, C) :-
        (   D=suspension(_,E,_,_,_,_,_),
            E=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, F) ->
            'rule/2__14__1'(F, D, G, A, B, C)
        ;   'rule/2__14__0'(G, A, B, C)
        ).
'rule/2__14__1'([], _, D, A, B, C) :-
        'rule/2__14__0'(D, A, B, C).
'rule/2__14__1'([J|M], A, E, B, C, D) :-
        (   J=suspension(_,K,_,_,_,_,F,G,H,I),
            K=mutable(active),
            H==B,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', L) ->
            'rule/2__14__2'(L, F, G, I, J, M, A, E, B, C, D)
        ;   'rule/2__14__1'(M, A, E, B, C, D)
        ).
'rule/2__14__2'([], _, _, _, _, F, D, E, A, B, C) :-
        'rule/2__14__1'(F, D, E, A, B, C).
'rule/2__14__2'([M|N], G, H, I, A, J, B, F, C, D, E) :-
        (   M=suspension(_,L,_,_,_,_,K),
            L=mutable(active),
            nonvar(K),
            K=odom(O,P),
            nonvar(O),
            O=occ(Q,R),
            Q==G,
            R==H,
            Z=t(177,B,A,M,E),
            'chr novel_production'(B, Z),
            'chr novel_production'(A, Z),
            'chr novel_production'(M, Z),
            'chr novel_production'(E, Z),
            D=pragma(rule(_,_,_,_),ids(S,_),_,_,_),
            memberchk_eq(I, S),
            is_passive(C, I) ->
            'chr extend_history'(E, Z),
            '$chr_translate__activate_constraint'(V, _, E, W),
            (   V==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            T is H+1,
            U=odom(occ(G,T),P),
            call_pattern(U),
            depends_on(odom(occ(G,H),P), U),
            (   E=suspension(_,X,_,Y,_,_,_,_),
                X=mutable(active),
                Y=mutable(W) ->
                'chr update_mutable'(inactive, X),
                'rule/2__14__2'(N, G, H, I, A, J, B, F, C, D, E)
            ;   true
            )
        ;   'rule/2__14__2'(N, G, H, I, A, J, B, F, C, D, E)
        ).
'rule/2__14'(A, B, C) :-
        'rule/2__15'(A, B, C).
'rule/2__15'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
        'rule/2__15__0'(D, A, B, C).
'rule/2__15__0'([], A, B, C) :-
        'rule/2__16'(A, B, C).
'rule/2__15__0'([E|H], A, B, C) :-
        (   E=suspension(_,F,_,_,_,_,D),
            F=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, G) ->
            'rule/2__15__1'(G, D, E, H, A, B, C)
        ;   'rule/2__15__0'(H, A, B, C)
        ).
'rule/2__15__1'([], _, _, D, A, B, C) :-
        'rule/2__15__0'(D, A, B, C).
'rule/2__15__1'([K|N], E, A, F, B, C, D) :-
        (   K=suspension(_,L,_,_,_,_,G,H,I,J),
            L=mutable(active),
            I==B,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', M) ->
            'rule/2__15__2'(M, G, H, J, K, N, E, A, F, B, C, D)
        ;   'rule/2__15__1'(N, E, A, F, B, C, D)
        ).
'rule/2__15__2'([], _, _, _, _, G, D, E, F, A, B, C) :-
        'rule/2__15__1'(G, D, E, F, A, B, C).
'rule/2__15__2'([N|O], H, I, J, A, K, F, B, G, C, D, E) :-
        (   N=suspension(_,M,_,_,_,_,L),
            M=mutable(active),
            nonvar(L),
            L=odom(P,Q),
            nonvar(P),
            P=occ(R,S),
            R==H,
            S==I,
            K1=t(178,B,A,N,E),
            'chr novel_production'(B, K1),
            'chr novel_production'(A, K1),
            'chr novel_production'(N, K1),
            'chr novel_production'(E, K1),
            D=pragma(rule(T,U,V,W),ids(X,_),_,_,_),
            memberchk_eq(J, X),
            \+is_passive(C,J) ->
            'chr extend_history'(E, K1),
            '$chr_translate__activate_constraint'(G1, _, E, H1),
            (   G1==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            once(select2(J,_,X,T,_,Y)),
            ai_observation_abstract_constraints(Y, F, Z),
            ai_observation_observe_list(odom([],Q), Z, odom([],A1)),
            ai_observation_abstract_constraints(U, F, B1),
            ai_observation_observe_list(odom([],A1), B1, odom([],C1)),
            ai_observation_abstract_goal_(T, U, V, W, F, D1),
            call_pattern(odom(D1,C1)),
            E1 is I+1,
            F1=odom(occ(H,E1),Q),
            call_pattern(F1),
            depends_on_as(odom(occ(H,I),Q), odom(D1,C1), F1),
            final_answer_pattern(odom(occ(H,I),Q), odom([],Q)),
            (   E=suspension(_,I1,_,J1,_,_,_,_),
                I1=mutable(active),
                J1=mutable(H1) ->
                'chr update_mutable'(inactive, I1),
                'rule/2__15__2'(O, H, I, J, A, K, F, B, G, C, D, E)
            ;   true
            )
        ;   'rule/2__15__2'(O, H, I, J, A, K, F, B, G, C, D, E)
        ).
'rule/2__15'(A, B, C) :-
        'rule/2__16'(A, B, C).
'rule/2__16'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
        'rule/2__16__0'(D, A, B, C).
'rule/2__16__0'([], A, B, C) :-
        'rule/2__17'(A, B, C).
'rule/2__16__0'([D|G], A, B, C) :-
        (   D=suspension(_,E,_,_,_,_,_),
            E=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, F) ->
            'rule/2__16__1'(F, D, G, A, B, C)
        ;   'rule/2__16__0'(G, A, B, C)
        ).
'rule/2__16__1'([], _, D, A, B, C) :-
        'rule/2__16__0'(D, A, B, C).
'rule/2__16__1'([J|M], A, E, B, C, D) :-
        (   J=suspension(_,K,_,_,_,_,F,G,H,I),
            K=mutable(active),
            H==B,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', L) ->
            'rule/2__16__2'(L, F, G, I, J, M, A, E, B, C, D)
        ;   'rule/2__16__1'(M, A, E, B, C, D)
        ).
'rule/2__16__2'([], _, _, _, _, F, D, E, A, B, C) :-
        'rule/2__16__1'(F, D, E, A, B, C).
'rule/2__16__2'([M|N], G, H, I, A, J, B, F, C, D, E) :-
        (   M=suspension(_,L,_,_,_,_,K),
            L=mutable(active),
            nonvar(K),
            K=odom(O,P),
            nonvar(O),
            O=occ(Q,R),
            Q==G,
            R==H,
            Z=t(180,B,A,M,E),
            'chr novel_production'(B, Z),
            'chr novel_production'(A, Z),
            'chr novel_production'(M, Z),
            'chr novel_production'(E, Z),
            D=pragma(rule(_,_,_,_),ids(_,S),_,_,_),
            memberchk_eq(I, S),
            is_passive(C, I) ->
            'chr extend_history'(E, Z),
            '$chr_translate__activate_constraint'(V, _, E, W),
            (   V==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            T is H+1,
            U=odom(occ(G,T),P),
            call_pattern(U),
            final_answer_pattern(odom(occ(G,H),P), odom([],P)),
            depends_on(odom(occ(G,H),P), U),
            (   E=suspension(_,X,_,Y,_,_,_,_),
                X=mutable(active),
                Y=mutable(W) ->
                'chr update_mutable'(inactive, X),
                'rule/2__16__2'(N, G, H, I, A, J, B, F, C, D, E)
            ;   true
            )
        ;   'rule/2__16__2'(N, G, H, I, A, J, B, F, C, D, E)
        ).
'rule/2__16'(A, B, C) :-
        'rule/2__17'(A, B, C).
'rule/2__17'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
        'rule/2__17__0'(D, A, B, C).
'rule/2__17__0'([], A, B, C) :-
        'rule/2__18'(A, B, C).
'rule/2__17__0'([E|H], A, B, C) :-
        (   E=suspension(_,F,_,_,_,_,D),
            F=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, G) ->
            'rule/2__17__1'(G, D, E, H, A, B, C)
        ;   'rule/2__17__0'(H, A, B, C)
        ).
'rule/2__17__1'([], _, _, D, A, B, C) :-
        'rule/2__17__0'(D, A, B, C).
'rule/2__17__1'([K|N], E, A, F, B, C, D) :-
        (   K=suspension(_,L,_,_,_,_,G,H,I,J),
            L=mutable(active),
            I==B,
            nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', M) ->
            'rule/2__17__2'(M, G, H, J, K, N, E, A, F, B, C, D)
        ;   'rule/2__17__1'(N, E, A, F, B, C, D)
        ).
'rule/2__17__2'([], _, _, _, _, G, D, E, F, A, B, C) :-
        'rule/2__17__1'(G, D, E, F, A, B, C).
'rule/2__17__2'([N|O], H, I, J, A, K, F, B, G, C, D, E) :-
        (   N=suspension(_,M,_,_,_,_,L),
            M=mutable(active),
            nonvar(L),
            L=odom(P,Q),
            nonvar(P),
            P=occ(R,S),
            R==H,
            S==I,
            M1=t(181,B,A,N,E),
            'chr novel_production'(B, M1),
            'chr novel_production'(A, M1),
            'chr novel_production'(N, M1),
            'chr novel_production'(E, M1),
            D=pragma(rule(T,U,V,W),ids(_,X),_,_,_),
            memberchk_eq(J, X),
            \+is_passive(C,J) ->
            'chr extend_history'(E, M1),
            '$chr_translate__activate_constraint'(I1, _, E, J1),
            (   I1==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            once(select2(J,_,X,U,_,Y)),
            ai_observation_abstract_constraints(Y, F, Z),
            ai_observation_observe_list(odom([],Q), Z, odom([],A1)),
            ai_observation_abstract_constraints(T, F, B1),
            ai_observation_observe_list(odom([],A1), B1, odom([],C1)),
            ord_add_element(C1, H, D1),
            ai_observation_abstract_goal_(T, U, V, W, F, E1),
            call_pattern(odom(E1,D1)),
            (   ord_memberchk(H, C1) ->
                F1=no
            ;   F1=yes
            ),
            G1 is I+1,
            H1=odom(occ(H,G1),Q),
            call_pattern(H1),
            depends_on_ap(odom(occ(H,I),Q), odom(E1,D1), H1, F1),
            (   E=suspension(_,K1,_,L1,_,_,_,_),
                K1=mutable(active),
                L1=mutable(J1) ->
                'chr update_mutable'(inactive, K1),
                'rule/2__17__2'(O, H, I, J, A, K, F, B, G, C, D, E)
            ;   true
            )
        ;   'rule/2__17__2'(O, H, I, J, A, K, F, B, G, C, D, E)
        ).
'rule/2__17'(A, B, C) :-
        'rule/2__18'(A, B, C).
'rule/2__18'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_rule/2'(A)
        ;   true
        ).
get_rule(A, B) :-
        'get_rule/2__0'(A, B, _).
'get_rule/2__0'(A, B, _) :-
        '$via1_multi_hash_rule/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        B=F.
'get_rule/2__0'(_, _, _) :- !,
        fail.
least_occurrence(A, B) :-
        'least_occurrence/2__0'(A, B, _).
'least_occurrence/2__0'(A, B, C) :-
        B== [],
        nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'least_occurrence/2__0'(A,B,C), C, least_occurrence(A,B), [A,B]),
        'least_occurrence/2__0__0'(D, A, B, C).
'least_occurrence/2__0__0'([], A, B, C) :-
        'least_occurrence/2__1'(A, B, C).
'least_occurrence/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            '$via1_multi_hash_occurrence/4-3'(A, O),
            '$via1_multi_hash_rule/2-1'(A, J),
            'chr sbag_member'(I, J),
            I=suspension(_,M,_,_,_,_,K,L),
            M=mutable(active),
            K==A,
            'chr sbag_member'(N, O),
            N=suspension(_,S,_,_,_,_,P,Q,R,_),
            S=mutable(active),
            P==F,
            Q==G,
            R==A,
            L=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(F,G) ->
            '$chr_translate__remove_constraint_internal'(D, _, T),
            (   T==yes ->
                '$delete_from_store_allocation_occurrence/2'(D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(V, _, C, W),
            (   V==yes ->
                '$insert_in_store_least_occurrence/2'(C)
            ;   true
            ),
            U is G+1,
            allocation_occurrence(F, U),
            (   C=suspension(_,X,_,Y,_,_,_,_),
                X=mutable(active),
                Y=mutable(W) ->
                'chr update_mutable'(inactive, X),
                'least_occurrence/2__0__0'(E, A, B, C)
            ;   true
            )
        ;   'least_occurrence/2__0__0'(E, A, B, C)
        ).
'least_occurrence/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'least_occurrence/2__0'(A,B,C), C, least_occurrence(A,B), [A,B]),
        'least_occurrence/2__1'(A, B, C).
'least_occurrence/2__1'(A, B, C) :-
        nonvar(B),
        B=[D|E],
        '$via1_multi_hash_occurrence/4-34'(k(A,D), K),
        '$via1_multi_hash_rule/2-1'(A, G),
        'chr sbag_member'(F, G),
        F=suspension(_,I,_,_,_,_,H,_),
        I=mutable(active),
        H==A,
        'chr sbag_member'(J, K),
        J=suspension(_,P,_,_,_,_,L,M,N,O),
        P=mutable(active),
        N==A,
        O==D,
        '$via1_multi_hash_allocation_occurrence/2-1'(L, R),
        'chr sbag_member'(Q, R),
        Q=suspension(_,U,_,_,_,_,S,T),
        U=mutable(active),
        S==L,
        T>=M,
        \+may_trigger(L), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, V),
            (   V==yes ->
                '$delete_from_store_least_occurrence/2'(C)
            ;   true
            )
        ),
        least_occurrence(A, E).
'least_occurrence/2__1'(A, B, C) :-
        nonvar(B),
        B=[D|E],
        '$via1_multi_hash_passive/2-12'(k(A,D), K),
        '$via1_multi_hash_rule/2-1'(A, G),
        'chr sbag_member'(F, G),
        F=suspension(_,I,_,_,_,_,H,_),
        I=mutable(active),
        H==A,
        (   'chr sbag_member'(J, K),
            J=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==A,
            M==D ->
            true
        ), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, O),
            (   O==yes ->
                '$delete_from_store_least_occurrence/2'(C)
            ;   true
            )
        ),
        least_occurrence(A, E).
'least_occurrence/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_least_occurrence/2'(A)
        ;   true
        ).
is_least_occurrence(A) :-
        'is_least_occurrence/1__0'(A, _).
'is_least_occurrence/1__0'(A, _) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, C),
        'chr sbag_member'(B, C),
        B=suspension(_,F,_,_,_,_,D,E),
        F=mutable(active),
        D==A,
        E== [], !.
'is_least_occurrence/1__0'(_, _) :- !,
        fail.
constraint_index(A, B) :-
        'constraint_index/2__0'(A, B, _).
'constraint_index/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'constraint_index/2__0'(A,B,C), constraint_index(A,B), [A,B]),
        '$insert_in_store_constraint_index/2'(C).
get_constraint_index(A, B) :-
        'get_constraint_index/2__0'(A, B, _).
'get_constraint_index/2__0'(A, B, _) :-
        '$via1_multi_hash_constraint_index/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        B=F.
'get_constraint_index/2__0'(_, _, _) :- !,
        fail.
get_indexed_constraint(A, B) :-
        'get_indexed_constraint/2__0'(A, B, _).
'get_indexed_constraint/2__0'(A, B, _) :-
        '$via1_multi_hash_constraint_index/2-2'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        F==A, !,
        B=E.
'get_indexed_constraint/2__0'(_, _, _) :- !,
        fail.
max_constraint_index(A) :-
        'max_constraint_index/1__0'(A, _).
'max_constraint_index/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'max_constraint_index/1__0'(A,B), max_constraint_index(A), [A]),
        '$insert_in_store_max_constraint_index/1'(B).
get_max_constraint_index(A) :-
        'get_max_constraint_index/1__0'(A, _).
'get_max_constraint_index/1__0'(A, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', C),
        'chr sbag_member'(B, C),
        B=suspension(_,E,_,_,_,_,D),
        E=mutable(active), !,
        A=D.
'get_max_constraint_index/1__0'(A, _) :- !,
        A=0.
head_name(A, B, C, D) :-
        'head_name/4__0'(A, B, C, D, _).
'head_name/4__0'(A, B, C, D, E) :-
        (   var(E) ->
            '$chr_translate__insert_constraint_internal'(G, F, E, chr_translate:'head_name/4__0'(A,B,C,D,E), head_name(A,B,C,D), [A,B,C,D])
        ;   '$chr_translate__activate_constraint'(G, F, E, _)
        ),
        (   G==yes ->
            '$insert_in_store_head_name/4'(E),
            'attach_head_name/4'(F, E)
        ;   true
        ).
find_head_name(A, B, C, D) :-
        'find_head_name/4__0'(A, B, C, D, _).
'find_head_name/4__0'(A, B, C, D, _) :-
        'chr via_2'(A, B, F),
        get_attr(F, chr_translate, G),
        G=v(I,H,_,_,_,_),
        I/\1=:=1,
        'chr sbag_member'(E, H),
        E=suspension(_,N,_,_,_,_,J,K,L,M),
        N=mutable(active),
        J==A,
        M==B, !,
        C=K,
        functor(L, O, P),
        D=O/P.
'find_head_name/4__0'(_, _, _, _, _) :- !,
        fail.
no_history(A) :-
        'no_history/1__0'(A, _).
'no_history/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'no_history/1__0'(A,B), no_history(A), [A]),
        '$insert_in_store_no_history/1'(B).
has_no_history(A) :-
        'has_no_history/1__0'(A, _).
'has_no_history/1__0'(A, _) :-
        '$via1_multi_hash_no_history/1-1'(A, C),
        'chr sbag_member'(B, C),
        B=suspension(_,E,_,_,_,_,D),
        E=mutable(active),
        D==A, !.
'has_no_history/1__0'(_, _) :- !,
        fail.
indexing_spec(A, B) :-
        'indexing_spec/2__0'(A, B, _).
'indexing_spec/2__0'(A, B, _) :-
        '$via1_multi_hash_indexing_spec/2-1'(A, D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A ->
            true
        ), !,
        '$chr_translate__remove_constraint_internal'(C, _, I),
        (   I==yes ->
            '$delete_from_store_indexing_spec/2'(C)
        ;   true
        ),
        append(B, F, H),
        indexing_spec(A, H).
'indexing_spec/2__0'(A, B, _) :-
        '$via1_multi_hash_indexing_spec/2-1'(A, D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A ->
            true
        ), !,
        '$chr_translate__remove_constraint_internal'(C, _, I),
        (   I==yes ->
            '$delete_from_store_indexing_spec/2'(C)
        ;   true
        ),
        append(F, B, H),
        indexing_spec(A, H).
'indexing_spec/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'indexing_spec/2__0'(A,B,C), indexing_spec(A,B), [A,B]),
        '$insert_in_store_indexing_spec/2'(C).
get_indexing_spec(A, B) :-
        'get_indexing_spec/2__0'(A, B, _).
'get_indexing_spec/2__0'(A, B, _) :-
        '$via1_multi_hash_indexing_spec/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        B=F.
'get_indexing_spec/2__0'(_, A, _) :- !,
        A= [] .
observes(A, B) :-
        'observes/2__0'(A, B, _).
'observes/2__0'(A, B, _) :-
        '$via1_multi_hash_observes/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'observes/2__0'(A, B, C) :-
        '$via1_multi_hash_spawns_observer/2-2'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'observes/2__0'(A,B,C), C, observes(A,B), [A,B]),
        'observes/2__0__0'(D, A, B, C).
'observes/2__0__0'([], A, B, C) :-
        'observes/2__1'(A, B, C).
'observes/2__0__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            E==A,
            M=t(75,G,C),
            'chr novel_production'(G, M),
            'chr novel_production'(C, M) ->
            'chr extend_history'(C, M),
            '$chr_translate__activate_constraint'(I, _, C, J),
            (   I==yes ->
                '$insert_in_store_observes/2'(C)
            ;   true
            ),
            observes_indirectly(D, B),
            (   C=suspension(_,K,_,L,_,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'observes/2__0__0'(H, A, B, C)
            ;   true
            )
        ;   'observes/2__0__0'(H, A, B, C)
        ).
'observes/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'observes/2__0'(A,B,C), C, observes(A,B), [A,B]),
        'observes/2__1'(A, B, C).
'observes/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_observes/2'(A)
        ;   true
        ).
spawns_observer(A, B) :-
        'spawns_observer/2__0'(A, B, _).
'spawns_observer/2__0'(A, B, _) :-
        '$via1_multi_hash_spawns_observer/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'spawns_observer/2__0'(A, B, C) :-
        '$via1_multi_hash_observes/2-1'(B, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'spawns_observer/2__0'(A,B,C), C, spawns_observer(A,B), [A,B]),
        'spawns_observer/2__0__0'(D, A, B, C).
'spawns_observer/2__0__0'([], A, B, C) :-
        'spawns_observer/2__1'(A, B, C).
'spawns_observer/2__0__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==B,
            M=t(75,C,G),
            'chr novel_production'(C, M),
            'chr novel_production'(G, M) ->
            'chr extend_history'(C, M),
            '$chr_translate__activate_constraint'(I, _, C, J),
            (   I==yes ->
                '$insert_in_store_spawns_observer/2'(C)
            ;   true
            ),
            observes_indirectly(A, E),
            (   C=suspension(_,K,_,L,_,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'spawns_observer/2__0__0'(H, A, B, C)
            ;   true
            )
        ;   'spawns_observer/2__0__0'(H, A, B, C)
        ).
'spawns_observer/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'spawns_observer/2__0'(A,B,C), C, spawns_observer(A,B), [A,B]),
        'spawns_observer/2__1'(A, B, C).
'spawns_observer/2__1'(A, B, C) :-
        '$via1_multi_hash_observes_indirectly/2-1'(B, D), !,
        'spawns_observer/2__1__0'(D, A, B, C).
'spawns_observer/2__1__0'([], A, B, C) :-
        'spawns_observer/2__2'(A, B, C).
'spawns_observer/2__1__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==B,
            M=t(76,C,G),
            'chr novel_production'(C, M),
            'chr novel_production'(G, M) ->
            'chr extend_history'(C, M),
            '$chr_translate__activate_constraint'(I, _, C, J),
            (   I==yes ->
                '$insert_in_store_spawns_observer/2'(C)
            ;   true
            ),
            observes_indirectly(A, E),
            (   C=suspension(_,K,_,L,_,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'spawns_observer/2__1__0'(H, A, B, C)
            ;   true
            )
        ;   'spawns_observer/2__1__0'(H, A, B, C)
        ).
'spawns_observer/2__1'(A, B, C) :-
        'spawns_observer/2__2'(A, B, C).
'spawns_observer/2__2'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_spawns_observer/2'(A)
        ;   true
        ).
observes_indirectly(A, B) :-
        'observes_indirectly/2__0'(A, B, _).
'observes_indirectly/2__0'(A, B, _) :-
        '$via1_multi_hash_observes_indirectly/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'observes_indirectly/2__0'(A, B, C) :-
        '$via1_multi_hash_spawns_observer/2-2'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'observes_indirectly/2__0'(A,B,C), C, observes_indirectly(A,B), [A,B]),
        'observes_indirectly/2__0__0'(D, A, B, C).
'observes_indirectly/2__0__0'([], A, B, C) :-
        'observes_indirectly/2__1'(A, B, C).
'observes_indirectly/2__0__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            E==A,
            M=t(76,G,C),
            'chr novel_production'(G, M),
            'chr novel_production'(C, M) ->
            'chr extend_history'(C, M),
            '$chr_translate__activate_constraint'(I, _, C, J),
            (   I==yes ->
                '$insert_in_store_observes_indirectly/2'(C)
            ;   true
            ),
            observes_indirectly(D, B),
            (   C=suspension(_,K,_,L,_,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'observes_indirectly/2__0__0'(H, A, B, C)
            ;   true
            )
        ;   'observes_indirectly/2__0__0'(H, A, B, C)
        ).
'observes_indirectly/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'observes_indirectly/2__0'(A,B,C), C, observes_indirectly(A,B), [A,B]),
        'observes_indirectly/2__1'(A, B, C).
'observes_indirectly/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_observes_indirectly/2'(A)
        ;   true
        ).
is_self_observer(A) :-
        'is_self_observer/1__0'(A, _).
'is_self_observer/1__0'(A, _) :-
        '$via1_multi_hash_observes_indirectly/2-12'(k(A,A), C),
        'chr sbag_member'(B, C),
        B=suspension(_,F,_,_,_,_,D,E),
        F=mutable(active),
        D==A,
        E==A, !.
'is_self_observer/1__0'(_, _) :- !,
        chr_pp_flag(observation_analysis, off).
generate_indexed_variables_body(A, B, C, D) :-
        'generate_indexed_variables_body/4__0'(A, B, C, D, _).
'generate_indexed_variables_body/4__0'(A, B, C, D, _) :-
        nonvar(A),
        A=E/F,
        nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', H),
        (   'chr sbag_member'(G, H),
            G=suspension(_,M,_,_,_,_,I,J),
            M=mutable(active),
            nonvar(I),
            I=K/L,
            K==E,
            L==F ->
            true
        ), !,
        get_indexing_spec(E/F, N),
        (   chr_pp_flag(term_indexing, on) ->
            spectermvars(N, B, E, F, C, D)
        ;   create_indexed_variables_body(B, J, D, 1, E/F, O, P),
            (   O==empty ->
                C=true,
                D= []
            ;   P==0 ->
                C=term_variables(B,D)
            ;   O=C
            )
        ).
'generate_indexed_variables_body/4__0'(A, _, _, _, _) :- !,
        chr_error(internal, 'generate_indexed_variables_body: missing mode info for ~w.\n', [A]).
module_initializer(A) :-
        'module_initializer/1__0'(A, _).
'module_initializer/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'module_initializer/1__0'(A,B), module_initializer(A), [A]),
        '$insert_in_store_module_initializer/1'(B).
module_initializers(A) :-
        'module_initializers/1__0'(A, _).
'module_initializers/1__0'(A, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:module_initializer/1', C),
        'chr sbag_member'(B, C),
        B=suspension(_,E,_,_,_,_,D),
        E=mutable(active), !,
        '$chr_translate__remove_constraint_internal'(B, _, G),
        (   G==yes ->
            '$delete_from_store_module_initializer/1'(B)
        ;   true
        ),
        A=(D,F),
        module_initializers(F).
'module_initializers/1__0'(A, _) :- !,
        A=true.
prolog_global_variable(A) :-
        'prolog_global_variable/1__0'(A, _).
'prolog_global_variable/1__0'(A, B) :-
        'chr via_1'(A, D),
        get_attr(D, chr_translate, E),
        E=v(G,_,F,_,_,_),
        G/\2=:=2,
        (   'chr sbag_member'(C, F),
            C=suspension(_,I,_,_,_,_,H),
            I=mutable(active),
            H==A ->
            true
        ), !,
        (   var(B) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(B, J, K),
            (   K==yes ->
                '$delete_from_store_prolog_global_variable/1'(B),
                'detach_prolog_global_variable/1'(J, B)
            ;   true
            )
        ).
'prolog_global_variable/1__0'(A, B) :-
        (   var(B) ->
            '$chr_translate__insert_constraint_internal'(D, C, B, chr_translate:'prolog_global_variable/1__0'(A,B), prolog_global_variable(A), [A])
        ;   '$chr_translate__activate_constraint'(D, C, B, _)
        ),
        (   D==yes ->
            '$insert_in_store_prolog_global_variable/1'(B),
            'attach_prolog_global_variable/1'(C, B)
        ;   true
        ).
prolog_global_variables(A) :-
        'prolog_global_variables/1__0'(A, _).
'prolog_global_variables/1__0'(A, _) :-
        'chr default_store'(D),
        get_attr(D, chr_translate, C),
        C=v(F,_,E,_,_,_),
        F/\2=:=2,
        'chr sbag_member'(B, E),
        B=suspension(_,H,_,_,_,_,G),
        H=mutable(active), !,
        '$chr_translate__remove_constraint_internal'(B, J, K),
        (   K==yes ->
            '$delete_from_store_prolog_global_variable/1'(B),
            'detach_prolog_global_variable/1'(J, B)
        ;   true
        ),
        A=[G|I],
        prolog_global_variables(I).
'prolog_global_variables/1__0'(A, _) :- !,
        A= [] .
prev_guard_list(A, B, C, D, E, F, G) :-
        'prev_guard_list/7__0'(A, B, C, D, E, F, G, _).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, _) :-
        '$via1_multi_hash_rule/2-1'(B, I),
        'chr sbag_member'(H, I),
        H=suspension(_,L,_,_,_,_,J,K),
        L=mutable(active),
        J==B,
        K=pragma(rule(M,N,O,_),_,_,_,B),
        M\== [],
        append(M, N, P),
        make_head_matchings_explicit(P, Q, R),
        term_variables(Q+C, S),
        find_with_var_identity(T, S, chr_translate:head_subset(Q,C,T), U),
        sort(U, V),
        V\= [], !,
        compute_derived_info(R, V, Q, P, O, F, C, G, W, X),
        append(E, W, Y),
        list2conj(Y, Z),
        conj2list(Z, A1),
        append(X, G, B1),
        list2conj(B1, C1),
        conj2list(C1, D1),
        E1 is B-1,
        prev_guard_list(A, E1, C, D, A1, F, D1).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, _) :-
        B>0, !,
        H is B-1,
        prev_guard_list(A, H, C, D, E, F, G).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, _) :-
        B==0,
        G\== [], !,
        add_type_information_(C, G, H),
        conj2list(H, I),
        term_variables(C, J),
        append([chr_pp_headvariables(J)|I], E, K),
        list2conj(K, L),
        conj2list(L, M),
        prev_guard_list(A, 0, C, D, M, F, []).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, _) :-
        B==0,
        G== [],
        '$via1_multi_hash_rule/2-1'(A, I),
        'chr sbag_member'(H, I),
        H=suspension(_,L,_,_,_,_,J,K),
        L=mutable(active),
        J==A,
        K=pragma(rule(P,Q,D,R),M,N,O,A),
        D\==true,
        append(F, E, S),
        simplify_guard(D, R, S, T, U),
        D\==T, !,
        '$chr_translate__remove_constraint_internal'(H, _, V),
        (   V==yes ->
            '$delete_from_store_rule/2'(H)
        ;   true
        ),
        rule(A, pragma(rule(P,Q,T,U),M,N,O,A)),
        prev_guard_list(A, 0, C, T, E, F, []).
'prev_guard_list/7__0'(A, B, _, C, D, E, F, _) :-
        B==0,
        F== [],
        chr_pp_flag(check_impossible_rules, on),
        '$via1_multi_hash_rule/2-1'(A, H),
        'chr sbag_member'(G, H),
        G=suspension(_,K,_,_,_,_,I,J),
        K=mutable(active),
        I==A,
        J=pragma(rule(_,_,C,_),_,_,_,A),
        append(E, D, L),
        guard_entailment:entails_guard(L,fail), !,
        chr_warning(weird_program, 'Heads will never match in ~@.\n\tThis rule will never fire!\n', [format_rule(J)]),
        set_all_passive(A).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
        B==0,
        G== [],
        '$via1_multi_hash_rule/2-1'(A, I), !,
        '$chr_translate__allocate_constraint'(chr_translate:'prev_guard_list/7__0'(A,B,C,D,E,F,G,H), H, prev_guard_list(A,B,C,D,E,F,G), [A,B,C,D,E,F,G]),
        'prev_guard_list/7__0__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__0__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__1'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__0__0'([I|J], A, B, C, D, E, F, G, H) :-
        (   I=suspension(_,M,_,_,_,_,K,L),
            M=mutable(active),
            K==A,
            L=pragma(rule(R,S,D,T),O,P,Q,A),
            simplify_heads(F, E, D, T, U, V),
            U\== [],
            extract_variables(R, W),
            extract_variables(S, X),
            extract_variables(C, Y),
            replace_some_heads(W, X, Y, U, Z, A1, D, T, B1),
            insert_variables(Z, R, C1),
            insert_variables(A1, S, D1),
            append(V, B1, E1),
            list2conj(E1, F1),
            G1=pragma(rule(C1,D1,D,(F1,T)),O,P,Q,A),
            (   R\==C1
            ;   S\==D1
            ) ->
            '$chr_translate__remove_constraint_internal'(I, _, N),
            (   N==yes ->
                '$delete_from_store_rule/2'(I)
            ;   true
            ),
            '$chr_translate__activate_constraint'(H1, _, H, I1),
            (   H1==yes ->
                '$insert_in_store_prev_guard_list/7'(H)
            ;   true
            ),
            rule(A, G1),
            (   H=suspension(_,J1,_,K1,_,_,_,_,_,_,_,_,_),
                J1=mutable(active),
                K1=mutable(I1) ->
                'chr update_mutable'(inactive, J1),
                'prev_guard_list/7__0__0'(J, A, B, C, D, E, F, G, H)
            ;   true
            )
        ;   'prev_guard_list/7__0__0'(J, A, B, C, D, E, F, G, H)
        ).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
        '$chr_translate__allocate_constraint'(chr_translate:'prev_guard_list/7__0'(A,B,C,D,E,F,G,H), H, prev_guard_list(A,B,C,D,E,F,G), [A,B,C,D,E,F,G]),
        'prev_guard_list/7__1'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__1'(A, B, C, D, E, F, G, H) :-
        B==0,
        G== [],
        '$via1_multi_hash_rule/2-1'(A, I), !,
        'prev_guard_list/7__1__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__1__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__2'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__1__0'([L|M], A, B, C, D, E, F, G, H) :-
        (   L=suspension(_,K,_,_,_,_,I,J),
            K=mutable(active),
            I==A,
            S=t(96,H,L),
            'chr novel_production'(H, S),
            'chr novel_production'(L, S),
            chr_pp_flag(check_impossible_rules, on),
            J=pragma(rule(_,_,D,_),_,_,_,A),
            conj2list(D, N),
            guard_entailment:entails_guard(N,fail) ->
            'chr extend_history'(H, S),
            '$chr_translate__activate_constraint'(O, _, H, P),
            (   O==yes ->
                '$insert_in_store_prev_guard_list/7'(H)
            ;   true
            ),
            chr_warning(weird_program, 'Guard will always fail in ~@.\n\tThis rule will never fire!\n', [format_rule(J)]),
            set_all_passive(A),
            (   H=suspension(_,Q,_,R,_,_,_,_,_,_,_,_,_),
                Q=mutable(active),
                R=mutable(P) ->
                'chr update_mutable'(inactive, Q),
                'prev_guard_list/7__1__0'(M, A, B, C, D, E, F, G, H)
            ;   true
            )
        ;   'prev_guard_list/7__1__0'(M, A, B, C, D, E, F, G, H)
        ).
'prev_guard_list/7__1'(A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__2'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__2'(A, B, C, D, E, F, G, H) :-
        B==0,
        G== [],
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', I), !,
        'prev_guard_list/7__2__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__2__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__3'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__2__0'([I|J], A, B, C, D, E, F, G, H) :-
        (   I=suspension(_,L,_,_,_,_,K),
            L=mutable(active),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(A, Y),
            '$via1_multi_hash_rule/2-1'(A, T),
            '$via1_multi_hash_occurrence/4-3'(A, N),
            'chr sbag_member'(M, N),
            M=suspension(_,R,_,_,_,_,O,P,Q,_),
            R=mutable(active),
            Q==A,
            'chr sbag_member'(S, T),
            S=suspension(_,W,_,_,_,_,U,V),
            W=mutable(active),
            U==A,
            'chr sbag_member'(X, Y),
            X=suspension(_,D1,_,_,_,_,Z,A1,B1,C1),
            D1=mutable(active),
            X\==M,
            Z==O,
            B1==A,
            A1<P,
            V=pragma(rule(F1,_,_,_),_,_,_,A),
            F1\== [],
            \+memberchk_eq(O,K) ->
            '$chr_translate__remove_constraint_internal'(I, _, E1),
            (   E1==yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(I)
            ;   true
            ),
            '$chr_translate__activate_constraint'(G1, _, H, H1),
            (   G1==yes ->
                '$insert_in_store_prev_guard_list/7'(H)
            ;   true
            ),
            first_occ_in_rule(A, O, A1, C1),
            multiple_occ_constraints_checked([O|K]),
            (   H=suspension(_,I1,_,J1,_,_,_,_,_,_,_,_,_),
                I1=mutable(active),
                J1=mutable(H1) ->
                'chr update_mutable'(inactive, I1),
                'prev_guard_list/7__2__0'(J, A, B, C, D, E, F, G, H)
            ;   true
            )
        ;   'prev_guard_list/7__2__0'(J, A, B, C, D, E, F, G, H)
        ).
'prev_guard_list/7__2'(A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__3'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__3'(_, A, _, _, _, _, B, C) :-
        A==0,
        B== [],
        nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', E),
        'chr sbag_member'(D, E),
        D=suspension(_,F,_,_,_,_,_),
        F=mutable(active), !,
        '$chr_translate__remove_constraint_internal'(D, _, G),
        (   G==yes ->
            '$delete_from_store_multiple_occ_constraints_checked/1'(D)
        ;   true
        ),
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, H),
            (   H==yes ->
                '$delete_from_store_prev_guard_list/7'(C)
            ;   true
            )
        ).
'prev_guard_list/7__3'(_, _, _, _, _, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_prev_guard_list/7'(A)
        ;   true
        ).
simplify_guards(A) :-
        'simplify_guards/1__0'(A, _).
'simplify_guards/1__0'(A, _) :-
        '$via1_multi_hash_rule/2-1'(A, C),
        'chr sbag_member'(B, C),
        B=suspension(_,F,_,_,_,_,D,E),
        F=mutable(active),
        D==A, !,
        E=pragma(rule(G,H,I,_),_,_,_,A),
        append(G, H, J),
        make_head_matchings_explicit_not_negated(J, K, L),
        add_guard_to_head(J, I, M),
        N is A-1,
        prev_guard_list(A, N, K, I, [], L, [M]),
        multiple_occ_constraints_checked([]),
        O is A+1,
        simplify_guards(O).
'simplify_guards/1__0'(_, _) :- !.
set_all_passive(A) :-
        'set_all_passive/1__0'(A, _).
'set_all_passive/1__0'(A, B) :-
        '$via1_multi_hash_occurrence/4-3'(A, C), !,
        '$chr_translate__allocate_constraint'(chr_translate:'set_all_passive/1__0'(A,B), B, set_all_passive(A), [A]),
        'set_all_passive/1__0__0'(C, A, B).
'set_all_passive/1__0__0'([], A, B) :-
        'set_all_passive/1__1'(A, B).
'set_all_passive/1__0__0'([F|G], A, B) :-
        (   F=suspension(_,E,_,_,_,_,_,_,C,D),
            E=mutable(active),
            C==A,
            L=t(94,B,F),
            'chr novel_production'(B, L),
            'chr novel_production'(F, L) ->
            'chr extend_history'(B, L),
            '$chr_translate__activate_constraint'(H, _, B, I),
            (   H==yes ->
                '$insert_in_store_set_all_passive/1'(B)
            ;   true
            ),
            passive(A, D),
            (   B=suspension(_,J,_,K,_,_,_),
                J=mutable(active),
                K=mutable(I) ->
                'chr update_mutable'(inactive, J),
                'set_all_passive/1__0__0'(G, A, B)
            ;   true
            )
        ;   'set_all_passive/1__0__0'(G, A, B)
        ).
'set_all_passive/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'set_all_passive/1__0'(A,B), B, set_all_passive(A), [A]),
        'set_all_passive/1__1'(A, B).
'set_all_passive/1__1'(_, A) :- !,
        (   var(A) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(A, _, B),
            (   B==yes ->
                '$delete_from_store_set_all_passive/1'(A)
            ;   true
            )
        ).
'set_all_passive/1__1'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_set_all_passive/1'(A)
        ;   true
        ).
first_occ_in_rule(A, B, C, D) :-
        'first_occ_in_rule/4__0'(A, B, C, D, _).
'first_occ_in_rule/4__0'(A, B, C, _, _) :-
        '$via1_multi_hash_occurrence/4-3'(A, E),
        'chr sbag_member'(D, E),
        D=suspension(_,J,_,_,_,_,F,G,H,I),
        J=mutable(active),
        F==B,
        H==A,
        G<C, !,
        first_occ_in_rule(A, B, G, I).
'first_occ_in_rule/4__0'(A, B, C, D, _) :- !,
        B=E/F,
        functor(G, E, F),
        next_occ_in_rule(A, B, C, D, [], G).
next_occ_in_rule(A, B, C, D, E, F) :-
        'next_occ_in_rule/6__0'(A, B, C, D, E, F, _).
'next_occ_in_rule/6__0'(A, B, C, D, _, E, _) :-
        '$via1_multi_hash_occurrence/4-3'(A, G),
        'chr sbag_member'(F, G),
        F=suspension(_,L,_,_,_,_,H,I,J,K),
        L=mutable(active),
        H==B,
        J==A,
        '$via1_multi_hash_passive/2-12'(k(A,K), N),
        (   'chr sbag_member'(M, N),
            M=suspension(_,Q,_,_,_,_,O,P),
            Q=mutable(active),
            O==A,
            P==K ->
            true
        ),
        I is C+1, !,
        next_occ_in_rule(A, B, I, D, _, E).
'next_occ_in_rule/6__0'(A, B, C, D, E, F, _) :-
        '$via1_multi_hash_occurrence/4-3'(A, W),
        '$via1_multi_hash_prev_guard_list/7-1'(A, M),
        '$via1_multi_hash_rule/2-1'(A, H),
        'chr sbag_member'(G, H),
        G=suspension(_,K,_,_,_,_,I,J),
        K=mutable(active),
        I==A,
        'chr sbag_member'(L, M),
        L=suspension(_,U,_,_,_,_,N,O,P,Q,R,S,T),
        U=mutable(active),
        N==A,
        O==0,
        T== [],
        'chr sbag_member'(V, W),
        V=suspension(_,B1,_,_,_,_,X,Y,Z,A1),
        B1=mutable(active),
        X==B,
        Z==A,
        Y is C+1,
        J=pragma(rule(C1,D1,Q,_),ids(_,_),_,_,A), !,
        append(C1, D1, E1),
        add_failing_occ(J, E1, P, D, F1, F, S, B, G1),
        (   F1==[chr_pp_void_info] ->
            next_occ_in_rule(A, B, Y, A1, E, F)
        ;   append(F1, E, H1),
            add_failing_occ(J, E1, P, A1, I1, F, S, B, J1),
            copy_term(R, K1),
            variable_replacement(R, K1, L1),
            copy_with_variable_replacement(R, M1, G1),
            copy_with_variable_replacement(R, N1, J1),
            copy_with_variable_replacement(N1, O1, L1),
            append(H1, M1, P1),
            append(P1, O1, Q1),
            copy_with_variable_replacement(S, R1, G1),
            copy_with_variable_replacement(S, S1, J1),
            append(S1, Q1, T1),
            append([chr_pp_active_constraint(F)|R1], T1, U1),
            list2conj(I1, V1),
            copy_term((H1,Q1,U1,V1,F), (W1,_,X1,Y1,Z1)),
            term_variables(W1-Z1, A2),
            flatten_stuff(X1, B2),
            flatten_stuff(Y1, C2),
            (   V1\=chr_pp_void_info,
                unify_stuff(A2, B2, C2), !,
                (   guard_entailment:entails_guard(X1,Y1) ->
                    passive(A, A1)
                ;   true
                )
            ;   true
            ), !,
            next_occ_in_rule(A, B, Y, A1, H1, F)
        ).
'next_occ_in_rule/6__0'(_, _, _, _, _, _, _) :- !.
multiple_occ_constraints_checked(A) :-
        'multiple_occ_constraints_checked/1__0'(A, _).
'multiple_occ_constraints_checked/1__0'(A, _) :-
        chr_pp_flag(occurrence_subsumption, on),
        nb_getval('$chr_store_global_ground_chr_translate:rule/2', C),
        'chr sbag_member'(B, C),
        B=suspension(_,F,_,_,_,_,D,E),
        F=mutable(active),
        '$via1_multi_hash_occurrence/4-3'(D, U),
        '$via1_multi_hash_occurrence/4-3'(D, N),
        '$via1_multi_hash_prev_guard_list/7-1'(D, H),
        'chr sbag_member'(G, H),
        G=suspension(_,L,_,_,_,_,I,J,_,_,_,_,K),
        L=mutable(active),
        I==D,
        J==0,
        K== [],
        'chr sbag_member'(M, N),
        M=suspension(_,S,_,_,_,_,O,P,Q,R),
        S=mutable(active),
        Q==D,
        'chr sbag_member'(T, U),
        T=suspension(_,Y,_,_,_,_,V,W,X,_),
        Y=mutable(active),
        T\==M,
        V==O,
        X==D,
        P<W,
        E=pragma(rule(Z,_,_,_),_,_,_,D),
        Z\== [],
        \+memberchk_eq(O,A), !,
        first_occ_in_rule(D, O, P, R),
        multiple_occ_constraints_checked([O|A]).
'multiple_occ_constraints_checked/1__0'(_, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', B),
        'chr sbag_member'(A, B),
        A=suspension(_,E,_,_,_,_,_,C,_,_,_,_,D),
        E=mutable(active),
        C==0,
        D== [], !,
        '$chr_translate__remove_constraint_internal'(A, _, F),
        (   F==yes ->
            '$delete_from_store_prev_guard_list/7'(A)
        ;   true
        ).
'multiple_occ_constraints_checked/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'multiple_occ_constraints_checked/1__0'(A,B), multiple_occ_constraints_checked(A), [A]),
        '$insert_in_store_multiple_occ_constraints_checked/1'(B).
type_definition(A, B) :-
        'type_definition/2__0'(A, B, _).
'type_definition/2__0'(A, B, C) :-
        (   var(C) ->
            '$chr_translate__insert_constraint_internal'(E, D, C, chr_translate:'type_definition/2__0'(A,B,C), type_definition(A,B), [A,B])
        ;   '$chr_translate__activate_constraint'(E, D, C, _)
        ),
        (   E==yes ->
            '$insert_in_store_type_definition/2'(C),
            'attach_type_definition/2'(D, C)
        ;   true
        ).
type_alias(A, B) :-
        'type_alias/2__0'(A, B, _).
'type_alias/2__0'(A, B, C) :-
        nonvar(B),
        nonvar(A),
        functor(A, D, E),
        functor(B, D, E),
        copy_term((A,B), (F,G)),
        oneway_unification(G, F), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, H, I),
            (   I==yes ->
                '$delete_from_store_type_alias/2'(C),
                'detach_type_alias/2'(H, C)
            ;   true
            )
        ),
        chr_error(type_error, 'Cyclic alias definition: "~w".\n', [A==B]).
'type_alias/2__0'(A, B, C) :-
        nonvar(A),
        'chr default_store'(F),
        get_attr(F, chr_translate, E),
        E=v(H,_,_,_,G,_),
        H/\8=:=8,
        'chr sbag_member'(D, G),
        D=suspension(_,K,_,_,_,_,I,J),
        K=mutable(active),
        nonvar(I),
        functor(A, L, M),
        functor(I, L, M),
        \+A\=I, !,
        '$chr_translate__remove_constraint_internal'(D, P, Q),
        (   Q==yes ->
            '$delete_from_store_type_alias/2'(D),
            'detach_type_alias/2'(P, D)
        ;   true
        ),
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, R, S),
            (   S==yes ->
                '$delete_from_store_type_alias/2'(C),
                'detach_type_alias/2'(R, C)
            ;   true
            )
        ),
        copy_term_nat(A, N),
        copy_term_nat(I, O),
        N=O,
        chr_error(type_error, 'Ambiguous type aliases: you have defined \n             "~w"\n             "~w"\n         resulting in two definitions for "~w".\n', [A==B,I==J,N]).
'type_alias/2__0'(A, B, C) :-
        nonvar(A),
        'chr default_store'(F),
        get_attr(F, chr_translate, E),
        E=v(H,_,_,_,G,_),
        H/\8=:=8,
        'chr sbag_member'(D, G),
        D=suspension(_,K,_,_,_,_,I,J),
        K=mutable(active),
        nonvar(I),
        functor(I, L, M),
        functor(A, L, M),
        \+I\=A, !,
        '$chr_translate__remove_constraint_internal'(D, P, Q),
        (   Q==yes ->
            '$delete_from_store_type_alias/2'(D),
            'detach_type_alias/2'(P, D)
        ;   true
        ),
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, R, S),
            (   S==yes ->
                '$delete_from_store_type_alias/2'(C),
                'detach_type_alias/2'(R, C)
            ;   true
            )
        ),
        copy_term_nat(I, N),
        copy_term_nat(A, O),
        N=O,
        chr_error(type_error, 'Ambiguous type aliases: you have defined \n             "~w"\n             "~w"\n         resulting in two definitions for "~w".\n', [I==J,A==B,N]).
'type_alias/2__0'(A, B, C) :-
        nonvar(B),
        'chr default_store'(F),
        get_attr(F, chr_translate, E),
        E=v(H,_,_,_,G,_),
        H/\8=:=8,
        'chr sbag_member'(D, G),
        D=suspension(_,K,_,_,_,_,I,J),
        K=mutable(active),
        nonvar(I),
        functor(I, L, M),
        functor(B, L, M),
        copy_term_nat((A,B,I,J), (N,O,P,Q)),
        oneway_unification(O, P), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, R, S),
            (   S==yes ->
                '$delete_from_store_type_alias/2'(C),
                'detach_type_alias/2'(R, C)
            ;   true
            )
        ),
        chr_info(type_information, 'Inferring "~w" from "~w" and "~w".\n', [N==Q,A==B,I==J]),
        type_alias(N, Q).
'type_alias/2__0'(A, B, C) :-
        'chr default_store'(E),
        get_attr(E, chr_translate, D),
        D=v(G,_,_,_,F,_),
        G/\8=:=8, !,
        (   var(C) ->
            '$chr_translate__allocate_constraint'(chr_translate:'type_alias/2__0'(A,B,C), C, type_alias(A,B), [A,B])
        ;   true
        ),
        'type_alias/2__0__0'(F, A, B, C).
'type_alias/2__0__0'([], A, B, C) :-
        'type_alias/2__1'(A, B, C).
'type_alias/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            nonvar(G),
            nonvar(A),
            functor(A, K, L),
            functor(G, K, L),
            copy_term_nat((F,G,A,B), (M,N,O,P)),
            oneway_unification(N, O) ->
            '$chr_translate__remove_constraint_internal'(D, I, J),
            (   J==yes ->
                '$delete_from_store_type_alias/2'(D),
                'detach_type_alias/2'(I, D)
            ;   true
            ),
            '$chr_translate__activate_constraint'(R, Q, C, S),
            (   R==yes ->
                '$insert_in_store_type_alias/2'(C),
                'attach_type_alias/2'(Q, C)
            ;   true
            ),
            chr_info(type_information, 'Inferring "~w" from "~w" and "~w".\n', [M==P,F==G,A==B]),
            type_alias(M, P),
            (   C=suspension(_,T,_,U,_,_,_,_),
                T=mutable(active),
                U=mutable(S) ->
                'chr update_mutable'(inactive, T),
                'type_alias/2__0__0'(E, A, B, C)
            ;   true
            )
        ;   'type_alias/2__0__0'(E, A, B, C)
        ).
'type_alias/2__0'(A, B, C) :-
        (   var(C) ->
            '$chr_translate__allocate_constraint'(chr_translate:'type_alias/2__0'(A,B,C), C, type_alias(A,B), [A,B])
        ;   true
        ),
        'type_alias/2__1'(A, B, C).
'type_alias/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(C, B, A, _),
        (   C==yes ->
            '$insert_in_store_type_alias/2'(A),
            'attach_type_alias/2'(B, A)
        ;   true
        ).
constraint_type(A, B) :-
        'constraint_type/2__0'(A, B, _).
'constraint_type/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'constraint_type/2__0'(A,B,C), constraint_type(A,B), [A,B]),
        '$insert_in_store_constraint_type/2'(C).
get_type_definition(A, B) :-
        'get_type_definition/2__0'(A, B, _).
'get_type_definition/2__0'(A, _, _) :-
        \+ground(A), !,
        chr_error(type_error, 'Non-ground type in constraint definition: "~w".\n', [A]).
'get_type_definition/2__0'(A, B, _) :-
        nonvar(A),
        'chr default_store'(E),
        get_attr(E, chr_translate, D),
        D=v(G,_,_,_,F,_),
        G/\8=:=8,
        'chr sbag_member'(C, F),
        C=suspension(_,J,_,_,_,_,H,I),
        J=mutable(active),
        nonvar(H),
        functor(H, K, L),
        functor(A, K, L),
        copy_term_nat((H,I), (M,N)),
        M=A, !,
        (   get_type_definition(N, B) ->
            true
        ;   chr_error(type_error, 'Could not find type definition for "~w" (accessed via alias "~w").\n', [N,M]),
            fail
        ).
'get_type_definition/2__0'(A, B, _) :-
        nonvar(A),
        'chr default_store'(E),
        get_attr(E, chr_translate, D),
        D=v(G,_,_,F,_,_),
        G/\4=:=4,
        'chr sbag_member'(C, F),
        C=suspension(_,J,_,_,_,_,H,I),
        J=mutable(active),
        nonvar(H),
        functor(H, K, L),
        functor(A, K, L),
        copy_term_nat((H,I), (M,N)),
        M=A, !,
        B=N.
'get_type_definition/2__0'(A, B, _) :-
        builtin_type(A, _, _), !,
        B=[A].
'get_type_definition/2__0'(_, _, _) :- !,
        fail.
get_constraint_type(A, B) :-
        'get_constraint_type/2__0'(A, B, _).
'get_constraint_type/2__0'(A, B, _) :-
        '$via1_multi_hash_constraint_type/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        B=F.
'get_constraint_type/2__0'(_, _, _) :- !,
        fail.
add_type_information(A, B, C) :-
        'add_type_information/3__0'(A, B, C, _).
'add_type_information/3__0'(A, B, C, _) :-
        A== [],
        B== [], !,
        C=true.
'add_type_information/3__0'(A, B, C, _) :-
        nonvar(A),
        A=[D|E],
        nonvar(B),
        B=[F|G],
        nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', I),
        'chr sbag_member'(H, I),
        H=suspension(_,N,_,_,_,_,J,K),
        N=mutable(active),
        nonvar(J),
        J=L/M,
        functor(D, L, M), !,
        D=..[_|O],
        F=..[_|P],
        add_mode_info(K, O, Q),
        C=(Q,R),
        (   get_constraint_type(L/M, S) ->
            types2condition(S, O, P, K, T),
            list2conj(T, U),
            R=(U,V),
            add_type_information(E, G, V)
        ;   add_type_information(E, G, R)
        ).
'add_type_information/3__0'(A, _, _, _) :-
        nonvar(A),
        A=[B|_], !,
        functor(B, C, D),
        chr_error(internal, 'Mode information missing for ~w.\n', [C/D]).
'add_type_information/3__0'(A, B, C, D) :-
        '$chr_translate__insert_constraint_internal'(_, _, D, chr_translate:'add_type_information/3__0'(A,B,C,D), add_type_information(A,B,C), [A,B,C]),
        '$insert_in_store_add_type_information/3'(D).
stored(A, B, C) :-
        'stored/3__0'(A, B, C, _).
'stored/3__0'(A, B, C, _) :-
        C==yes,
        '$via1_multi_hash_stored_complete/3-1'(A, Q),
        '$via1_multi_hash_occurrence/4-2'(B, E),
        'chr sbag_member'(D, E),
        D=suspension(_,J,_,_,_,_,F,G,H,I),
        J=mutable(active),
        F==A,
        G==B,
        '$via1_multi_hash_passive/2-12'(k(H,I), L),
        (   'chr sbag_member'(K, L),
            K=suspension(_,O,_,_,_,_,M,N),
            O=mutable(active),
            M==H,
            N==I ->
            true
        ),
        'chr sbag_member'(P, Q),
        P=suspension(_,U,_,_,_,_,R,S,T),
        U=mutable(active),
        R==A,
        B<S, !,
        '$chr_translate__remove_constraint_internal'(P, _, W),
        (   W==yes ->
            '$delete_from_store_stored_complete/3'(P)
        ;   true
        ),
        V is T-1,
        stored(A, B, maybe),
        stored_complete(A, S, V).
'stored/3__0'(A, B, C, _) :-
        C==yes,
        '$via1_multi_hash_ai_not_observed/2-12'(k(A,B), K),
        '$via1_multi_hash_stored_complete/3-1'(A, E),
        'chr sbag_member'(D, E),
        D=suspension(_,I,_,_,_,_,F,G,H),
        I=mutable(active),
        F==A,
        B<G,
        'chr sbag_member'(J, K),
        J=suspension(_,N,_,_,_,_,L,M),
        N=mutable(active),
        L==A,
        M==B, !,
        '$chr_translate__remove_constraint_internal'(D, _, P),
        (   P==yes ->
            '$delete_from_store_stored_complete/3'(D)
        ;   true
        ),
        O is H-1,
        stored(A, B, maybe),
        stored_complete(A, G, O).
'stored/3__0'(A, B, C, D) :-
        '$chr_translate__insert_constraint_internal'(_, _, D, chr_translate:'stored/3__0'(A,B,C,D), stored(A,B,C), [A,B,C]),
        '$insert_in_store_stored/3'(D).
stored_completing(A, B, C) :-
        'stored_completing/3__0'(A, B, C, _).
'stored_completing/3__0'(A, B, C, _) :-
        '$via1_multi_hash_stored/3-2'(B, E),
        'chr sbag_member'(D, E),
        D=suspension(_,I,_,_,_,_,F,G,H),
        I=mutable(active),
        F==A,
        G==B,
        H==yes, !,
        J is B+1,
        K is C+1,
        stored_completing(A, J, K).
'stored_completing/3__0'(A, B, C, _) :-
        '$via1_multi_hash_stored/3-2'(B, E),
        'chr sbag_member'(D, E),
        D=suspension(_,I,_,_,_,_,F,G,H),
        I=mutable(active),
        F==A,
        G==B,
        H==maybe, !,
        J is B+1,
        stored_completing(A, J, C).
'stored_completing/3__0'(A, B, C, _) :-
        '$via1_multi_hash_stored/3-2'(B, E),
        'chr sbag_member'(D, E),
        D=suspension(_,I,_,_,_,_,F,G,H),
        I=mutable(active),
        F==A,
        G==B,
        H==no, !,
        stored_complete(A, B, C).
'stored_completing/3__0'(A, B, C, _) :- !,
        stored_complete(A, B, C).
stored_complete(A, B, C) :-
        'stored_complete/3__0'(A, B, C, _).
'stored_complete/3__0'(A, B, C, _) :-
        '$via1_multi_hash_occurrence/4-1'(A, E),
        'chr sbag_member'(D, E),
        D=suspension(_,J,_,_,_,_,F,G,H,I),
        J=mutable(active),
        F==A,
        G<B,
        '$via1_multi_hash_stored/3-2'(G, Q),
        '$via1_multi_hash_passive/2-12'(k(H,I), L),
        (   'chr sbag_member'(K, L),
            K=suspension(_,O,_,_,_,_,M,N),
            O=mutable(active),
            M==H,
            N==I ->
            true
        ),
        'chr sbag_member'(P, Q),
        P=suspension(_,U,_,_,_,_,R,S,T),
        U=mutable(active),
        R==A,
        S==G,
        T==yes, !,
        '$chr_translate__remove_constraint_internal'(P, _, W),
        (   W==yes ->
            '$delete_from_store_stored/3'(P)
        ;   true
        ),
        V is C-1,
        stored(A, G, maybe),
        stored_complete(A, B, V).
'stored_complete/3__0'(A, B, C, _) :-
        '$via1_multi_hash_stored/3-1'(A, E),
        'chr sbag_member'(D, E),
        D=suspension(_,I,_,_,_,_,F,G,H),
        I=mutable(active),
        F==A,
        H==yes,
        G<B,
        '$via1_multi_hash_ai_not_observed/2-12'(k(A,G), K),
        'chr sbag_member'(J, K),
        J=suspension(_,N,_,_,_,_,L,M),
        N=mutable(active),
        L==A,
        M==G, !,
        '$chr_translate__remove_constraint_internal'(D, _, P),
        (   P==yes ->
            '$delete_from_store_stored/3'(D)
        ;   true
        ),
        O is C-1,
        stored(A, G, maybe),
        stored_complete(A, B, O).
'stored_complete/3__0'(A, B, C, D) :-
        C==0,
        '$via1_multi_hash_max_occurrence/2-1'(A, E), !,
        '$chr_translate__allocate_constraint'(chr_translate:'stored_complete/3__0'(A,B,C,D), D, stored_complete(A,B,C), [A,B,C]),
        'stored_complete/3__0__0'(E, A, B, C, D).
'stored_complete/3__0__0'([], A, B, C, D) :-
        'stored_complete/3__1'(A, B, C, D).
'stored_complete/3__0__0'([G|J], A, B, C, D) :-
        (   G=suspension(_,H,_,_,_,_,E,F),
            H=mutable(active),
            E==A,
            '$via1_multi_hash_occurrence/4-1'(A, I) ->
            'stored_complete/3__0__1'(I, F, G, J, A, B, C, D)
        ;   'stored_complete/3__0__0'(J, A, B, C, D)
        ).
'stored_complete/3__0__1'([], _, _, E, A, B, C, D) :-
        'stored_complete/3__0__0'(E, A, B, C, D).
'stored_complete/3__0__1'([J|M], F, A, G, B, C, D, E) :-
        (   J=suspension(_,K,_,_,_,_,H,_,I,_),
            K=mutable(active),
            H==B,
            '$via1_multi_hash_occurrence/4-3'(I, L) ->
            'stored_complete/3__0__2'(L, I, J, M, F, A, G, B, C, D, E)
        ;   'stored_complete/3__0__1'(M, F, A, G, B, C, D, E)
        ).
'stored_complete/3__0__2'([], _, _, H, E, F, G, A, B, C, D) :-
        'stored_complete/3__0__1'(H, E, F, G, A, B, C, D).
'stored_complete/3__0__2'([N|O], I, A, J, G, B, H, C, D, E, F) :-
        (   N=suspension(_,M,_,_,_,_,_,_,K,L),
            M=mutable(active),
            N\==A,
            K==I,
            T=t(119,B,A,F,N),
            'chr novel_production'(B, T),
            'chr novel_production'(A, T),
            'chr novel_production'(F, T),
            'chr novel_production'(N, T),
            D=<G ->
            'chr extend_history'(F, T),
            '$chr_translate__activate_constraint'(P, _, F, Q),
            (   P==yes ->
                '$insert_in_store_stored_complete/3'(F)
            ;   true
            ),
            passive(I, L),
            (   F=suspension(_,R,_,S,_,_,_,_,_),
                R=mutable(active),
                S=mutable(Q) ->
                'chr update_mutable'(inactive, R),
                'stored_complete/3__0__2'(O, I, A, J, G, B, H, C, D, E, F)
            ;   true
            )
        ;   'stored_complete/3__0__2'(O, I, A, J, G, B, H, C, D, E, F)
        ).
'stored_complete/3__0'(A, B, C, D) :-
        '$chr_translate__allocate_constraint'(chr_translate:'stored_complete/3__0'(A,B,C,D), D, stored_complete(A,B,C), [A,B,C]),
        'stored_complete/3__1'(A, B, C, D).
'stored_complete/3__1'(A, B, C, D) :-
        '$via1_multi_hash_occurrence/4-1'(A, E), !,
        'stored_complete/3__1__0'(E, A, B, C, D).
'stored_complete/3__1__0'([], A, B, C, D) :-
        'stored_complete/3__2'(A, B, C, D).
'stored_complete/3__1__0'([J|K], A, B, C, D) :-
        (   J=suspension(_,I,_,_,_,_,E,F,G,H),
            I=mutable(active),
            E==A,
            P=t(128,D,J),
            'chr novel_production'(D, P),
            'chr novel_production'(J, P),
            F>B ->
            'chr extend_history'(D, P),
            '$chr_translate__activate_constraint'(L, _, D, M),
            (   L==yes ->
                '$insert_in_store_stored_complete/3'(D)
            ;   true
            ),
            passive(G, H),
            (   D=suspension(_,N,_,O,_,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'stored_complete/3__1__0'(K, A, B, C, D)
            ;   true
            )
        ;   'stored_complete/3__1__0'(K, A, B, C, D)
        ).
'stored_complete/3__1'(A, B, C, D) :-
        'stored_complete/3__2'(A, B, C, D).
'stored_complete/3__2'(_, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_stored_complete/3'(A)
        ;   true
        ).
is_stored(A) :-
        'is_stored/1__0'(A, _).
'is_stored/1__0'(A, _) :-
        '$via1_multi_hash_stored_complete/3-1'(A, H),
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A ->
            true
        ),
        'chr sbag_member'(G, H),
        G=suspension(_,L,_,_,_,_,I,J,K),
        L=mutable(active),
        I==A,
        K==0,
        J=<E, !,
        fail.
'is_stored/1__0'(_, _) :- !.
is_finally_stored(A) :-
        'is_finally_stored/1__0'(A, _).
'is_finally_stored/1__0'(A, _) :-
        '$via1_multi_hash_stored_complete/3-1'(A, H),
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==A ->
            true
        ),
        'chr sbag_member'(G, H),
        G=suspension(_,K,_,_,_,_,I,J,_),
        K=mutable(active),
        I==A,
        J=<E, !,
        fail.
'is_finally_stored/1__0'(_, _) :- !.
check_all_passive(A, B) :-
        'check_all_passive/2__0'(A, B, _).
'check_all_passive/2__0'(A, B, _) :-
        nonvar(B),
        B=[C|D],
        '$via1_multi_hash_passive/2-12'(k(A,C), F),
        (   'chr sbag_member'(E, F),
            E=suspension(_,I,_,_,_,_,G,H),
            I=mutable(active),
            G==A,
            H==C ->
            true
        ), !,
        check_all_passive(A, D).
'check_all_passive/2__0'(A, B, _) :-
        B== [],
        '$via1_multi_hash_rule/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A, !,
        chr_warning(weird_program, 'All heads passive in ~@.\n\tThis rule never fires. Please check your program.\n', [format_rule(F)]).
'check_all_passive/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'check_all_passive/2__0'(A,B,C), check_all_passive(A,B), [A,B]),
        '$insert_in_store_check_all_passive/2'(C).
constraints_code1(A, B, C) :-
        'constraints_code1/3__0'(A, B, C, _).
'constraints_code1/3__0'(A, B, C, _) :-
        A== [], !,
        B=C.
'constraints_code1/3__0'(A, B, C, _) :-
        nonvar(A),
        A=[D|E], !,
        constraint_code(D, B, F),
        constraints_code1(E, F, C).
'constraints_code1/3__0'(A, B, C, D) :-
        '$chr_translate__insert_constraint_internal'(_, _, D, chr_translate:'constraints_code1/3__0'(A,B,C,D), constraints_code1(A,B,C), [A,B,C]),
        '$insert_in_store_constraints_code1/3'(D).
constraint_code(A, B, C) :-
        'constraint_code/3__0'(A, B, C, _).
'constraint_code/3__0'(A, B, C, _) :- !,
        writeln(constraint_code(A)),
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(A),
                (   has_active_occurrence(A)
                ;   chr_pp_flag(late_allocation, off)
                ),
                (   may_trigger(A)
                ;   get_allocation_occurrence(A, D),
                    get_max_occurrence(A, E),
                    E>=D
                )
            ) ->
            constraint_prelude(A, F),
            B=[F|G]
        ;   B=G
        ),
        H=[0],
        occurrences_code(A, 1, H, I, G, J),
        gen_cond_attach_clause(A, I, J, C).
has_active_occurrence(A) :-
        'has_active_occurrence/1__0'(A, _).
'has_active_occurrence/1__0'(A, _) :- !,
        has_active_occurrence(A, 1).
has_active_occurrence(A, B) :-
        'has_active_occurrence/2__0'(A, B, _).
'has_active_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A ->
            true
        ),
        B>F, !,
        fail.
'has_active_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, D),
        'chr sbag_member'(C, D),
        C=suspension(_,I,_,_,_,_,E,F,G,H),
        I=mutable(active),
        E==A,
        F==B,
        '$via1_multi_hash_passive/2-12'(k(G,H), K),
        (   'chr sbag_member'(J, K),
            J=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==G,
            M==H ->
            true
        ), !,
        O is B+1,
        has_active_occurrence(A, O).
'has_active_occurrence/2__0'(_, _, _) :- !.
use_auxiliary_predicate(A) :-
        'use_auxiliary_predicate/1__0'(A, _).
'use_auxiliary_predicate/1__0'(A, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,E,_,_,_,_,D),
            E=mutable(active),
            D==A ->
            true
        ), !.
'use_auxiliary_predicate/1__0'(A, B) :-
        '$chr_translate__insert_constraint_internal'(_, _, B, chr_translate:'use_auxiliary_predicate/1__0'(A,B), use_auxiliary_predicate(A), [A]),
        '$insert_in_store_use_auxiliary_predicate/1'(B).
use_auxiliary_predicate(A, B) :-
        'use_auxiliary_predicate/2__0'(A, B, _).
'use_auxiliary_predicate/2__0'(A, B, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'use_auxiliary_predicate/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'use_auxiliary_predicate/2__0'(A,B,C), use_auxiliary_predicate(A,B), [A,B]),
        '$insert_in_store_use_auxiliary_predicate/2'(C).
is_used_auxiliary_predicate(A) :-
        'is_used_auxiliary_predicate/1__0'(A, _).
'is_used_auxiliary_predicate/1__0'(A, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,E,_,_,_,_,D),
            E=mutable(active),
            D==A ->
            true
        ), !.
'is_used_auxiliary_predicate/1__0'(A, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-1'(A, C),
        'chr sbag_member'(B, C),
        B=suspension(_,E,_,_,_,_,D,_),
        E=mutable(active),
        D==A, !.
'is_used_auxiliary_predicate/1__0'(_, _) :- !,
        fail.
is_used_auxiliary_predicate(A, B) :-
        'is_used_auxiliary_predicate/2__0'(A, B, _).
'is_used_auxiliary_predicate/2__0'(A, _, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,E,_,_,_,_,D),
            E=mutable(active),
            D==A ->
            true
        ), !.
'is_used_auxiliary_predicate/2__0'(A, B, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'is_used_auxiliary_predicate/2__0'(_, _, _) :- !,
        fail.
occurrences_code(A, B, C, D, E, F) :-
        'occurrences_code/6__0'(A, B, C, D, E, F, _).
'occurrences_code/6__0'(A, B, C, D, E, F, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, H),
        (   'chr sbag_member'(G, H),
            G=suspension(_,K,_,_,_,_,I,J),
            K=mutable(active),
            I==A ->
            true
        ),
        B>J, !,
        D=C,
        E=F.
'occurrences_code/6__0'(A, B, C, D, E, F, _) :- !,
        occurrence_code(A, B, C, G, E, H),
        I is B+1,
        occurrences_code(A, I, G, D, H, F).
occurrence_code(A, B, C, D, E, F) :-
        'occurrence_code/6__0'(A, B, C, D, E, F, _).
'occurrence_code/6__0'(A, B, C, D, E, F, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, H),
        'chr sbag_member'(G, H),
        G=suspension(_,M,_,_,_,_,I,J,K,L),
        M=mutable(active),
        I==A,
        J==B,
        '$via1_multi_hash_passive/2-12'(k(K,L), O),
        (   'chr sbag_member'(N, O),
            N=suspension(_,R,_,_,_,_,P,Q),
            R=mutable(active),
            P==K,
            Q==L ->
            true
        ), !,
        D=C,
        E=F.
'occurrence_code/6__0'(A, B, C, D, E, F, _) :-
        '$via1_multi_hash_occurrence/4-2'(B, H),
        'chr sbag_member'(G, H),
        G=suspension(_,M,_,_,_,_,I,J,K,L),
        M=mutable(active),
        I==A,
        J==B,
        '$via1_multi_hash_rule/2-1'(K, O),
        'chr sbag_member'(N, O),
        N=suspension(_,R,_,_,_,_,P,Q),
        R=mutable(active),
        P==K, !,
        Q=pragma(rule(S,T,_,_),ids(U,V),_,_,_),
        (   select2(L, W, U, S, X, Y) ->
            D=C,
            head1_code(W, Y, X, Q, A, B, C, E, F)
        ;   select2(L, Z, V, T, A1, B1) ->
            head2_code(Z, B1, A1, Q, A, B, C, E, C1),
            inc_id(C, D),
            (   unconditional_occurrence(A, B) ->
                C1=F
            ;   gen_alloc_inc_clause(A, B, C, C1, F)
            )
        ).
'occurrence_code/6__0'(A, B, _, _, _, _, _) :- !,
        chr_error(internal, 'occurrence_code/6: missing information to compile ~w:~w\n', [A,B]).
functional_dependency(A, B, C, D) :-
        'functional_dependency/4__0'(A, B, C, D, _).
'functional_dependency/4__0'(A, B, C, D, _) :-
        B>1,
        '$via1_multi_hash_occurrence/4-3'(B, K),
        '$via1_multi_hash_allocation_occurrence/2-1'(A, F),
        'chr sbag_member'(E, F),
        E=suspension(_,I,_,_,_,_,G,H),
        I=mutable(active),
        G==A,
        'chr sbag_member'(J, K),
        J=suspension(_,O,_,_,_,_,L,M,N,_),
        O=mutable(active),
        L==A,
        N==B,
        H>M, !,
        functional_dependency(A, 1, C, D).
'functional_dependency/4__0'(A, B, C, D, E) :-
        '$chr_translate__insert_constraint_internal'(_, _, E, chr_translate:'functional_dependency/4__0'(A,B,C,D,E), functional_dependency(A,B,C,D), [A,B,C,D]),
        '$insert_in_store_functional_dependency/4'(E).
get_functional_dependency(A, B, C, D) :-
        'get_functional_dependency/4__0'(A, B, C, D, _).
'get_functional_dependency/4__0'(A, B, C, D, _) :-
        '$via1_multi_hash_functional_dependency/4-1'(A, F),
        'chr sbag_member'(E, F),
        E=suspension(_,K,_,_,_,_,G,H,I,J),
        K=mutable(active),
        G==A,
        B>=H, !,
        C=I,
        D=J.
'get_functional_dependency/4__0'(_, _, _, _, _) :- !,
        fail.
initial_call_pattern(A) :-
        'initial_call_pattern/1__0'(A, _).
'initial_call_pattern/1__0'(A, _) :-
        '$via1_multi_hash_initial_call_pattern/1-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,E,_,_,_,_,D),
            E=mutable(active),
            D==A ->
            true
        ), !.
'initial_call_pattern/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'initial_call_pattern/1__0'(A,B), B, initial_call_pattern(A), [A]),
        'chr novel_production'(B, 166), !,
        'chr extend_history'(B, 166),
        '$chr_translate__activate_constraint'(C, _, B, D),
        (   C==yes ->
            '$insert_in_store_initial_call_pattern/1'(B)
        ;   true
        ),
        call_pattern(A),
        (   B=suspension(_,E,_,F,_,_,_),
            E=mutable(active),
            F=mutable(D) ->
            'chr update_mutable'(inactive, E),
            'initial_call_pattern/1__1'(A, B)
        ;   true
        ).
'initial_call_pattern/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'initial_call_pattern/1__0'(A,B), B, initial_call_pattern(A), [A]),
        'initial_call_pattern/1__1'(A, B).
'initial_call_pattern/1__1'(A, B) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, C), !,
        'initial_call_pattern/1__1__0'(C, A, B).
'initial_call_pattern/1__1__0'([], A, B) :-
        'initial_call_pattern/1__2'(A, B).
'initial_call_pattern/1__1__0'([E|H], A, B) :-
        (   E=suspension(_,F,_,_,_,_,C,D),
            F=mutable(active),
            C==A,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', G) ->
            'initial_call_pattern/1__1__1'(G, D, E, H, A, B)
        ;   'initial_call_pattern/1__1__0'(H, A, B)
        ).
'initial_call_pattern/1__1__1'([], _, _, C, A, B) :-
        'initial_call_pattern/1__1__0'(C, A, B).
'initial_call_pattern/1__1__1'([H|I], D, A, E, B, C) :-
        (   H=suspension(_,G,_,_,_,_,F),
            G=mutable(active),
            N=t(167,C,A,H),
            'chr novel_production'(C, N),
            'chr novel_production'(A, N),
            'chr novel_production'(H, N) ->
            'chr extend_history'(C, N),
            '$chr_translate__activate_constraint'(J, _, C, K),
            (   J==yes ->
                '$insert_in_store_initial_call_pattern/1'(C)
            ;   true
            ),
            ai_observation_schedule_new_calls(F, D),
            (   C=suspension(_,L,_,M,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'initial_call_pattern/1__1__1'(I, D, A, E, B, C)
            ;   true
            )
        ;   'initial_call_pattern/1__1__1'(I, D, A, E, B, C)
        ).
'initial_call_pattern/1__1'(A, B) :-
        'initial_call_pattern/1__2'(A, B).
'initial_call_pattern/1__2'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_initial_call_pattern/1'(A)
        ;   true
        ).
call_pattern(A) :-
        'call_pattern/1__0'(A, _).
'call_pattern/1__0'(A, _) :-
        '$via1_multi_hash_call_pattern/1-1'(A, C),
        (   'chr sbag_member'(B, C),
            B=suspension(_,E,_,_,_,_,D),
            E=mutable(active),
            D==A ->
            true
        ), !.
'call_pattern/1__0'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        C== [],
        '$chr_translate__allocate_constraint'(chr_translate:'call_pattern/1__0'(A,B), B, call_pattern(A), [A]),
        'chr novel_production'(B, 170), !,
        'chr extend_history'(B, 170),
        '$chr_translate__activate_constraint'(E, _, B, F),
        (   E==yes ->
            '$insert_in_store_call_pattern/1'(B)
        ;   true
        ),
        final_answer_pattern(odom([],D), odom([],D)),
        (   B=suspension(_,G,_,H,_,_,_),
            G=mutable(active),
            H=mutable(F) ->
            'chr update_mutable'(inactive, G),
            'call_pattern/1__1'(A, B)
        ;   true
        ).
'call_pattern/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'call_pattern/1__0'(A,B), B, call_pattern(A), [A]),
        'call_pattern/1__1'(A, B).
'call_pattern/1__1'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        nonvar(C),
        C=[E|F],
        'chr novel_production'(B, 171), !,
        'chr extend_history'(B, 171),
        '$chr_translate__activate_constraint'(H, _, B, I),
        (   H==yes ->
            '$insert_in_store_call_pattern/1'(B)
        ;   true
        ),
        G=odom(E,D),
        depends_on_goal(odom([E|F],D), G),
        call_pattern(G),
        (   B=suspension(_,J,_,K,_,_,_),
            J=mutable(active),
            K=mutable(I) ->
            'chr update_mutable'(inactive, J),
            'call_pattern/1__2'(A, B)
        ;   true
        ).
'call_pattern/1__1'(A, B) :-
        'call_pattern/1__2'(A, B).
'call_pattern/1__2'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        C==builtin,
        'chr novel_production'(B, 174), !,
        'chr extend_history'(B, 174),
        '$chr_translate__activate_constraint'(F, _, B, G),
        (   F==yes ->
            '$insert_in_store_call_pattern/1'(B)
        ;   true
        ),
        ord_empty(E),
        final_answer_pattern(odom(builtin,D), odom([],E)),
        (   B=suspension(_,H,_,I,_,_,_),
            H=mutable(active),
            I=mutable(G) ->
            'chr update_mutable'(inactive, H),
            'call_pattern/1__3'(A, B)
        ;   true
        ).
'call_pattern/1__2'(A, B) :-
        'call_pattern/1__3'(A, B).
'call_pattern/1__3'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        nonvar(C),
        C=occ(E,F),
        '$via1_multi_hash_max_occurrence/2-1'(E, G), !,
        'call_pattern/1__3__0'(G, A, B, E, F, D).
'call_pattern/1__3__0'([], A, B, _, _, _) :-
        'call_pattern/1__4'(A, B).
'call_pattern/1__3__0'([I|J], A, B, D, E, C) :-
        (   I=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            F==D,
            O=t(175,B,I),
            'chr novel_production'(B, O),
            'chr novel_production'(I, O),
            E>G ->
            'chr extend_history'(B, O),
            '$chr_translate__activate_constraint'(K, _, B, L),
            (   K==yes ->
                '$insert_in_store_call_pattern/1'(B)
            ;   true
            ),
            final_answer_pattern(odom(occ(D,E),C), odom([],C)),
            (   B=suspension(_,M,_,N,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'call_pattern/1__3__0'(J, A, B, D, E, C)
            ;   true
            )
        ;   'call_pattern/1__3__0'(J, A, B, D, E, C)
        ).
'call_pattern/1__3'(A, B) :-
        'call_pattern/1__4'(A, B).
'call_pattern/1__4'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', E), !,
        'call_pattern/1__4__0'(E, A, B, C, D).
'call_pattern/1__4__0'([], A, B, _, _) :-
        'call_pattern/1__5'(A, B).
'call_pattern/1__4__0'([G|H], A, B, C, D) :-
        (   G=suspension(_,F,_,_,_,_,E),
            F=mutable(active),
            N=t(176,B,G),
            'chr novel_production'(B, N),
            'chr novel_production'(G, N),
            memberchk_eq(C, E) ->
            'chr extend_history'(B, N),
            '$chr_translate__activate_constraint'(J, _, B, K),
            (   J==yes ->
                '$insert_in_store_call_pattern/1'(B)
            ;   true
            ),
            I=odom(occ(C,1),D),
            call_pattern(I),
            depends_on(odom(C,D), I),
            (   B=suspension(_,L,_,M,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'call_pattern/1__4__0'(H, A, B, C, D)
            ;   true
            )
        ;   'call_pattern/1__4__0'(H, A, B, C, D)
        ).
'call_pattern/1__4'(A, B) :-
        'call_pattern/1__5'(A, B).
'call_pattern/1__5'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        nonvar(C),
        C=occ(E,F),
        '$via1_multi_hash_occurrence/4-2'(F, G), !,
        'call_pattern/1__5__0'(G, A, B, E, F, D).
'call_pattern/1__5__0'([], A, B, _, _, _) :-
        'call_pattern/1__6'(A, B).
'call_pattern/1__5__0'([J|M], A, B, D, E, C) :-
        (   J=suspension(_,K,_,_,_,_,F,G,H,I),
            K=mutable(active),
            F==D,
            G==E,
            '$via1_multi_hash_rule/2-1'(H, L) ->
            'call_pattern/1__5__1'(L, H, I, J, M, A, B, D, E, C)
        ;   'call_pattern/1__5__0'(M, A, B, D, E, C)
        ).
'call_pattern/1__5__1'([], _, _, _, F, A, B, D, E, C) :-
        'call_pattern/1__5__0'(F, A, B, D, E, C).
'call_pattern/1__5__1'([L|O], G, H, A, I, B, C, E, F, D) :-
        (   L=suspension(_,M,_,_,_,_,J,K),
            M=mutable(active),
            J==G,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', N) ->
            'call_pattern/1__5__2'(N, K, L, O, G, H, A, I, B, C, E, F, D)
        ;   'call_pattern/1__5__1'(O, G, H, A, I, B, C, E, F, D)
        ).
'call_pattern/1__5__2'([], _, _, J, F, G, H, I, A, B, D, E, C) :-
        'call_pattern/1__5__1'(J, F, G, H, I, A, B, D, E, C).
'call_pattern/1__5__2'([N|O], K, A, L, H, I, B, J, C, D, F, G, E) :-
        (   N=suspension(_,M,_,_,_,_,_),
            M=mutable(active),
            W=t(177,D,B,A,N),
            'chr novel_production'(D, W),
            'chr novel_production'(B, W),
            'chr novel_production'(A, W),
            'chr novel_production'(N, W),
            K=pragma(rule(_,_,_,_),ids(P,_),_,_,_),
            memberchk_eq(I, P),
            is_passive(H, I) ->
            'chr extend_history'(D, W),
            '$chr_translate__activate_constraint'(S, _, D, T),
            (   S==yes ->
                '$insert_in_store_call_pattern/1'(D)
            ;   true
            ),
            Q is G+1,
            R=odom(occ(F,Q),E),
            call_pattern(R),
            depends_on(odom(occ(F,G),E), R),
            (   D=suspension(_,U,_,V,_,_,_),
                U=mutable(active),
                V=mutable(T) ->
                'chr update_mutable'(inactive, U),
                'call_pattern/1__5__2'(O, K, A, L, H, I, B, J, C, D, F, G, E)
            ;   true
            )
        ;   'call_pattern/1__5__2'(O, K, A, L, H, I, B, J, C, D, F, G, E)
        ).
'call_pattern/1__5'(A, B) :-
        'call_pattern/1__6'(A, B).
'call_pattern/1__6'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        nonvar(C),
        C=occ(E,F),
        '$via1_multi_hash_occurrence/4-2'(F, G), !,
        'call_pattern/1__6__0'(G, A, B, E, F, D).
'call_pattern/1__6__0'([], A, B, _, _, _) :-
        'call_pattern/1__7'(A, B).
'call_pattern/1__6__0'([J|M], A, B, D, E, C) :-
        (   J=suspension(_,K,_,_,_,_,F,G,H,I),
            K=mutable(active),
            F==D,
            G==E,
            '$via1_multi_hash_rule/2-1'(H, L) ->
            'call_pattern/1__6__1'(L, H, I, J, M, A, B, D, E, C)
        ;   'call_pattern/1__6__0'(M, A, B, D, E, C)
        ).
'call_pattern/1__6__1'([], _, _, _, F, A, B, D, E, C) :-
        'call_pattern/1__6__0'(F, A, B, D, E, C).
'call_pattern/1__6__1'([L|O], G, H, A, I, B, C, E, F, D) :-
        (   L=suspension(_,M,_,_,_,_,J,K),
            M=mutable(active),
            J==G,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', N) ->
            'call_pattern/1__6__2'(N, K, L, O, G, H, A, I, B, C, E, F, D)
        ;   'call_pattern/1__6__1'(O, G, H, A, I, B, C, E, F, D)
        ).
'call_pattern/1__6__2'([], _, _, J, F, G, H, I, A, B, D, E, C) :-
        'call_pattern/1__6__1'(J, F, G, H, I, A, B, D, E, C).
'call_pattern/1__6__2'([O|P], K, A, L, H, I, B, J, C, D, F, G, E) :-
        (   O=suspension(_,N,_,_,_,_,M),
            N=mutable(active),
            H1=t(178,D,B,A,O),
            'chr novel_production'(D, H1),
            'chr novel_production'(B, H1),
            'chr novel_production'(A, H1),
            'chr novel_production'(O, H1),
            K=pragma(rule(Q,R,S,T),ids(U,_),_,_,_),
            memberchk_eq(I, U),
            \+is_passive(H,I) ->
            'chr extend_history'(D, H1),
            '$chr_translate__activate_constraint'(D1, _, D, E1),
            (   D1==yes ->
                '$insert_in_store_call_pattern/1'(D)
            ;   true
            ),
            once(select2(I,_,U,Q,_,V)),
            ai_observation_abstract_constraints(V, M, W),
            ai_observation_observe_list(odom([],E), W, odom([],X)),
            ai_observation_abstract_constraints(R, M, Y),
            ai_observation_observe_list(odom([],X), Y, odom([],Z)),
            ai_observation_abstract_goal_(Q, R, S, T, M, A1),
            call_pattern(odom(A1,Z)),
            B1 is G+1,
            C1=odom(occ(F,B1),E),
            call_pattern(C1),
            depends_on_as(odom(occ(F,G),E), odom(A1,Z), C1),
            final_answer_pattern(odom(occ(F,G),E), odom([],E)),
            (   D=suspension(_,F1,_,G1,_,_,_),
                F1=mutable(active),
                G1=mutable(E1) ->
                'chr update_mutable'(inactive, F1),
                'call_pattern/1__6__2'(P, K, A, L, H, I, B, J, C, D, F, G, E)
            ;   true
            )
        ;   'call_pattern/1__6__2'(P, K, A, L, H, I, B, J, C, D, F, G, E)
        ).
'call_pattern/1__6'(A, B) :-
        'call_pattern/1__7'(A, B).
'call_pattern/1__7'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        nonvar(C),
        C=occ(E,F),
        '$via1_multi_hash_occurrence/4-2'(F, G), !,
        'call_pattern/1__7__0'(G, A, B, E, F, D).
'call_pattern/1__7__0'([], A, B, _, _, _) :-
        'call_pattern/1__8'(A, B).
'call_pattern/1__7__0'([J|M], A, B, D, E, C) :-
        (   J=suspension(_,K,_,_,_,_,F,G,H,I),
            K=mutable(active),
            F==D,
            G==E,
            '$via1_multi_hash_rule/2-1'(H, L) ->
            'call_pattern/1__7__1'(L, H, I, J, M, A, B, D, E, C)
        ;   'call_pattern/1__7__0'(M, A, B, D, E, C)
        ).
'call_pattern/1__7__1'([], _, _, _, F, A, B, D, E, C) :-
        'call_pattern/1__7__0'(F, A, B, D, E, C).
'call_pattern/1__7__1'([L|O], G, H, A, I, B, C, E, F, D) :-
        (   L=suspension(_,M,_,_,_,_,J,K),
            M=mutable(active),
            J==G,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', N) ->
            'call_pattern/1__7__2'(N, K, L, O, G, H, A, I, B, C, E, F, D)
        ;   'call_pattern/1__7__1'(O, G, H, A, I, B, C, E, F, D)
        ).
'call_pattern/1__7__2'([], _, _, J, F, G, H, I, A, B, D, E, C) :-
        'call_pattern/1__7__1'(J, F, G, H, I, A, B, D, E, C).
'call_pattern/1__7__2'([N|O], K, A, L, H, I, B, J, C, D, F, G, E) :-
        (   N=suspension(_,M,_,_,_,_,_),
            M=mutable(active),
            W=t(180,D,B,A,N),
            'chr novel_production'(D, W),
            'chr novel_production'(B, W),
            'chr novel_production'(A, W),
            'chr novel_production'(N, W),
            K=pragma(rule(_,_,_,_),ids(_,P),_,_,_),
            memberchk_eq(I, P),
            is_passive(H, I) ->
            'chr extend_history'(D, W),
            '$chr_translate__activate_constraint'(S, _, D, T),
            (   S==yes ->
                '$insert_in_store_call_pattern/1'(D)
            ;   true
            ),
            Q is G+1,
            R=odom(occ(F,Q),E),
            call_pattern(R),
            final_answer_pattern(odom(occ(F,G),E), odom([],E)),
            depends_on(odom(occ(F,G),E), R),
            (   D=suspension(_,U,_,V,_,_,_),
                U=mutable(active),
                V=mutable(T) ->
                'chr update_mutable'(inactive, U),
                'call_pattern/1__7__2'(O, K, A, L, H, I, B, J, C, D, F, G, E)
            ;   true
            )
        ;   'call_pattern/1__7__2'(O, K, A, L, H, I, B, J, C, D, F, G, E)
        ).
'call_pattern/1__7'(A, B) :-
        'call_pattern/1__8'(A, B).
'call_pattern/1__8'(A, B) :-
        nonvar(A),
        A=odom(C,D),
        nonvar(C),
        C=occ(E,F),
        '$via1_multi_hash_occurrence/4-2'(F, G), !,
        'call_pattern/1__8__0'(G, A, B, E, F, D).
'call_pattern/1__8__0'([], A, B, _, _, _) :-
        'call_pattern/1__9'(A, B).
'call_pattern/1__8__0'([J|M], A, B, D, E, C) :-
        (   J=suspension(_,K,_,_,_,_,F,G,H,I),
            K=mutable(active),
            F==D,
            G==E,
            '$via1_multi_hash_rule/2-1'(H, L) ->
            'call_pattern/1__8__1'(L, H, I, J, M, A, B, D, E, C)
        ;   'call_pattern/1__8__0'(M, A, B, D, E, C)
        ).
'call_pattern/1__8__1'([], _, _, _, F, A, B, D, E, C) :-
        'call_pattern/1__8__0'(F, A, B, D, E, C).
'call_pattern/1__8__1'([L|O], G, H, A, I, B, C, E, F, D) :-
        (   L=suspension(_,M,_,_,_,_,J,K),
            M=mutable(active),
            J==G,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', N) ->
            'call_pattern/1__8__2'(N, K, L, O, G, H, A, I, B, C, E, F, D)
        ;   'call_pattern/1__8__1'(O, G, H, A, I, B, C, E, F, D)
        ).
'call_pattern/1__8__2'([], _, _, J, F, G, H, I, A, B, D, E, C) :-
        'call_pattern/1__8__1'(J, F, G, H, I, A, B, D, E, C).
'call_pattern/1__8__2'([O|P], K, A, L, H, I, B, J, C, D, F, G, E) :-
        (   O=suspension(_,N,_,_,_,_,M),
            N=mutable(active),
            J1=t(181,D,B,A,O),
            'chr novel_production'(D, J1),
            'chr novel_production'(B, J1),
            'chr novel_production'(A, J1),
            'chr novel_production'(O, J1),
            K=pragma(rule(Q,R,S,T),ids(_,U),_,_,_),
            memberchk_eq(I, U),
            \+is_passive(H,I) ->
            'chr extend_history'(D, J1),
            '$chr_translate__activate_constraint'(F1, _, D, G1),
            (   F1==yes ->
                '$insert_in_store_call_pattern/1'(D)
            ;   true
            ),
            once(select2(I,_,U,R,_,V)),
            ai_observation_abstract_constraints(V, M, W),
            ai_observation_observe_list(odom([],E), W, odom([],X)),
            ai_observation_abstract_constraints(Q, M, Y),
            ai_observation_observe_list(odom([],X), Y, odom([],Z)),
            ord_add_element(Z, F, A1),
            ai_observation_abstract_goal_(Q, R, S, T, M, B1),
            call_pattern(odom(B1,A1)),
            (   ord_memberchk(F, Z) ->
                C1=no
            ;   C1=yes
            ),
            D1 is G+1,
            E1=odom(occ(F,D1),E),
            call_pattern(E1),
            depends_on_ap(odom(occ(F,G),E), odom(B1,A1), E1, C1),
            (   D=suspension(_,H1,_,I1,_,_,_),
                H1=mutable(active),
                I1=mutable(G1) ->
                'chr update_mutable'(inactive, H1),
                'call_pattern/1__8__2'(P, K, A, L, H, I, B, J, C, D, F, G, E)
            ;   true
            )
        ;   'call_pattern/1__8__2'(P, K, A, L, H, I, B, J, C, D, F, G, E)
        ).
'call_pattern/1__8'(A, B) :-
        'call_pattern/1__9'(A, B).
'call_pattern/1__9'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_call_pattern/1'(A)
        ;   true
        ).
final_answer_pattern(A, B) :-
        'final_answer_pattern/2__0'(A, B, _).
'final_answer_pattern/2__0'(A, B, _) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A,
        ai_observation_leq(B, F), !.
'final_answer_pattern/2__0'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'final_answer_pattern/2__0'(A,B,C), C, final_answer_pattern(A,B), [A,B]),
        'final_answer_pattern/2__0__0'(D, A, B, C).
'final_answer_pattern/2__0__0'([], A, B, C) :-
        'final_answer_pattern/2__1'(A, B, C).
'final_answer_pattern/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            F==A,
            ai_observation_leq(G, B) ->
            '$chr_translate__remove_constraint_internal'(D, _, I),
            (   I==yes ->
                '$delete_from_store_final_answer_pattern/2'(D)
            ;   true
            ),
            'final_answer_pattern/2__0__0'(E, A, B, C)
        ;   'final_answer_pattern/2__0__0'(E, A, B, C)
        ).
'final_answer_pattern/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'final_answer_pattern/2__0'(A,B,C), C, final_answer_pattern(A,B), [A,B]),
        'final_answer_pattern/2__1'(A, B, C).
'final_answer_pattern/2__1'(A, B, C) :-
        '$via1_multi_hash_initial_call_pattern/1-1'(A, D), !,
        'final_answer_pattern/2__1__0'(D, A, B, C).
'final_answer_pattern/2__1__0'([], A, B, C) :-
        'final_answer_pattern/2__2'(A, B, C).
'final_answer_pattern/2__1__0'([E|H], A, B, C) :-
        (   E=suspension(_,F,_,_,_,_,D),
            F=mutable(active),
            D==A,
            nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', G) ->
            'final_answer_pattern/2__1__1'(G, E, H, A, B, C)
        ;   'final_answer_pattern/2__1__0'(H, A, B, C)
        ).
'final_answer_pattern/2__1__1'([], _, D, A, B, C) :-
        'final_answer_pattern/2__1__0'(D, A, B, C).
'final_answer_pattern/2__1__1'([H|I], A, E, B, C, D) :-
        (   H=suspension(_,G,_,_,_,_,F),
            G=mutable(active),
            N=t(167,A,D,H),
            'chr novel_production'(A, N),
            'chr novel_production'(D, N),
            'chr novel_production'(H, N) ->
            'chr extend_history'(D, N),
            '$chr_translate__activate_constraint'(J, _, D, K),
            (   J==yes ->
                '$insert_in_store_final_answer_pattern/2'(D)
            ;   true
            ),
            ai_observation_schedule_new_calls(F, C),
            (   D=suspension(_,L,_,M,_,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'final_answer_pattern/2__1__1'(I, A, E, B, C, D)
            ;   true
            )
        ;   'final_answer_pattern/2__1__1'(I, A, E, B, C, D)
        ).
'final_answer_pattern/2__1'(A, B, C) :-
        'final_answer_pattern/2__2'(A, B, C).
'final_answer_pattern/2__2'(A, B, C) :-
        '$via1_multi_hash_depends_on/2-2'(A, D), !,
        'final_answer_pattern/2__2__0'(D, A, B, C).
'final_answer_pattern/2__2__0'([], A, B, C) :-
        'final_answer_pattern/2__3'(A, B, C).
'final_answer_pattern/2__2__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            E==A,
            M=t(169,G,C),
            'chr novel_production'(G, M),
            'chr novel_production'(C, M) ->
            'chr extend_history'(C, M),
            '$chr_translate__activate_constraint'(I, _, C, J),
            (   I==yes ->
                '$insert_in_store_final_answer_pattern/2'(C)
            ;   true
            ),
            final_answer_pattern(D, B),
            (   C=suspension(_,K,_,L,_,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'final_answer_pattern/2__2__0'(H, A, B, C)
            ;   true
            )
        ;   'final_answer_pattern/2__2__0'(H, A, B, C)
        ).
'final_answer_pattern/2__2'(A, B, C) :-
        'final_answer_pattern/2__3'(A, B, C).
'final_answer_pattern/2__3'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D), !,
        'final_answer_pattern/2__3__0'(D, A, B, C).
'final_answer_pattern/2__3__0'([], A, B, C) :-
        'final_answer_pattern/2__4'(A, B, C).
'final_answer_pattern/2__3__0'([D|E], A, B, C) :-
        (   D=suspension(_,G,_,_,_,_,F,_),
            G=mutable(active),
            '$via1_multi_hash_depends_on_goal/2-12'(k(F,A), I),
            'chr sbag_member'(H, I),
            H=suspension(_,L,_,_,_,_,J,K),
            L=mutable(active),
            J==F,
            K==A ->
            '$chr_translate__remove_constraint_internal'(D, _, M),
            (   M==yes ->
                '$delete_from_store_depends_on/2'(D)
            ;   true
            ),
            'final_answer_pattern/2__3__0'(E, A, B, C)
        ;   'final_answer_pattern/2__3__0'(E, A, B, C)
        ).
'final_answer_pattern/2__3'(A, B, C) :-
        'final_answer_pattern/2__4'(A, B, C).
'final_answer_pattern/2__4'(A, B, C) :-
        '$via1_multi_hash_depends_on_goal/2-2'(A, D), !,
        'final_answer_pattern/2__4__0'(D, A, B, C).
'final_answer_pattern/2__4__0'([], A, B, C) :-
        'final_answer_pattern/2__5'(A, B, C).
'final_answer_pattern/2__4__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            E==A,
            P=t(173,G,C),
            'chr novel_production'(G, P),
            'chr novel_production'(C, P) ->
            'chr extend_history'(C, P),
            '$chr_translate__activate_constraint'(L, _, C, M),
            (   L==yes ->
                '$insert_in_store_final_answer_pattern/2'(C)
            ;   true
            ),
            D=odom([_|I],_),
            B=odom([],J),
            K=odom(I,J),
            call_pattern(K),
            depends_on(D, K),
            (   C=suspension(_,N,_,O,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'final_answer_pattern/2__4__0'(H, A, B, C)
            ;   true
            )
        ;   'final_answer_pattern/2__4__0'(H, A, B, C)
        ).
'final_answer_pattern/2__4'(A, B, C) :-
        'final_answer_pattern/2__5'(A, B, C).
'final_answer_pattern/2__5'(A, B, C) :-
        '$via1_multi_hash_depends_on_as/3-2'(A, D), !,
        'final_answer_pattern/2__5__0'(D, A, B, C).
'final_answer_pattern/2__5__0'([], A, B, C) :-
        'final_answer_pattern/2__6'(A, B, C).
'final_answer_pattern/2__5__0'([G|J], A, B, C) :-
        (   G=suspension(_,H,_,_,_,_,D,E,F),
            H=mutable(active),
            E==A,
            '$via1_multi_hash_final_answer_pattern/2-1'(F, I) ->
            'final_answer_pattern/2__5__1'(I, D, F, G, J, A, B, C)
        ;   'final_answer_pattern/2__5__0'(J, A, B, C)
        ).
'final_answer_pattern/2__5__1'([], _, _, _, D, A, B, C) :-
        'final_answer_pattern/2__5__0'(D, A, B, C).
'final_answer_pattern/2__5__1'([K|L], E, F, A, G, B, C, D) :-
        (   K=suspension(_,J,_,_,_,_,H,I),
            J=mutable(active),
            H==F,
            R=t(179,A,D,K),
            'chr novel_production'(A, R),
            'chr novel_production'(D, R),
            'chr novel_production'(K, R) ->
            'chr extend_history'(D, R),
            '$chr_translate__activate_constraint'(N, _, D, O),
            (   N==yes ->
                '$insert_in_store_final_answer_pattern/2'(D)
            ;   true
            ),
            ai_observation_lub(C, I, M),
            final_answer_pattern(E, M),
            (   D=suspension(_,P,_,Q,_,_,_,_),
                P=mutable(active),
                Q=mutable(O) ->
                'chr update_mutable'(inactive, P),
                'final_answer_pattern/2__5__1'(L, E, F, A, G, B, C, D)
            ;   true
            )
        ;   'final_answer_pattern/2__5__1'(L, E, F, A, G, B, C, D)
        ).
'final_answer_pattern/2__5'(A, B, C) :-
        'final_answer_pattern/2__6'(A, B, C).
'final_answer_pattern/2__6'(A, B, C) :-
        '$via1_multi_hash_depends_on_as/3-3'(A, D), !,
        'final_answer_pattern/2__6__0'(D, A, B, C).
'final_answer_pattern/2__6__0'([], A, B, C) :-
        'final_answer_pattern/2__7'(A, B, C).
'final_answer_pattern/2__6__0'([G|J], A, B, C) :-
        (   G=suspension(_,H,_,_,_,_,D,E,F),
            H=mutable(active),
            F==A,
            '$via1_multi_hash_final_answer_pattern/2-1'(E, I) ->
            'final_answer_pattern/2__6__1'(I, D, E, G, J, A, B, C)
        ;   'final_answer_pattern/2__6__0'(J, A, B, C)
        ).
'final_answer_pattern/2__6__1'([], _, _, _, D, A, B, C) :-
        'final_answer_pattern/2__6__0'(D, A, B, C).
'final_answer_pattern/2__6__1'([K|L], E, F, A, G, B, C, D) :-
        (   K=suspension(_,J,_,_,_,_,H,I),
            J=mutable(active),
            H==F,
            R=t(179,A,K,D),
            'chr novel_production'(A, R),
            'chr novel_production'(K, R),
            'chr novel_production'(D, R) ->
            'chr extend_history'(D, R),
            '$chr_translate__activate_constraint'(N, _, D, O),
            (   N==yes ->
                '$insert_in_store_final_answer_pattern/2'(D)
            ;   true
            ),
            ai_observation_lub(I, C, M),
            final_answer_pattern(E, M),
            (   D=suspension(_,P,_,Q,_,_,_,_),
                P=mutable(active),
                Q=mutable(O) ->
                'chr update_mutable'(inactive, P),
                'final_answer_pattern/2__6__1'(L, E, F, A, G, B, C, D)
            ;   true
            )
        ;   'final_answer_pattern/2__6__1'(L, E, F, A, G, B, C, D)
        ).
'final_answer_pattern/2__6'(A, B, C) :-
        'final_answer_pattern/2__7'(A, B, C).
'final_answer_pattern/2__7'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-3'(A, D), !,
        'final_answer_pattern/2__7__0'(D, A, B, C).
'final_answer_pattern/2__7__0'([], A, B, C) :-
        'final_answer_pattern/2__8'(A, B, C).
'final_answer_pattern/2__7__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,_,E,_),
            F=mutable(active),
            E==A,
            M=t(182,G,C),
            'chr novel_production'(G, M),
            'chr novel_production'(C, M) ->
            'chr extend_history'(C, M),
            '$chr_translate__activate_constraint'(I, _, C, J),
            (   I==yes ->
                '$insert_in_store_final_answer_pattern/2'(C)
            ;   true
            ),
            final_answer_pattern(D, B),
            (   C=suspension(_,K,_,L,_,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'final_answer_pattern/2__7__0'(H, A, B, C)
            ;   true
            )
        ;   'final_answer_pattern/2__7__0'(H, A, B, C)
        ).
'final_answer_pattern/2__7'(A, B, C) :-
        'final_answer_pattern/2__8'(A, B, C).
'final_answer_pattern/2__8'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-2'(A, D), !,
        'final_answer_pattern/2__8__0'(D, A, B, C).
'final_answer_pattern/2__8__0'([], A, B, C) :-
        'final_answer_pattern/2__9'(A, B, C).
'final_answer_pattern/2__8__0'([H|K], A, B, C) :-
        (   H=suspension(_,I,_,_,_,_,D,E,F,G),
            I=mutable(active),
            E==A,
            '$via1_multi_hash_final_answer_pattern/2-1'(F, J) ->
            'final_answer_pattern/2__8__1'(J, D, F, G, H, K, A, B, C)
        ;   'final_answer_pattern/2__8__0'(K, A, B, C)
        ).
'final_answer_pattern/2__8__1'([], _, _, _, _, D, A, B, C) :-
        'final_answer_pattern/2__8__0'(D, A, B, C).
'final_answer_pattern/2__8__1'([L|M], E, F, G, A, H, B, C, D) :-
        (   L=suspension(_,K,_,_,_,_,I,J),
            K=mutable(active),
            I==F,
            X=t(183,A,D,L),
            'chr novel_production'(A, X),
            'chr novel_production'(D, X),
            'chr novel_production'(L, X) ->
            'chr extend_history'(D, X),
            '$chr_translate__activate_constraint'(T, _, D, U),
            (   T==yes ->
                '$insert_in_store_final_answer_pattern/2'(D)
            ;   true
            ),
            E=odom(occ(N,O),_),
            (   ai_observation_is_observed(C, N) ->
                ai_observed_internal(N, O)
            ;   ai_not_observed_internal(N, O)
            ),
            (   G==yes ->
                C=odom([],P),
                ord_del_element(P, N, Q),
                R=odom([],Q)
            ;   R=C
            ),
            ai_observation_lub(R, J, S),
            final_answer_pattern(E, S),
            (   D=suspension(_,V,_,W,_,_,_,_),
                V=mutable(active),
                W=mutable(U) ->
                'chr update_mutable'(inactive, V),
                'final_answer_pattern/2__8__1'(M, E, F, G, A, H, B, C, D)
            ;   true
            )
        ;   'final_answer_pattern/2__8__1'(M, E, F, G, A, H, B, C, D)
        ).
'final_answer_pattern/2__8'(A, B, C) :-
        'final_answer_pattern/2__9'(A, B, C).
'final_answer_pattern/2__9'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-3'(A, D), !,
        'final_answer_pattern/2__9__0'(D, A, B, C).
'final_answer_pattern/2__9__0'([], A, B, C) :-
        'final_answer_pattern/2__10'(A, B, C).
'final_answer_pattern/2__9__0'([H|K], A, B, C) :-
        (   H=suspension(_,I,_,_,_,_,D,E,F,G),
            I=mutable(active),
            F==A,
            '$via1_multi_hash_final_answer_pattern/2-1'(E, J) ->
            'final_answer_pattern/2__9__1'(J, D, E, G, H, K, A, B, C)
        ;   'final_answer_pattern/2__9__0'(K, A, B, C)
        ).
'final_answer_pattern/2__9__1'([], _, _, _, _, D, A, B, C) :-
        'final_answer_pattern/2__9__0'(D, A, B, C).
'final_answer_pattern/2__9__1'([L|M], E, F, G, A, H, B, C, D) :-
        (   L=suspension(_,K,_,_,_,_,I,J),
            K=mutable(active),
            I==F,
            X=t(183,A,L,D),
            'chr novel_production'(A, X),
            'chr novel_production'(L, X),
            'chr novel_production'(D, X) ->
            'chr extend_history'(D, X),
            '$chr_translate__activate_constraint'(T, _, D, U),
            (   T==yes ->
                '$insert_in_store_final_answer_pattern/2'(D)
            ;   true
            ),
            E=odom(occ(N,O),_),
            (   ai_observation_is_observed(J, N) ->
                ai_observed_internal(N, O)
            ;   ai_not_observed_internal(N, O)
            ),
            (   G==yes ->
                J=odom([],P),
                ord_del_element(P, N, Q),
                R=odom([],Q)
            ;   R=J
            ),
            ai_observation_lub(R, C, S),
            final_answer_pattern(E, S),
            (   D=suspension(_,V,_,W,_,_,_,_),
                V=mutable(active),
                W=mutable(U) ->
                'chr update_mutable'(inactive, V),
                'final_answer_pattern/2__9__1'(M, E, F, G, A, H, B, C, D)
            ;   true
            )
        ;   'final_answer_pattern/2__9__1'(M, E, F, G, A, H, B, C, D)
        ).
'final_answer_pattern/2__9'(A, B, C) :-
        'final_answer_pattern/2__10'(A, B, C).
'final_answer_pattern/2__10'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_final_answer_pattern/2'(A)
        ;   true
        ).
abstract_constraints(A) :-
        'abstract_constraints/1__0'(A, _).
'abstract_constraints/1__0'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', C), !,
        '$chr_translate__allocate_constraint'(chr_translate:'abstract_constraints/1__0'(A,B), B, abstract_constraints(A), [A]),
        'abstract_constraints/1__0__0'(C, A, B).
'abstract_constraints/1__0__0'([], A, B) :-
        'abstract_constraints/1__1'(A, B).
'abstract_constraints/1__0__0'([E|H], A, B) :-
        (   E=suspension(_,F,_,_,_,_,C,D),
            F=mutable(active),
            '$via1_multi_hash_initial_call_pattern/1-1'(C, G) ->
            'abstract_constraints/1__0__1'(G, C, D, E, H, A, B)
        ;   'abstract_constraints/1__0__0'(H, A, B)
        ).
'abstract_constraints/1__0__1'([], _, _, _, C, A, B) :-
        'abstract_constraints/1__0__0'(C, A, B).
'abstract_constraints/1__0__1'([I|J], D, E, A, F, B, C) :-
        (   I=suspension(_,H,_,_,_,_,G),
            H=mutable(active),
            G==D,
            O=t(167,A,I,C),
            'chr novel_production'(A, O),
            'chr novel_production'(I, O),
            'chr novel_production'(C, O) ->
            'chr extend_history'(C, O),
            '$chr_translate__activate_constraint'(K, _, C, L),
            (   K==yes ->
                '$insert_in_store_abstract_constraints/1'(C)
            ;   true
            ),
            ai_observation_schedule_new_calls(B, E),
            (   C=suspension(_,M,_,N,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'abstract_constraints/1__0__1'(J, D, E, A, F, B, C)
            ;   true
            )
        ;   'abstract_constraints/1__0__1'(J, D, E, A, F, B, C)
        ).
'abstract_constraints/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'abstract_constraints/1__0'(A,B), B, abstract_constraints(A), [A]),
        'abstract_constraints/1__1'(A, B).
'abstract_constraints/1__1'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__1__0'(C, A, B).
'abstract_constraints/1__1__0'([], A, B) :-
        'abstract_constraints/1__2'(A, B).
'abstract_constraints/1__1__0'([E|F], A, B) :-
        (   E=suspension(_,D,_,_,_,_,C),
            D=mutable(active),
            nonvar(C),
            C=odom(G,H),
            N=t(176,E,B),
            'chr novel_production'(E, N),
            'chr novel_production'(B, N),
            memberchk_eq(G, A) ->
            'chr extend_history'(B, N),
            '$chr_translate__activate_constraint'(J, _, B, K),
            (   J==yes ->
                '$insert_in_store_abstract_constraints/1'(B)
            ;   true
            ),
            I=odom(occ(G,1),H),
            call_pattern(I),
            depends_on(odom(G,H), I),
            (   B=suspension(_,L,_,M,_,_,_),
                L=mutable(active),
                M=mutable(K) ->
                'chr update_mutable'(inactive, L),
                'abstract_constraints/1__1__0'(F, A, B)
            ;   true
            )
        ;   'abstract_constraints/1__1__0'(F, A, B)
        ).
'abstract_constraints/1__1'(A, B) :-
        'abstract_constraints/1__2'(A, B).
'abstract_constraints/1__2'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__2__0'(C, A, B).
'abstract_constraints/1__2__0'([], A, B) :-
        'abstract_constraints/1__3'(A, B).
'abstract_constraints/1__2__0'([D|K], A, B) :-
        (   D=suspension(_,I,_,_,_,_,C),
            I=mutable(active),
            nonvar(C),
            C=odom(E,F),
            nonvar(E),
            E=occ(G,H),
            '$via1_multi_hash_occurrence/4-2'(H, J) ->
            'abstract_constraints/1__2__1'(J, G, H, F, D, K, A, B)
        ;   'abstract_constraints/1__2__0'(K, A, B)
        ).
'abstract_constraints/1__2__1'([], _, _, _, _, C, A, B) :-
        'abstract_constraints/1__2__0'(C, A, B).
'abstract_constraints/1__2__1'([L|O], E, F, D, A, G, B, C) :-
        (   L=suspension(_,M,_,_,_,_,H,I,J,K),
            M=mutable(active),
            H==E,
            I==F,
            '$via1_multi_hash_rule/2-1'(J, N) ->
            'abstract_constraints/1__2__2'(N, J, K, L, O, E, F, D, A, G, B, C)
        ;   'abstract_constraints/1__2__1'(O, E, F, D, A, G, B, C)
        ).
'abstract_constraints/1__2__2'([], _, _, _, H, E, F, D, C, G, A, B) :-
        'abstract_constraints/1__2__1'(H, E, F, D, C, G, A, B).
'abstract_constraints/1__2__2'([O|P], I, J, A, K, F, G, E, B, H, C, D) :-
        (   O=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==I,
            X=t(177,B,D,A,O),
            'chr novel_production'(B, X),
            'chr novel_production'(D, X),
            'chr novel_production'(A, X),
            'chr novel_production'(O, X),
            M=pragma(rule(_,_,_,_),ids(Q,_),_,_,_),
            memberchk_eq(J, Q),
            is_passive(I, J) ->
            'chr extend_history'(D, X),
            '$chr_translate__activate_constraint'(T, _, D, U),
            (   T==yes ->
                '$insert_in_store_abstract_constraints/1'(D)
            ;   true
            ),
            R is G+1,
            S=odom(occ(F,R),E),
            call_pattern(S),
            depends_on(odom(occ(F,G),E), S),
            (   D=suspension(_,V,_,W,_,_,_),
                V=mutable(active),
                W=mutable(U) ->
                'chr update_mutable'(inactive, V),
                'abstract_constraints/1__2__2'(P, I, J, A, K, F, G, E, B, H, C, D)
            ;   true
            )
        ;   'abstract_constraints/1__2__2'(P, I, J, A, K, F, G, E, B, H, C, D)
        ).
'abstract_constraints/1__2'(A, B) :-
        'abstract_constraints/1__3'(A, B).
'abstract_constraints/1__3'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__3__0'(C, A, B).
'abstract_constraints/1__3__0'([], A, B) :-
        'abstract_constraints/1__4'(A, B).
'abstract_constraints/1__3__0'([D|K], A, B) :-
        (   D=suspension(_,I,_,_,_,_,C),
            I=mutable(active),
            nonvar(C),
            C=odom(E,F),
            nonvar(E),
            E=occ(G,H),
            '$via1_multi_hash_occurrence/4-2'(H, J) ->
            'abstract_constraints/1__3__1'(J, G, H, F, D, K, A, B)
        ;   'abstract_constraints/1__3__0'(K, A, B)
        ).
'abstract_constraints/1__3__1'([], _, _, _, _, C, A, B) :-
        'abstract_constraints/1__3__0'(C, A, B).
'abstract_constraints/1__3__1'([L|O], E, F, D, A, G, B, C) :-
        (   L=suspension(_,M,_,_,_,_,H,I,J,K),
            M=mutable(active),
            H==E,
            I==F,
            '$via1_multi_hash_rule/2-1'(J, N) ->
            'abstract_constraints/1__3__2'(N, J, K, L, O, E, F, D, A, G, B, C)
        ;   'abstract_constraints/1__3__1'(O, E, F, D, A, G, B, C)
        ).
'abstract_constraints/1__3__2'([], _, _, _, H, E, F, D, C, G, A, B) :-
        'abstract_constraints/1__3__1'(H, E, F, D, C, G, A, B).
'abstract_constraints/1__3__2'([O|P], I, J, A, K, F, G, E, B, H, C, D) :-
        (   O=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==I,
            H1=t(178,B,D,A,O),
            'chr novel_production'(B, H1),
            'chr novel_production'(D, H1),
            'chr novel_production'(A, H1),
            'chr novel_production'(O, H1),
            M=pragma(rule(Q,R,S,T),ids(U,_),_,_,_),
            memberchk_eq(J, U),
            \+is_passive(I,J) ->
            'chr extend_history'(D, H1),
            '$chr_translate__activate_constraint'(D1, _, D, E1),
            (   D1==yes ->
                '$insert_in_store_abstract_constraints/1'(D)
            ;   true
            ),
            once(select2(J,_,U,Q,_,V)),
            ai_observation_abstract_constraints(V, C, W),
            ai_observation_observe_list(odom([],E), W, odom([],X)),
            ai_observation_abstract_constraints(R, C, Y),
            ai_observation_observe_list(odom([],X), Y, odom([],Z)),
            ai_observation_abstract_goal_(Q, R, S, T, C, A1),
            call_pattern(odom(A1,Z)),
            B1 is G+1,
            C1=odom(occ(F,B1),E),
            call_pattern(C1),
            depends_on_as(odom(occ(F,G),E), odom(A1,Z), C1),
            final_answer_pattern(odom(occ(F,G),E), odom([],E)),
            (   D=suspension(_,F1,_,G1,_,_,_),
                F1=mutable(active),
                G1=mutable(E1) ->
                'chr update_mutable'(inactive, F1),
                'abstract_constraints/1__3__2'(P, I, J, A, K, F, G, E, B, H, C, D)
            ;   true
            )
        ;   'abstract_constraints/1__3__2'(P, I, J, A, K, F, G, E, B, H, C, D)
        ).
'abstract_constraints/1__3'(A, B) :-
        'abstract_constraints/1__4'(A, B).
'abstract_constraints/1__4'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__4__0'(C, A, B).
'abstract_constraints/1__4__0'([], A, B) :-
        'abstract_constraints/1__5'(A, B).
'abstract_constraints/1__4__0'([D|K], A, B) :-
        (   D=suspension(_,I,_,_,_,_,C),
            I=mutable(active),
            nonvar(C),
            C=odom(E,F),
            nonvar(E),
            E=occ(G,H),
            '$via1_multi_hash_occurrence/4-2'(H, J) ->
            'abstract_constraints/1__4__1'(J, G, H, F, D, K, A, B)
        ;   'abstract_constraints/1__4__0'(K, A, B)
        ).
'abstract_constraints/1__4__1'([], _, _, _, _, C, A, B) :-
        'abstract_constraints/1__4__0'(C, A, B).
'abstract_constraints/1__4__1'([L|O], E, F, D, A, G, B, C) :-
        (   L=suspension(_,M,_,_,_,_,H,I,J,K),
            M=mutable(active),
            H==E,
            I==F,
            '$via1_multi_hash_rule/2-1'(J, N) ->
            'abstract_constraints/1__4__2'(N, J, K, L, O, E, F, D, A, G, B, C)
        ;   'abstract_constraints/1__4__1'(O, E, F, D, A, G, B, C)
        ).
'abstract_constraints/1__4__2'([], _, _, _, H, E, F, D, C, G, A, B) :-
        'abstract_constraints/1__4__1'(H, E, F, D, C, G, A, B).
'abstract_constraints/1__4__2'([O|P], I, J, A, K, F, G, E, B, H, C, D) :-
        (   O=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==I,
            X=t(180,B,D,A,O),
            'chr novel_production'(B, X),
            'chr novel_production'(D, X),
            'chr novel_production'(A, X),
            'chr novel_production'(O, X),
            M=pragma(rule(_,_,_,_),ids(_,Q),_,_,_),
            memberchk_eq(J, Q),
            is_passive(I, J) ->
            'chr extend_history'(D, X),
            '$chr_translate__activate_constraint'(T, _, D, U),
            (   T==yes ->
                '$insert_in_store_abstract_constraints/1'(D)
            ;   true
            ),
            R is G+1,
            S=odom(occ(F,R),E),
            call_pattern(S),
            final_answer_pattern(odom(occ(F,G),E), odom([],E)),
            depends_on(odom(occ(F,G),E), S),
            (   D=suspension(_,V,_,W,_,_,_),
                V=mutable(active),
                W=mutable(U) ->
                'chr update_mutable'(inactive, V),
                'abstract_constraints/1__4__2'(P, I, J, A, K, F, G, E, B, H, C, D)
            ;   true
            )
        ;   'abstract_constraints/1__4__2'(P, I, J, A, K, F, G, E, B, H, C, D)
        ).
'abstract_constraints/1__4'(A, B) :-
        'abstract_constraints/1__5'(A, B).
'abstract_constraints/1__5'(A, B) :-
        nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__5__0'(C, A, B).
'abstract_constraints/1__5__0'([], A, B) :-
        'abstract_constraints/1__6'(A, B).
'abstract_constraints/1__5__0'([D|K], A, B) :-
        (   D=suspension(_,I,_,_,_,_,C),
            I=mutable(active),
            nonvar(C),
            C=odom(E,F),
            nonvar(E),
            E=occ(G,H),
            '$via1_multi_hash_occurrence/4-2'(H, J) ->
            'abstract_constraints/1__5__1'(J, G, H, F, D, K, A, B)
        ;   'abstract_constraints/1__5__0'(K, A, B)
        ).
'abstract_constraints/1__5__1'([], _, _, _, _, C, A, B) :-
        'abstract_constraints/1__5__0'(C, A, B).
'abstract_constraints/1__5__1'([L|O], E, F, D, A, G, B, C) :-
        (   L=suspension(_,M,_,_,_,_,H,I,J,K),
            M=mutable(active),
            H==E,
            I==F,
            '$via1_multi_hash_rule/2-1'(J, N) ->
            'abstract_constraints/1__5__2'(N, J, K, L, O, E, F, D, A, G, B, C)
        ;   'abstract_constraints/1__5__1'(O, E, F, D, A, G, B, C)
        ).
'abstract_constraints/1__5__2'([], _, _, _, H, E, F, D, C, G, A, B) :-
        'abstract_constraints/1__5__1'(H, E, F, D, C, G, A, B).
'abstract_constraints/1__5__2'([O|P], I, J, A, K, F, G, E, B, H, C, D) :-
        (   O=suspension(_,N,_,_,_,_,L,M),
            N=mutable(active),
            L==I,
            J1=t(181,B,D,A,O),
            'chr novel_production'(B, J1),
            'chr novel_production'(D, J1),
            'chr novel_production'(A, J1),
            'chr novel_production'(O, J1),
            M=pragma(rule(Q,R,S,T),ids(_,U),_,_,_),
            memberchk_eq(J, U),
            \+is_passive(I,J) ->
            'chr extend_history'(D, J1),
            '$chr_translate__activate_constraint'(F1, _, D, G1),
            (   F1==yes ->
                '$insert_in_store_abstract_constraints/1'(D)
            ;   true
            ),
            once(select2(J,_,U,R,_,V)),
            ai_observation_abstract_constraints(V, C, W),
            ai_observation_observe_list(odom([],E), W, odom([],X)),
            ai_observation_abstract_constraints(Q, C, Y),
            ai_observation_observe_list(odom([],X), Y, odom([],Z)),
            ord_add_element(Z, F, A1),
            ai_observation_abstract_goal_(Q, R, S, T, C, B1),
            call_pattern(odom(B1,A1)),
            (   ord_memberchk(F, Z) ->
                C1=no
            ;   C1=yes
            ),
            D1 is G+1,
            E1=odom(occ(F,D1),E),
            call_pattern(E1),
            depends_on_ap(odom(occ(F,G),E), odom(B1,A1), E1, C1),
            (   D=suspension(_,H1,_,I1,_,_,_),
                H1=mutable(active),
                I1=mutable(G1) ->
                'chr update_mutable'(inactive, H1),
                'abstract_constraints/1__5__2'(P, I, J, A, K, F, G, E, B, H, C, D)
            ;   true
            )
        ;   'abstract_constraints/1__5__2'(P, I, J, A, K, F, G, E, B, H, C, D)
        ).
'abstract_constraints/1__5'(A, B) :-
        'abstract_constraints/1__6'(A, B).
'abstract_constraints/1__6'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_abstract_constraints/1'(A)
        ;   true
        ).
depends_on(A, B) :-
        'depends_on/2__0'(A, B, _).
'depends_on/2__0'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on/2__0'(A,B,C), C, depends_on(A,B), [A,B]),
        'depends_on/2__0__0'(D, A, B, C).
'depends_on/2__0__0'([], A, B, C) :-
        'depends_on/2__1'(A, B, C).
'depends_on/2__0__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==B,
            M=t(169,C,G),
            'chr novel_production'(C, M),
            'chr novel_production'(G, M) ->
            'chr extend_history'(C, M),
            '$chr_translate__activate_constraint'(I, _, C, J),
            (   I==yes ->
                '$insert_in_store_depends_on/2'(C)
            ;   true
            ),
            final_answer_pattern(A, E),
            (   C=suspension(_,K,_,L,_,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'depends_on/2__0__0'(H, A, B, C)
            ;   true
            )
        ;   'depends_on/2__0__0'(H, A, B, C)
        ).
'depends_on/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on/2__0'(A,B,C), C, depends_on(A,B), [A,B]),
        'depends_on/2__1'(A, B, C).
'depends_on/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_depends_on/2'(A)
        ;   true
        ).
depends_on_ap(A, B, C, D) :-
        'depends_on_ap/4__0'(A, B, C, D, _).
'depends_on_ap/4__0'(A, B, C, D, E) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(C, F), !,
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_ap/4__0'(A,B,C,D,E), E, depends_on_ap(A,B,C,D), [A,B,C,D]),
        'depends_on_ap/4__0__0'(F, A, B, C, D, E).
'depends_on_ap/4__0__0'([], A, B, C, D, E) :-
        'depends_on_ap/4__1'(A, B, C, D, E).
'depends_on_ap/4__0__0'([I|J], A, B, C, D, E) :-
        (   I=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            F==C,
            O=t(182,E,I),
            'chr novel_production'(E, O),
            'chr novel_production'(I, O) ->
            'chr extend_history'(E, O),
            '$chr_translate__activate_constraint'(K, _, E, L),
            (   K==yes ->
                '$insert_in_store_depends_on_ap/4'(E)
            ;   true
            ),
            final_answer_pattern(A, G),
            (   E=suspension(_,M,_,N,_,_,_,_,_,_),
                M=mutable(active),
                N=mutable(L) ->
                'chr update_mutable'(inactive, M),
                'depends_on_ap/4__0__0'(J, A, B, C, D, E)
            ;   true
            )
        ;   'depends_on_ap/4__0__0'(J, A, B, C, D, E)
        ).
'depends_on_ap/4__0'(A, B, C, D, E) :-
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_ap/4__0'(A,B,C,D,E), E, depends_on_ap(A,B,C,D), [A,B,C,D]),
        'depends_on_ap/4__1'(A, B, C, D, E).
'depends_on_ap/4__1'(A, B, C, D, E) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, F), !,
        'depends_on_ap/4__1__0'(F, A, B, C, D, E).
'depends_on_ap/4__1__0'([], A, B, C, D, E) :-
        'depends_on_ap/4__2'(A, B, C, D, E).
'depends_on_ap/4__1__0'([H|K], A, B, C, D, E) :-
        (   H=suspension(_,I,_,_,_,_,F,G),
            I=mutable(active),
            F==B,
            '$via1_multi_hash_final_answer_pattern/2-1'(C, J) ->
            'depends_on_ap/4__1__1'(J, G, H, K, A, B, C, D, E)
        ;   'depends_on_ap/4__1__0'(K, A, B, C, D, E)
        ).
'depends_on_ap/4__1__1'([], _, _, F, A, B, C, D, E) :-
        'depends_on_ap/4__1__0'(F, A, B, C, D, E).
'depends_on_ap/4__1__1'([L|M], G, A, H, B, C, D, E, F) :-
        (   L=suspension(_,K,_,_,_,_,I,J),
            K=mutable(active),
            L\==A,
            I==D,
            X=t(183,F,A,L),
            'chr novel_production'(F, X),
            'chr novel_production'(A, X),
            'chr novel_production'(L, X) ->
            'chr extend_history'(F, X),
            '$chr_translate__activate_constraint'(T, _, F, U),
            (   T==yes ->
                '$insert_in_store_depends_on_ap/4'(F)
            ;   true
            ),
            B=odom(occ(N,O),_),
            (   ai_observation_is_observed(G, N) ->
                ai_observed_internal(N, O)
            ;   ai_not_observed_internal(N, O)
            ),
            (   E==yes ->
                G=odom([],P),
                ord_del_element(P, N, Q),
                R=odom([],Q)
            ;   R=G
            ),
            ai_observation_lub(R, J, S),
            final_answer_pattern(B, S),
            (   F=suspension(_,V,_,W,_,_,_,_,_,_),
                V=mutable(active),
                W=mutable(U) ->
                'chr update_mutable'(inactive, V),
                'depends_on_ap/4__1__1'(M, G, A, H, B, C, D, E, F)
            ;   true
            )
        ;   'depends_on_ap/4__1__1'(M, G, A, H, B, C, D, E, F)
        ).
'depends_on_ap/4__1'(A, B, C, D, E) :-
        'depends_on_ap/4__2'(A, B, C, D, E).
'depends_on_ap/4__2'(_, _, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_depends_on_ap/4'(A)
        ;   true
        ).
depends_on_goal(A, B) :-
        'depends_on_goal/2__0'(A, B, _).
'depends_on_goal/2__0'(A, B, C) :-
        '$via1_multi_hash_depends_on/2-1'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_goal/2__0'(A,B,C), C, depends_on_goal(A,B), [A,B]),
        'depends_on_goal/2__0__0'(D, A, B, C).
'depends_on_goal/2__0__0'([], A, B, C) :-
        'depends_on_goal/2__1'(A, B, C).
'depends_on_goal/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,G,_,_,_,_,F,_),
            G=mutable(active),
            F==A,
            '$via1_multi_hash_final_answer_pattern/2-1'(B, I),
            'chr sbag_member'(H, I),
            H=suspension(_,K,_,_,_,_,J,_),
            K=mutable(active),
            J==B ->
            '$chr_translate__remove_constraint_internal'(D, _, L),
            (   L==yes ->
                '$delete_from_store_depends_on/2'(D)
            ;   true
            ),
            'depends_on_goal/2__0__0'(E, A, B, C)
        ;   'depends_on_goal/2__0__0'(E, A, B, C)
        ).
'depends_on_goal/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_goal/2__0'(A,B,C), C, depends_on_goal(A,B), [A,B]),
        'depends_on_goal/2__1'(A, B, C).
'depends_on_goal/2__1'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, D), !,
        'depends_on_goal/2__1__0'(D, A, B, C).
'depends_on_goal/2__1__0'([], A, B, C) :-
        'depends_on_goal/2__2'(A, B, C).
'depends_on_goal/2__1__0'([G|H], A, B, C) :-
        (   G=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active),
            D==B,
            P=t(173,C,G),
            'chr novel_production'(C, P),
            'chr novel_production'(G, P) ->
            'chr extend_history'(C, P),
            '$chr_translate__activate_constraint'(L, _, C, M),
            (   L==yes ->
                '$insert_in_store_depends_on_goal/2'(C)
            ;   true
            ),
            A=odom([_|I],_),
            E=odom([],J),
            K=odom(I,J),
            call_pattern(K),
            depends_on(A, K),
            (   C=suspension(_,N,_,O,_,_,_,_),
                N=mutable(active),
                O=mutable(M) ->
                'chr update_mutable'(inactive, N),
                'depends_on_goal/2__1__0'(H, A, B, C)
            ;   true
            )
        ;   'depends_on_goal/2__1__0'(H, A, B, C)
        ).
'depends_on_goal/2__1'(A, B, C) :-
        'depends_on_goal/2__2'(A, B, C).
'depends_on_goal/2__2'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_depends_on_goal/2'(A)
        ;   true
        ).
ai_observed_internal(A, B) :-
        'ai_observed_internal/2__0'(A, B, _).
'ai_observed_internal/2__0'(A, B, C) :-
        '$via1_multi_hash_ai_not_observed_internal/2-12'(k(A,B), D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'ai_observed_internal/2__0'(A,B,C), C, ai_observed_internal(A,B), [A,B]),
        'ai_observed_internal/2__0__0'(D, A, B, C).
'ai_observed_internal/2__0__0'([], A, B, C) :-
        'ai_observed_internal/2__1'(A, B, C).
'ai_observed_internal/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            F==A,
            G==B ->
            '$chr_translate__remove_constraint_internal'(D, _, I),
            (   I==yes ->
                '$delete_from_store_ai_not_observed_internal/2'(D)
            ;   true
            ),
            'ai_observed_internal/2__0__0'(E, A, B, C)
        ;   'ai_observed_internal/2__0__0'(E, A, B, C)
        ).
'ai_observed_internal/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'ai_observed_internal/2__0'(A,B,C), C, ai_observed_internal(A,B), [A,B]),
        'ai_observed_internal/2__1'(A, B, C).
'ai_observed_internal/2__1'(A, B, C) :-
        '$via1_multi_hash_ai_observed_internal/2-12'(k(A,B), E),
        (   'chr sbag_member'(D, E),
            D=suspension(_,H,_,_,_,_,F,G),
            H=mutable(active),
            F==A,
            G==B ->
            true
        ), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, I),
            (   I==yes ->
                '$delete_from_store_ai_observed_internal/2'(C)
            ;   true
            )
        ).
'ai_observed_internal/2__1'(A, B, C) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', E),
        'chr sbag_member'(D, E),
        D=suspension(_,F,_,_,_,_),
        F=mutable(active), !,
        (   var(C) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(C, _, G),
            (   G==yes ->
                '$delete_from_store_ai_observed_internal/2'(C)
            ;   true
            )
        ),
        ai_observed(A, B).
'ai_observed_internal/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_ai_observed_internal/2'(A)
        ;   true
        ).
ai_observed(A, B) :-
        'ai_observed/2__0'(A, B, _).
'ai_observed/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'ai_observed/2__0'(A,B,C), ai_observed(A,B), [A,B]),
        '$insert_in_store_ai_observed/2'(C).
ai_not_observed_internal(A, B) :-
        'ai_not_observed_internal/2__0'(A, B, _).
'ai_not_observed_internal/2__0'(A, B, _) :-
        '$via1_multi_hash_ai_observed_internal/2-12'(k(A,B), D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A,
        F==B, !.
'ai_not_observed_internal/2__0'(A, B, _) :-
        '$via1_multi_hash_ai_not_observed_internal/2-12'(k(A,B), D),
        (   'chr sbag_member'(C, D),
            C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A,
            F==B ->
            true
        ), !.
'ai_not_observed_internal/2__0'(A, B, _) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', D),
        'chr sbag_member'(C, D),
        C=suspension(_,E,_,_,_,_),
        E=mutable(active), !,
        ai_not_observed(A, B).
'ai_not_observed_internal/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'ai_not_observed_internal/2__0'(A,B,C), ai_not_observed_internal(A,B), [A,B]),
        '$insert_in_store_ai_not_observed_internal/2'(C).
ai_not_observed(A, B) :-
        'ai_not_observed/2__0'(A, B, _).
'ai_not_observed/2__0'(A, B, C) :-
        '$via1_multi_hash_stored_complete/3-1'(A, D), !,
        '$chr_translate__allocate_constraint'(chr_translate:'ai_not_observed/2__0'(A,B,C), C, ai_not_observed(A,B), [A,B]),
        'ai_not_observed/2__0__0'(D, A, B, C).
'ai_not_observed/2__0__0'([], A, B, C) :-
        'ai_not_observed/2__1'(A, B, C).
'ai_not_observed/2__0__0'([D|E], A, B, C) :-
        (   D=suspension(_,I,_,_,_,_,F,G,H),
            I=mutable(active),
            F==A,
            B<G,
            '$via1_multi_hash_stored/3-2'(B, K),
            'chr sbag_member'(J, K),
            J=suspension(_,O,_,_,_,_,L,M,N),
            O=mutable(active),
            L==A,
            M==B,
            N==yes ->
            '$chr_translate__remove_constraint_internal'(D, _, P),
            (   P==yes ->
                '$delete_from_store_stored_complete/3'(D)
            ;   true
            ),
            '$chr_translate__remove_constraint_internal'(J, _, Q),
            (   Q==yes ->
                '$delete_from_store_stored/3'(J)
            ;   true
            ),
            '$chr_translate__activate_constraint'(S, _, C, T),
            (   S==yes ->
                '$insert_in_store_ai_not_observed/2'(C)
            ;   true
            ),
            R is H-1,
            stored(A, B, maybe),
            stored_complete(A, G, R),
            (   C=suspension(_,U,_,V,_,_,_,_),
                U=mutable(active),
                V=mutable(T) ->
                'chr update_mutable'(inactive, U),
                'ai_not_observed/2__0__0'(E, A, B, C)
            ;   true
            )
        ;   'ai_not_observed/2__0__0'(E, A, B, C)
        ).
'ai_not_observed/2__0'(A, B, C) :-
        '$chr_translate__allocate_constraint'(chr_translate:'ai_not_observed/2__0'(A,B,C), C, ai_not_observed(A,B), [A,B]),
        'ai_not_observed/2__1'(A, B, C).
'ai_not_observed/2__1'(_, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_ai_not_observed/2'(A)
        ;   true
        ).
ai_is_observed(A, B) :-
        'ai_is_observed/2__0'(A, B, _).
'ai_is_observed/2__0'(A, B, _) :-
        '$via1_multi_hash_ai_not_observed/2-12'(k(A,B), D),
        'chr sbag_member'(C, D),
        C=suspension(_,G,_,_,_,_,E,F),
        G=mutable(active),
        E==A,
        F==B, !,
        fail.
'ai_is_observed/2__0'(_, _, _) :- !.
depends_on_as(A, B, C) :-
        'depends_on_as/3__0'(A, B, C, _).
'depends_on_as/3__0'(A, B, C, D) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, E), !,
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_as/3__0'(A,B,C,D), D, depends_on_as(A,B,C), [A,B,C]),
        'depends_on_as/3__0__0'(E, A, B, C, D).
'depends_on_as/3__0__0'([], A, B, C, D) :-
        'depends_on_as/3__1'(A, B, C, D).
'depends_on_as/3__0__0'([G|J], A, B, C, D) :-
        (   G=suspension(_,H,_,_,_,_,E,F),
            H=mutable(active),
            E==B,
            '$via1_multi_hash_final_answer_pattern/2-1'(C, I) ->
            'depends_on_as/3__0__1'(I, F, G, J, A, B, C, D)
        ;   'depends_on_as/3__0__0'(J, A, B, C, D)
        ).
'depends_on_as/3__0__1'([], _, _, E, A, B, C, D) :-
        'depends_on_as/3__0__0'(E, A, B, C, D).
'depends_on_as/3__0__1'([K|L], F, A, G, B, C, D, E) :-
        (   K=suspension(_,J,_,_,_,_,H,I),
            J=mutable(active),
            K\==A,
            H==D,
            R=t(179,E,A,K),
            'chr novel_production'(E, R),
            'chr novel_production'(A, R),
            'chr novel_production'(K, R) ->
            'chr extend_history'(E, R),
            '$chr_translate__activate_constraint'(N, _, E, O),
            (   N==yes ->
                '$insert_in_store_depends_on_as/3'(E)
            ;   true
            ),
            ai_observation_lub(F, I, M),
            final_answer_pattern(B, M),
            (   E=suspension(_,P,_,Q,_,_,_,_,_),
                P=mutable(active),
                Q=mutable(O) ->
                'chr update_mutable'(inactive, P),
                'depends_on_as/3__0__1'(L, F, A, G, B, C, D, E)
            ;   true
            )
        ;   'depends_on_as/3__0__1'(L, F, A, G, B, C, D, E)
        ).
'depends_on_as/3__0'(A, B, C, D) :-
        '$chr_translate__allocate_constraint'(chr_translate:'depends_on_as/3__0'(A,B,C,D), D, depends_on_as(A,B,C), [A,B,C]),
        'depends_on_as/3__1'(A, B, C, D).
'depends_on_as/3__1'(_, _, _, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_depends_on_as/3'(A)
        ;   true
        ).
ai_observation_gather_results :-
        'ai_observation_gather_results/0__0'(_).
'ai_observation_gather_results/0__0'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_observed_internal/2', B), !,
        '$chr_translate__allocate_constraint'(chr_translate:'ai_observation_gather_results/0__0'(A), A, ai_observation_gather_results, []),
        'ai_observation_gather_results/0__0__0'(B, A).
'ai_observation_gather_results/0__0__0'([], A) :-
        'ai_observation_gather_results/0__1'(A).
'ai_observation_gather_results/0__0__0'([B|C], A) :-
        (   B=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active) ->
            '$chr_translate__remove_constraint_internal'(B, _, G),
            (   G==yes ->
                '$delete_from_store_ai_observed_internal/2'(B)
            ;   true
            ),
            '$chr_translate__activate_constraint'(H, _, A, I),
            (   H==yes ->
                '$insert_in_store_ai_observation_gather_results/0'(A)
            ;   true
            ),
            ai_observed(D, E),
            (   A=suspension(_,J,_,K,_,_),
                J=mutable(active),
                K=mutable(I) ->
                'chr update_mutable'(inactive, J),
                'ai_observation_gather_results/0__0__0'(C, A)
            ;   true
            )
        ;   'ai_observation_gather_results/0__0__0'(C, A)
        ).
'ai_observation_gather_results/0__0'(A) :-
        '$chr_translate__allocate_constraint'(chr_translate:'ai_observation_gather_results/0__0'(A), A, ai_observation_gather_results, []),
        'ai_observation_gather_results/0__1'(A).
'ai_observation_gather_results/0__1'(A) :-
        nb_getval('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', B), !,
        'ai_observation_gather_results/0__1__0'(B, A).
'ai_observation_gather_results/0__1__0'([], A) :-
        'ai_observation_gather_results/0__2'(A).
'ai_observation_gather_results/0__1__0'([B|C], A) :-
        (   B=suspension(_,F,_,_,_,_,D,E),
            F=mutable(active) ->
            '$chr_translate__remove_constraint_internal'(B, _, G),
            (   G==yes ->
                '$delete_from_store_ai_not_observed_internal/2'(B)
            ;   true
            ),
            '$chr_translate__activate_constraint'(H, _, A, I),
            (   H==yes ->
                '$insert_in_store_ai_observation_gather_results/0'(A)
            ;   true
            ),
            ai_not_observed(D, E),
            (   A=suspension(_,J,_,K,_,_),
                J=mutable(active),
                K=mutable(I) ->
                'chr update_mutable'(inactive, J),
                'ai_observation_gather_results/0__1__0'(C, A)
            ;   true
            )
        ;   'ai_observation_gather_results/0__1__0'(C, A)
        ).
'ai_observation_gather_results/0__1'(A) :-
        'ai_observation_gather_results/0__2'(A).
'ai_observation_gather_results/0__2'(A) :- !,
        (   var(A) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(A, _, B),
            (   B==yes ->
                '$delete_from_store_ai_observation_gather_results/0'(A)
            ;   true
            )
        ).
'ai_observation_gather_results/0__2'(A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_ai_observation_gather_results/0'(A)
        ;   true
        ).
phase_end(A) :-
        'phase_end/1__0'(A, _).
'phase_end/1__0'(A, B) :-
        '$via1_multi_hash_delay_phase_end/2-1'(A, C), !,
        '$chr_translate__allocate_constraint'(chr_translate:'phase_end/1__0'(A,B), B, phase_end(A), [A]),
        'phase_end/1__0__0'(C, A, B).
'phase_end/1__0__0'([], A, B) :-
        'phase_end/1__1'(A, B).
'phase_end/1__0__0'([C|D], A, B) :-
        (   C=suspension(_,G,_,_,_,_,E,F),
            G=mutable(active),
            E==A ->
            '$chr_translate__remove_constraint_internal'(C, _, H),
            (   H==yes ->
                '$delete_from_store_delay_phase_end/2'(C)
            ;   true
            ),
            '$chr_translate__activate_constraint'(I, _, B, J),
            (   I==yes ->
                '$insert_in_store_phase_end/1'(B)
            ;   true
            ),
            call(F),
            (   B=suspension(_,K,_,L,_,_,_),
                K=mutable(active),
                L=mutable(J) ->
                'chr update_mutable'(inactive, K),
                'phase_end/1__0__0'(D, A, B)
            ;   true
            )
        ;   'phase_end/1__0__0'(D, A, B)
        ).
'phase_end/1__0'(A, B) :-
        '$chr_translate__allocate_constraint'(chr_translate:'phase_end/1__0'(A,B), B, phase_end(A), [A]),
        'phase_end/1__1'(A, B).
'phase_end/1__1'(_, A) :- !,
        (   var(A) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(A, _, B),
            (   B==yes ->
                '$delete_from_store_phase_end/1'(A)
            ;   true
            )
        ).
'phase_end/1__1'(_, A) :-
        '$chr_translate__activate_constraint'(B, _, A, _),
        (   B==yes ->
            '$insert_in_store_phase_end/1'(A)
        ;   true
        ).
delay_phase_end(A, B) :-
        'delay_phase_end/2__0'(A, B, _).
'delay_phase_end/2__0'(A, B, _) :-
        '$via1_multi_hash_phase_end/1-1'(A, D),
        'chr sbag_member'(C, D),
        C=suspension(_,F,_,_,_,_,E),
        F=mutable(active),
        E==A, !,
        call(B).
'delay_phase_end/2__0'(A, B, C) :-
        '$chr_translate__insert_constraint_internal'(_, _, C, chr_translate:'delay_phase_end/2__0'(A,B,C), delay_phase_end(A,B), [A,B]),
        '$insert_in_store_delay_phase_end/2'(C).
does_use_history(A) :-
        'does_use_history/1__0'(A, _).
'does_use_history/1__0'(A, B) :-
        'chr via_1'(A, D),
        get_attr(D, chr_translate, E),
        E=v(G,_,_,_,_,F),
        G/\16=:=16,
        (   'chr sbag_member'(C, F),
            C=suspension(_,I,_,_,_,_,H),
            I=mutable(active),
            H==A ->
            true
        ), !,
        (   var(B) ->
            true
        ;   '$chr_translate__remove_constraint_internal'(B, J, K),
            (   K==yes ->
                '$delete_from_store_does_use_history/1'(B),
                'detach_does_use_history/1'(J, B)
            ;   true
            )
        ).
'does_use_history/1__0'(A, B) :-
        (   var(B) ->
            '$chr_translate__insert_constraint_internal'(D, C, B, chr_translate:'does_use_history/1__0'(A,B), does_use_history(A), [A])
        ;   '$chr_translate__activate_constraint'(D, C, B, _)
        ),
        (   D==yes ->
            '$insert_in_store_does_use_history/1'(B),
            'attach_does_use_history/1'(C, B)
        ;   true
        ).
uses_history(A) :-
        'uses_history/1__0'(A, _).
'uses_history/1__0'(A, _) :-
        'chr via_1'(A, C),
        get_attr(C, chr_translate, D),
        D=v(F,_,_,_,_,E),
        F/\16=:=16,
        (   'chr sbag_member'(B, E),
            B=suspension(_,H,_,_,_,_,G),
            H=mutable(active),
            G==A ->
            true
        ), !.
'uses_history/1__0'(_, _) :- !,
        fail.
novel_production_call(A, B, C) :-
        'novel_production_call/3__0'(A, B, C, _).
'novel_production_call/3__0'(A, B, C, _) :-
        'chr via_1'(A, E),
        get_attr(E, chr_translate, F),
        F=v(H,_,_,_,_,G),
        H/\16=:=16,
        (   'chr sbag_member'(D, G),
            D=suspension(_,J,_,_,_,_,I),
            J=mutable(active),
            I==A ->
            true
        ), !,
        C=B.
'novel_production_call/3__0'(_, _, A, _) :- !,
        A=true.
